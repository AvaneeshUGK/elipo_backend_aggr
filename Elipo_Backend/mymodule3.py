import pymysql.cursors
import boto3
from googleapiclient.discovery import build
import requests
import httplib2
import json
from googleapiclient.discovery import build
import requests
from requests.auth import HTTPBasicAuth
import httplib2
import boto3
import pickle
import pymysql.cursors
import json
import os.path
import email.mime.text
import base64
import datetime   
import pickle
import os.path
import email.mime.text
import base64
from datetime import datetime
import calendar
import urllib3
from requests.auth import HTTPBasicAuth
import datetime
from datetime import date
import os
import email
import time
from collections import OrderedDict 
from pymysql import NULL
import re
import pymysql
from  aws_xray_sdk.core import recorder 
from aws_xray_sdk.core import patch_all
from  aws_xray_sdk.core import xray_recorder 
import jwt
from email import message
import logging
from fuzzywuzzy import fuzz
from fuzzywuzzy import process
import mailbox
from oauth2client.client import flow_from_clientsecrets
from oauth2client.client import FlowExchangeError
from hdbcli import dbapi
from email.mime.text import MIMEText




atoken = ''
flg = ''

def enable_xray(event):
    if 'Authorization' in event['params']['header'] :
       atoken =  event['params']['header']['Authorization']
    
    if atoken != '':
        flg = requests.get("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/getemail", headers={"Content-Type":"application/json", "Authorization":atoken})

    return json.loads(flg.text)['body']

def convertValuesTodict(desc , values ):
    res=[]
    if len(values) == 1 :
        if type(values)==list:
            values=values[0]
        val =  {column.lower(): value for column, value in zip(values.column_names, values.column_values)}
        res.append(val.copy())
    else :
        for i in values:
            val1 =  {column.lower(): value for column, value in zip(i.column_names, i.column_values)}
            res.append(val1.copy())
    
    return res

def hdbcliConnect():
    mydb = dbapi.connect(
        address='27ac90fc-3667-4494-941a-01c999afd2de.hana.prod-us20.hanacloud.ondemand.com',
        port=443,
        user='DBADMIN',
        password='Peol@072023',
        encrypt='True' )
    return mydb

#Rules : 

# def getRuleDetails(event, context):
    global dbScehma 
    dbScehma = event["stage-variables"]["schema"]
    
    client = boto3.client(
    'secretsmanager',
    region_name='eu-central-1',
    aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    aws_secret_access_key='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' )
    
    secret = event["stage-variables"]["secreat"]
    resp = client.get_secret_value(
        SecretId= secret
    )
    secretDict = json.loads(resp['SecretString'])

    mydb = pymysql.connect(
        host=secretDict['host'],
        user=secretDict['username'],
        passwd=secretDict['password'],
        database=secretDict['dbname'],
        charset='utf8mb4',
        cursorclass=pymysql.cursors.DictCursor
    )

    try:
        print(event)
        with mydb.cursor() as mycursor:
            defSchemaQuery = "use " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
            on = mycursor.fetchone()
            if on['value1'] == 'on':
                chk = enable_xray(event)
                if chk['Enable'] == True:
                    patch_all() 
                    print(event)
            
            if "rule_id" in event["params"]["querystring"]:
                
                rule_id = event["params"]["querystring"]["rule_id"]
                rule = {}
                
                mycursor.execute("SELECT a.*, b.rule_name " \
                    "FROM rule a " \
                    "inner join rule_snro b " \
                    "on a.rule_id = b.rule_id " \
                    "where a.rule_id = %s", rule_id)
                rule_list = mycursor.fetchall()
             
                criteria = []
                approval_type = ""
                ec_isgroup = ""
                escelator = ""
                ifnot_withindays = ""
                comments = ""
                due_notification = ""
                due_reminder = ""
                overdue_notification = ""
                overdue_reminder = ""
                
                for row in rule_list:
                    
                    approval_type = row["approval_type"]
                    ec_isgroup = row["ec_isgroup"]
                    escelator = row["escelator"]
                    ifnot_withindays = row["ifnot_withindays"]
                    comments = row["comments"]
                    rule_name = row["rule_name"]
                    due_notification = row["due_notification"]
                    due_reminder = row["due_reminder"]
                    overdue_notification = row["overdue_notification"]
                    overdue_reminder = row["overdue_reminder"]
                        
                    if row["decider_type"] == "number":
                        data = {
                            "decider" : row["decider"],
                            "operator" : row["operator"], 
                            "d_value" : int( row["d_value"] ), 
                            "d_value2" : int( row["d_value2"] ), 
                            "decider_type" : row["decider_type"]
                        }
                        criteria.append(data)
                        
                    else:
                        data = {
                            "decider" : row["decider"],
                            "operator" : row["operator"], 
                            "d_value" : row["d_value"], 
                            "d_value2" : row["d_value2"],
                            "decider_type" : row["decider_type"]
                        }
                        criteria.append(data)
               
                mycursor.execute("select * from rule_approver where rule_key = %s", rule_id)
                approver = mycursor.fetchall()
                
                approver_final = [] 
                groupid = []
                memberid = []
                
                for row in approver:
                    if row["isgroup"] == 'y':
                        groupid.append(row["approver"])
                    elif row["isgroup"] == 'n':
                        memberid.append(row["approver"])
                
                if groupid and len(groupid) > 1:
                    mycursor.execute("select group_id, name from " + dbScehma + ".group where group_id in {}".format(tuple(groupid)))
                    
                elif groupid and len(groupid) == 1:
                    group = (groupid[0])
                    sqlQuery = "select group_id, name from " + dbScehma + ".group where group_id = %s"
                    mycursor.execute(sqlQuery, group)
                    
                for row in mycursor:
                    temp1 = {
                        "isgroup": "y",
                        "approver": row["group_id"],
                        "name": row["name"],
                        "position": ""
                    }
                    approver_final.append(temp1)
             
                if memberid and len(memberid) > 1:
                    mycursor.execute("select member_id, fs_name, ls_name, position from member where member_id in {}".format(tuple(memberid)))
                
                elif memberid and len(memberid) == 1:
                    member = (memberid[0])
                    sqlQuery = "select member_id, fs_name, ls_name, position from member where member_id = %s"
                    mycursor.execute(sqlQuery, member) 
                    
                for row in mycursor:
                    temp1 = {
                        "isgroup": "n",
                        "approver": row["member_id"],
                        "name": row["fs_name"] + " " + row["ls_name"],
                        "position": row["position"]
                    }
                    approver_final.append(temp1)
           
                app = []
                for data in approver:
                    
                    for row in approver_final:
                        
                        if row["approver"] == data["approver"] and row["isgroup"] == data["isgroup"]:
                            
                            temp = {
                                "isgroup" : row["isgroup"],
                                "approver" : row["approver"],
                                "name": row["name"],
                                "level" : data["level"],
                                "position": row["position"]
                            }
                            app.append(temp)
                            
                    if str(data["approver"]) == "999999999" and data["isgroup"] == "y":
                            temp = {
                                "isgroup" : data["isgroup"],
                                "approver" : data["approver"],
                                "name": "To ERP",
                                "level" : data["level"],
                                "position": ""  
                            }
                            app.append(temp)
                            
                rule_detail = {
                    "rule_id": rule_id,
                    "rule_name": rule_name,
                    "approval_type" : approval_type, 
                    "due_notification" : due_notification,
                    "due_reminder" : due_reminder,
                    "overdue_notification" : overdue_notification,
                    "overdue_reminder" : overdue_reminder,
                    "ec_isgroup" : ec_isgroup, 
                    "escelator" : escelator, 
                    "es_name" : "",
                    "ifnot_withindays" : ifnot_withindays, 
                    "comments" : comments,
                    "criteria" : criteria,
                    "approvers" : app
                }
                
            else:
                
                is_approval = 'y'
                
                if "is_approval" in event["params"]["querystring"]:
                    is_approval = event["params"]["querystring"]["is_approval"]
                    
                rule_detail = []
                
                mycursor.execute("SELECT a.*, b.rule_name, c.department_name " \
                	"FROM rule a " \
                	"inner join rule_snro b " \
                	"on a.rule_id = b.rule_id " \
                    "left join departmental_budget_master c " \
                    "on a.d_value = c.department_id " \
                	"where b.is_approval = %s " \
                	"order by a.rule_id", is_approval)
                rules = mycursor.fetchall()
                
                dict_rule = rules
                rule_keys = []
                escalator = []
                distinct_rule = []
                
                for row in rules:
                    temp = {
                        "is_on": row["is_on"],
                        "rule_id": row["rule_id"],
                        "rule_name": row["rule_name"],
                        "approval_type" : row["approval_type"], 
                        "ec_isgroup" : row["ec_isgroup"], 
                        "escelator" : row["escelator"], 
                        "es_name" : "",
                        "ifnot_withindays" : row["ifnot_withindays"], 
                        "comments" : row["comments"],
                        "due_notification" : row["due_notification"],
                        "due_reminder" : row["due_reminder"],
                        "overdue_notification" : row["overdue_notification"],
                        "overdue_reminder" : row["overdue_reminder"]
                    }
                    distinct_rule.append(temp)
                
                    
                res_list = [] 
                approvers_list = []
                
                for i in range(len(distinct_rule)): 
                    if distinct_rule[i] not in distinct_rule[i + 1:]: 
                        res_list.append(distinct_rule[i]) 
                
                for each in rules:
                    rule_keys.append(each['rule_id'])
                
                if rule_keys and len(rule_keys) > 1:
                    mycursor.execute("SELECT * FROM rule_approver where rule_key in {}".format(tuple(rule_keys)))
                    approvers_list = mycursor.fetchall()
                    
                elif len(rule_keys) == 1:
                    key = (rule_keys[0])
                    sqlQuery = "select * from rule_approver where rule_key = %s"
                    mycursor.execute(sqlQuery, key)
                    approvers_list = mycursor.fetchall()
                
                groupid = []
                memberid = []
                
                for row in approvers_list:
                    if row["isgroup"] == 'y':
                        groupid.append(row["approver"])
                    elif row["isgroup"] == 'n':
                        memberid.append(row["approver"])
            
                approver_final = []  
                
                if groupid and len(groupid) > 1:
                
                    mycursor.execute("select group_id, name from " + dbScehma + ".group where group_id in {}".format(tuple(groupid)))
                    
                elif len(groupid) == 1:
                    group = (groupid[0])
                    sqlQuery = "select group_id, name from " + dbScehma + ".group where group_id = %s"
                    mycursor.execute(sqlQuery, group)
                    
                for row in mycursor:
                    temp1 = {
                        "isgroup": "y",
                        "approver": row["group_id"],
                        "name": row["name"],
                        "position": ""
                    }
                    approver_final.append(temp1)
         
                if memberid and len(memberid) > 1:
                    mycursor.execute("select member_id, fs_name, ls_name, position from member where member_id in {}".format(tuple(memberid)))
                
                elif len(memberid) == 1:
                    member = (memberid[0])
                    sqlQuery = "select member_id, fs_name, ls_name, position from member where member_id = %s"
                    mycursor.execute(sqlQuery, member) 
                    
                for row in mycursor:
                    temp1 = {
                        "isgroup": "n",
                        "approver": row["member_id"],
                        "name": row["fs_name"] + " " + row["ls_name"],
                        "position": row["position"]
                    }
                    approver_final.append(temp1)
         
                for row in res_list:
                    approvers = []
                    criteria = []
                    
                    for data in approvers_list:
                        
                        if row["rule_id"] == data["rule_key"]:
                            
                            for temp1 in approver_final:
                                
                                if data["approver"] == temp1["approver"] and data["isgroup"] == temp1["isgroup"]:
                                    temp = {
                                        "isgroup" : temp1["isgroup"],
                                        "approver" : data["approver"],
                                        "name": temp1["name"],
                                        "level" : data['level'],
                                        "position": temp1["position"]
                                    }
                                    approvers.append(temp)
                                    
                                elif str(data["approver"]) == "999999999" and data["isgroup"] == "y":
                                    temp = {
                                        "isgroup" : temp1["isgroup"],
                                        "approver" : data["approver"],
                                        "name": "To ERP",
                                        "level" : data['level'],
                                        "position": ""
                                    }
                                    approvers.append(temp)
                                    break
                                
                            approvers = sorted(approvers, key = lambda i: i['level'])      
                            
                    for value in dict_rule:
                        
                        decider = ""
                        if row["rule_id"] == value["rule_id"]:
                            
                            if value["decider_type"] == "string":
                                
                                if value["decider"] == "discount" and value["operator"] != "between":
                                    decider = "Discount" + " " + value["operator"] + " " + value["d_value"]
                                    
                                elif value["decider"] == "discount" and value["operator"] == "between":
                                    decider = "Discount between " + value["d_value"] + " and " + value["d_value2"]
                                    
                                elif value["decider"] == "amount" and value["operator"] != "between":
                                    decider = "Amount " + value["operator"] + " " + value["d_value"]
                                    
                                elif value["decider"] == "amount" and value["operator"] == "between":
                                    decider = "Amount between " + value["d_value"] + " and " + value["d_value2"]
                                    
                                elif value["decider"] == "gl_account" and value["operator"] != "between":
                                    decider = "G/L account " + value["operator"] + " " + value["d_value"]
                                    
                                elif value["decider"] == "currency" and value["operator"] != "between":
                                    decider = "Currency " + value["operator"] + " " + value["d_value"]
                                    
                                elif value["decider"] == "cost_center":
                                    decider = "Cost center " + " " + value["operator"] + " " + value["d_value"]
                                    
                                elif value["decider"] == "npo":
                                    decider = "NPO " + " " + value["operator"] + " " + value["d_value"]
                                    
                                elif value["decider"] == "vendor_no":
                                    decider = "Vendor No. " + " " + value["operator"] + " " + value["d_value"]
                                    
                                elif value["decider"] == "department_id":
                                    if value["department_name"] == None :
                                        value["department_name"] = ''
                                    decider = "Department " + " " + value["operator"] + " " + value["department_name"]
                                
                                elif value["decider"] == "item_category":
                                    decider = "Item Category " + " " + value["operator"] + " " + value["d_value"]
                                    
                                elif value["decider"] == "invoice_type":
                                    decider = "Invoice Type" + " " + value["operator"] + " " + value["d_value"]
                                    
                                elif value["decider"] == "supplier_type	":
                                    decider = "Supplier Type" + " " + value["operator"] + " " + value["d_value"]
                                    
                                elif value["decider"] == "jurisdiction_code": #EPDS-69
                                    decider = "jurisdiction code" + " " + value["operator"] + " " + value["d_value"] #EPDS-69
                                    
                                elif value["decider"] == "document_type":
                                    rule_value = " "
                                    if value["d_value"] == 'RE':
                                        rule_value = "Invoice" 
                                    elif value["d_value"] == 'KG':
                                        rule_value = "Credit Memo" 
                                    elif value["d_value"] == 'SU':
                                        rule_value = "Debit Memo"
                                        
                                    decider = "Document Type" + " " + value["operator"] + " " + rule_value
                                    
                                elif value["decider"] == "default":
                                    decider = "Default"
                                
                                val = {
                                    "rule" : decider,
                                    "decider_type" : value["decider_type"]
                                }
                                criteria.append(val)
                                
                            else:
                                
                                if value["decider"] == "discount" and value["operator"] != "between":
                                    decider = "Discount" + " " + value["operator"] + " " + str(int(value["d_value"]))
                                    
                                elif value["decider"] == "discount" and value["operator"] == "between":
                                    decider = "Discount between " + " " + str(int(value["d_value"])) + " and " + str(int(value["d_value2"]))
                                    
                                elif value["decider"] == "amount" and value["operator"] != "between":
                                    decider = "Amount " + " " + str(value["operator"]) + " " + str(int(value["d_value"]))
                                    
                                elif value["decider"] == "amount" and value["operator"] == "between":
                                    decider = "Amount between " + str(int(value["d_value"])) + " and " + str(int(value["d_value2"]))
                                    
                                elif value["decider"] == "gl_account" and value["operator"] != "between":
                                    decider = "G/L account " + value["operator"] + " " + value["d_value"]
                                    
                                elif value["decider"] == "currency" and value["operator"] != "between":
                                    decider = "Currency " + value["operator"] + " " + value["d_value"]
                                    
                                elif value["decider"] == "cost_center":
                                    decider = "Cost center " + " " + value["operator"] + " " + value["d_value"]
                                
                                elif value["decider"] == "npo":
                                    decider = "NPO " + " " + value["operator"] + " " + value["d_value"]
                                
                                elif value["decider"] == "vendor_no":
                                    decider = "Vendor No. " + value["operator"] + " " + value["d_value"]
                                    
                                elif value["decider"] == "department_id":
                                    decider = "Department " + " " + value["operator"] + " " + value["department_name"]
                                    
                                elif value["decider"] == "item_category":
                                    decider = "Item Category " + " " + value["operator"] + " " + value["d_value"]
                                    
                                elif value["decider"] == "invoice_type":
                                    decider = "Invoice Type" + " " + value["operator"] + " " + value["d_value"]
                                    
                                elif value["decider"] == "supplier_type	":
                                    decider = "Supplier Type" + " " + value["operator"] + " " + value["d_value"]
                                    
                                elif value["decider"] == "Jurisdiction_code": #EPDS-69
                                    decider = "jurisdiction code" + " " + value["operator"] + " " + value["d_value"] #EPDS-69
                                
                                elif value["decider"] == "default":
                                    decider = "Default"
                                    
                                val = {
                                    "rule": decider,
                                    "decider_type" : value["decider_type"]
                                }
                                criteria.append(val)
                        
                    record = {
                        "is_on": row["is_on"],
                        "rule_id": row["rule_id"],
                        "rule_name": row["rule_name"],
                        "approval_type" : row["approval_type"], 
                        "ec_isgroup" : row["ec_isgroup"], 
                        "escelator" : row["escelator"], 
                        "es_name" : row["es_name"],
                        "ifnot_withindays" : row["ifnot_withindays"], 
                        "comments" : row["comments"],
                        "due_notification" : row["due_notification"],
                        "due_reminder" : row["due_reminder"],
                        "overdue_notification" : row["overdue_notification"],
                        "overdue_reminder" : row["overdue_reminder"],
                        "criteria": criteria,
                        "approvers" : approvers
                    }
                    rule_detail.append(record) 
        
    except:
        return {
            'statuscode': 500,
            'body': json.dumps("Internal Fail")
        }            
                
    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': rule_detail
    }

def postRuleDetails(event , context):
    global dbScehma 
    dbScehma = event["stage-variables"]["schema"]
    
    client = boto3.client(
    'secretsmanager',
    region_name='eu-central-1',
    aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    aws_secret_access_key='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' )
    
    secret = event["stage-variables"]["secreat"]
    resp = client.get_secret_value(
        SecretId= secret
    )
    secretDict = json.loads(resp['SecretString'])

    mydb = pymysql.connect(
        host=secretDict['host'],
        user=secretDict['username'],
        passwd=secretDict['password'],
        database=secretDict['dbname'],
        charset='utf8mb4',
        cursorclass=pymysql.cursors.DictCursor
    )

    record = {
        "rule": "",
        "rule_name": "",
        "approval_type": "",
        "is_approval": "y",   #change to "" once front end peep makes changes
        "ec_isgroup": "",
        "escelator": "",
        "ifnot_withindays": "",
        "due_notification" : "",
        "due_reminder" : "",
        "overdue_notification" : "",
        "overdue_reminder" : "",
        "comments": ""
    }

    approvers = []

    try:
        if "is_approval" in event["params"]["querystring"]:
            record["is_approval"] = event["params"]["querystring"]["is_approval"]
        
        if "rule_name" in event["params"]["querystring"]:
            record["rule_name"] = event["params"]["querystring"]["rule_name"]

        if "approvers" in event["body-json"]:
            for approver in event["body-json"]["approvers"]:
                app = {
                    'level': approver['level'],
                    'isgroup': approver['isgroup'],
                    'approver': approver['approver']
                }
                approvers.append(app)
                
                if "members" in event["body-json"]["approvers"]:
                    for member in approver["members"]:
                        mem = {
                            'level': approver['level'],
                            'isgroup': 'n',
                            'approver': member
                        }
                        approvers.append(mem)

        criteria = []
        print(event)
        if 'criteria' in event["body-json"]:
            for each in event["body-json"]['criteria']:
                if str(each["type"]) == "number":
                    value1 = '0' * (11 - len(str(each['value1']))) + str(each['value1'])
                    value2 = '0' * (11 - len(str(each['value2']))) + str(each['value2'])
                else:
                    value1 = each['value1']
                    value2 = each['value2']

                cat = {
                    "decider": each['decider'],
                    "operator": each['operator'],
                    "value1": value1,
                    "value2": value2,
                    "type": each['type']
                }
                criteria.append(cat)

        for value in event["body-json"]:
            if value in record:
                record[value] = event["body-json"][value]

        with mydb.cursor() as mycursor:
            defSchemaQuery = "use " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
            on = mycursor.fetchone()
            if on['value1'] == 'on':
                chk = enable_xray(event)
                if chk['Enable'] == True:
                    patch_all() 	

            dup = []
            for row in criteria:

                if row['decider'] == "default":
                    values = (row['decider'],)
                    sqlQuery = "select rule_id from rule where decider = %s"
                    mycursor.execute(sqlQuery, values)
                    defu = mycursor.fetchall()
                    if defu:
                        raise pymysql.err.IntegrityError
                        
                if row['decider'] == "default_assignment":
                    values = (row['decider'],)
                    sqlQuery = "select rule_id from rule where decider = %s"
                    mycursor.execute(sqlQuery, values)
                    defu = mycursor.fetchall()
                    if defu:
                        raise pymysql.err.IntegrityError
                
                if row['decider'] != "npo":
                    values = (row['decider'], row['operator'], row['value1'], row['value2'])
                    sqlQuery = "select rule_id from rule where decider = %s and operator = %s and d_value = %s and d_value2 = %s"
                    mycursor.execute(sqlQuery, values)
                    result = mycursor.fetchall()
                    if not result:
                        dup = []
                        break
        
                    ruleIds = [sub['rule_id'] for sub in result]
                    if not dup:
                        dup = ruleIds
                    else:
                        dup = [value for value in dup if value in ruleIds]
                
            if dup:
                for each in dup:
                    values = (each,)
                    sqlQuery = "select rule_id from rule where rule_id = %s"
                    mycursor.execute(sqlQuery, values)
                    result = mycursor.fetchall()

                    if result and len(criteria) == len(result):
                        raise pymysql.err.IntegrityError

            sqlQuery = "INSERT INTO rule_snro (rule_name, approval_type, is_approval) VALUES ( %s, %s, %s)"
            values = ( record["rule_name"], record["approval_type"], record["is_approval"])
            mycursor.execute(sqlQuery, values)

            rule_key = mycursor.lastrowid

            sqlQuery = "INSERT INTO rule ( rule_id, decider, operator, d_value, d_value2, approval_type, ec_isgroup, escelator, ifnot_withindays, comments, " \
                       "decider_type, due_notification, due_reminder, overdue_notification, overdue_reminder) VALUES " \
                       "( %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)"

            values = []
            for row in criteria:
                tup = (rule_key, row['decider'], row['operator'], row['value1'], row['value2'], record["approval_type"], record["ec_isgroup"], record["escelator"], 
                    record["ifnot_withindays"], record["comments"], row['type'], record["due_notification"], record["due_reminder"], record["overdue_notification"],
                    record["overdue_reminder"])
                values.append(tup)
            mycursor.executemany(sqlQuery, values)

            values = []

            for index, each in enumerate(approvers):
                tup = (rule_key, each['isgroup'], each['approver'], each["level"])
                values.append(tup)

            sqlQuery = "INSERT INTO rule_approver (rule_key, isgroup, approver, level) VALUES ( %s, %s, %s, %s)"

            if values:
                mycursor.executemany(sqlQuery, values)

            mydb.commit()

    except pymysql.err.IntegrityError as e:
        mydb.rollback()
        return {
            'statuscode': 500,
            'body': json.dumps("Duplicate Rule")
        }

    except:
        mydb.rollback()
        return {
            'statuscode': 500,
            'body': json.dumps("Internal Failure")
        }

    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': json.dumps("Sucessfully Added New Rule")
    }

def patchRuleDetails(event, context):
    global dbScehma 
    dbScehma = event["stage-variables"]["schema"]
    
    client = boto3.client(
    'secretsmanager',
    region_name='eu-central-1',
    aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    aws_secret_access_key='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' )

    secret = event["stage-variables"]["secreat"]
    resp = client.get_secret_value(
        SecretId= secret
    )
    secretDict = json.loads(resp['SecretString'])

    mydb = pymysql.connect(
        host=secretDict['host'],
        user=secretDict['username'],
        passwd=secretDict['password'],
        database=secretDict['dbname'],
        charset='utf8mb4',
        cursorclass=pymysql.cursors.DictCursor
    )

    record = {
        "rule_id": "",
        "rule_name": "",
        "approval_type": "",
        "ec_isgroup": "",
        "escelator": "",
        "ifnot_withindays": "",
        "due_notification" : "",
        "due_reminder" : "",
        "overdue_notification" : "",
        "overdue_reminder" : "",
        "comments": ""
    }
    msg = "Update Unsucessful!"
    approvers = []
    rule = ""
    
    try:
        print(event)
        for value in event["body-json"]:
            if value in record:
                record[value] = event["body-json"][value]
                
        with mydb.cursor() as mycursor:
            defSchemaQuery = "use " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
            on = mycursor.fetchone()
            if on['value1'] == 'on':
                chk = enable_xray(event)
                if chk['Enable'] == True:
                    patch_all() 
                    print(event)
        
            rule = event["params"]["querystring"]["rule_id"]
            
            if "rule_name" in event["params"]["querystring"]:
                record["rule_name"] = event["params"]["querystring"]["rule_name"]
            
            data = []
            
            if "rule_id" in event["params"]["querystring"]:
                
                sqlQuery = "UPDATE rule_snro set rule_name = %s WHERE rule_id = %s"
                values = ( record["rule_name"], rule)
                mycursor.execute(sqlQuery, values)
                
                for row in event["body-json"]["criteria"]:
                    
                    if str(row['type']) == "number":
                        value1 = '0' * (11 - len(str(row['value1']))) + str(row['value1'])
                        value2 = '0' * (11 - len(str(row['value2']))) + str(row['value2'])
                    else:
                        value1 = row['value1']
                        value2 = row['value2']
                        
                    cri = {
                        "rule_id": rule,
                        "decider": row["decider"],
                        "operator": row["operator"],
                        "d_value": value1,
                        "d_value2": value2,
                        "approval_type": record["approval_type"],
                        "ec_isgroup": record["ec_isgroup"],
                        "escelator": record["escelator"],
                        "ifnot_withindays": record["ifnot_withindays"],
                        "comments": record["comments"],
                        "due_notification" : record["due_notification"],
                        "due_reminder" : record["due_reminder"],
                        "overdue_notification" : record["overdue_notification"],
                        "overdue_reminder" : record["overdue_reminder"],
                        "decider_type": row["type"]
                    }
                    data.append(cri)
                
                sqlQuery = "insert into rule (rule_id, decider, operator, d_value, d_value2, approval_type, ec_isgroup, escelator, ifnot_withindays, comments, " \
                    "decider_type, due_notification, due_reminder, overdue_notification, overdue_reminder ) values (%s, %s, %s, %s, %s, %s, %s, " \
                    "%s, %s, %s, %s, %s, %s, %s, %s)"
                   
                default = None
                
                if data:
                    
                    values = []
                    for row in data:
                        
                        if row["decider"] == 'default_assignment': 
                            value = ('default_assignment',)
                            mycursor.execute("select * from rule where decider = %s", value)
                            default = mycursor.fetchone()
                            
                            if default:
                                if int(default["rule_id"]) != int(row["rule_id"]): 
                                    return {   
                                        'statuscode': 500,
                                        'body': json.dumps('Default Rule already exist!')
                                    }
                            
                            
                        tup = (row["rule_id"], row["decider"], row["operator"], row["d_value"], row["d_value2"], row["approval_type"], row["ec_isgroup"],
                            row["escelator"], row["ifnot_withindays"], row["comments"], row["decider_type"], row["due_notification"], row["due_reminder"], 
                            row["overdue_notification"], row["overdue_reminder"])
                        values.append(tup)
                    
                if values:
                    mycursor.execute("delete from rule where rule_id = %s", rule)
                    mycursor.executemany(sqlQuery, values)
                
                if "approvers" in event["body-json"]:
                    for approver in event["body-json"]["approvers"]:
                        app = {
                            'level' : approver['level'],
                            'isgroup' : approver['isgroup'],
                            'approver' : approver['approver']
                        }
                        approvers.append(app)
                        
                        if "members" in approver:
                            for members in approver["members"]:
                                mem = {
                                    'level' : approver["level"],
                                    'isgroup': 'n',
                                    'approver' : members
                                }
                                approvers.append(mem)
                
                sqlQuery = "delete from rule_approver where rule_key = %s"
                mycursor.execute(sqlQuery, rule)
                
                values = []
                
                for index, each in enumerate(approvers):
                    tup = (rule, each['isgroup'], each['approver'], each['level'])
                    values.append(tup)
                
                sqlQuery = "INSERT INTO rule_approver (rule_key, isgroup, approver, level) VALUES ( %s, %s, %s, %s)"
                
                if values:
                    mycursor.executemany(sqlQuery, values)
                
                mydb.commit()
                msg = "Successfully Updated!"
    
    except pymysql.err.IntegrityError as e:
        mydb.rollback()
        return {
            'statuscode': 500,
            'body': json.dumps("Duplicate Rule")
        }
    
    except:
        return {
            'statuscode': 500,
            'body': msg
        }
                
    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': msg
    }

def deleteRuleDetails(event, context):
    global dbScehma 
    dbScehma = event["stage-variables"]["schema"]
    
    client = boto3.client(
    'secretsmanager',
    region_name='eu-central-1',
    aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    aws_secret_access_key='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' )

    secret = event["stage-variables"]["secreat"]

    resp = client.get_secret_value(
        SecretId= secret
    )  

    secretDict = json.loads(resp['SecretString'])

    mydb = pymysql.connect(
        host=secretDict['host'],
        user=secretDict['username'],
        passwd=secretDict['password'],
        database=secretDict['dbname'],
        charset='utf8mb4',
        cursorclass=pymysql.cursors.DictCursor
    )
    
    msg = "Data not deleted!"
    
    try:
                
        with mydb.cursor() as mycursor:
            defSchemaQuery = "use " + dbScehma
            mycursor.execute(defSchemaQuery)

            if "rule_id" in event["params"]["querystring"]:
                
                sqlQuery = ("DELETE FROM rule WHERE rule_id = %s")
                values = ( event["params"]["querystring"]["rule_id"] )
                mycursor.execute(sqlQuery, values)
                
                sqlQuery = ("DELETE FROM rule_approver WHERE rule_key = %s")
                values = ( event["params"]["querystring"]["rule_id"] )
                mycursor.execute(sqlQuery, values)
                
                sqlQuery = ("DELETE FROM rule_snro WHERE rule_id = %s")
                values = ( event["params"]["querystring"]["rule_id"] )
                mycursor.execute(sqlQuery, values)
                
                mydb.commit()
                msg = "Data deleted!"
            
    except:
        return {
            'statuscode': 500,
            'body': json.dumps("Unable to delete")
        }

    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': msg,
    }

def EnableXrayLambda(tracing):
    
    client = boto3.client('lambda', aws_access_key_id='AKIAXUCMAX6S27NZCRFL',aws_secret_access_key='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',region_name='eu-central-1')
    response = client.list_functions()
    NextMarker = response['NextMarker']
    nof = len(response['Functions'])
    fun = []

    if len(response['Functions']) != 0:
        count = len(response['Functions'])
        count1 = 0
        while(count != count1):
            fun.append(response['Functions'][count1]['FunctionName'])
            count1 = count1 + 1

    while(NextMarker != '' ):
        response = client.list_functions(Marker = NextMarker)
        if 'Functions' in response :
            temp = len(response['Functions'])
            nof = nof + temp
        if len(response['Functions']) != 0:
            count = len(response['Functions'])
            count1 = 0
            while(count != count1):
                fun.append(response['Functions'][count1]['FunctionName'])
                count1 = count1 + 1
        if 'NextMarker' in response :
            NextMarker = response['NextMarker']
        else:
            NextMarker = ''

    for i in fun:
        response = client.update_function_configuration(
        # FunctionName  = 'getfunctionnames',
        FunctionName  = i,
        TracingConfig = {'Mode':tracing}   #PassThrough #Active
        )
    
def EnableXrayApi(tracing):
    
    devstages = [ 'dev' , 'einvoice-v1' , 'einvoice-dev' ]

    client = boto3.client('apigateway', aws_access_key_id='AKIAXUCMAX6S27NZCRFL',aws_secret_access_key='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',region_name='eu-central-1')
    #code to get all the api in a perticualr region 
    response = client.get_rest_apis()
   # code to get api stage names 

    for api in response['items'] :
        response1 = client.get_stages(
        restApiId=api['id'])

        rapiid = api['id']
        stagename = ''
        for stage in response1['item']:
            if stage['stageName'] in devstages:
                stagename = stage['stageName']
        if stagename != '':
            response = client.update_stage(
                restApiId=rapiid,
                stageName=stagename,
                patchOperations=[
                    {
                        'op': 'replace',
                        'path': '/tracingEnabled',
                        'value': tracing
                    },
                ])
        stagename = ''
        rapiid = ''

def EnableXRayTraces(event, context):

    try:
        print(event)
        check = event['params']['header']['opetion']

        if check == 'on':
            tracing = 'Active'
        else:
            tracing = 'PassThrough'
        
        if tracing != '':
            EnableXrayLambda(tracing)

        if check == 'on':
            tracing = 'True'
        else:
            tracing = 'False'
        
        if tracing != '':
            EnableXrayApi(tracing)

    except:
        return {
            'statuscode': 500,
            'body': json.dumps("Internal Failure!")
        }


    return {
        'statusCode': 200,
        'body': json.dumps('Xray Enabled successfully')
    }

def decode_jwt_token(Authorization):
    header1 =  jwt.decode(Authorization , options={"verify_signature": False})
    if 'email' in header1:
        return header1['email']
    else:
        return ''

def GetUserEmails(event, context):
    
    atoken = ''
    op = ''
    enable = ''
    if 'Authorization' in event['params']['header']:
        atoken = event['params']['header']['Authorization']
    global dbScehma 
    dbScehma = event["stage-variables"]["schema"]
    
    client = boto3.client(
    'secretsmanager',
    region_name='eu-central-1',
    aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    aws_secret_access_key='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' )
    secret = event["stage-variables"]["secreat"]
    resp = client.get_secret_value(
        SecretId= secret
    )
    secretDict = json.loads(resp['SecretString'])

    mydb = pymysql.connect(
        host=secretDict['host'],
        user=secretDict['username'],
        passwd=secretDict['password'],
        database=secretDict['dbname'],
        charset='utf8mb4',
        cursorclass=pymysql.cursors.DictCursor
    )
    
    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "use " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            print(event)
            
            Flag = mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
            if Flag == 1:
                mycursor.execute("SELECT userid from email where flag = 'True' ")
                all_emails = mycursor.fetchall()
                if atoken != '':
                    op = decode_jwt_token(atoken)
                    if op == '':
                        all_emails = {}
                        enable = False
                    for ch in all_emails:
                        if op == ch['userid'] :
                            enable = True
                            break
                        else :
                           enable = False 
                else:
                    enable = False
                    all_emails = {} 
            else:
                enable = False
                all_emails = {}
        
    except:
        return {
            'statuscode': 500,
            'body': json.dumps("Internal Failure")   
        }  
        
    finally:
        mydb.close()
         
    
    return {
        'statusCode': 200,
        # 'body': {'Enable' : enable}
        'body': {'Enable' : enable , 'email' : op}
    }

def deleteAttachment(event, context):
    
    global dbScehma 
    
    client = boto3.client(
    'secretsmanager',
    region_name='eu-central-1',
    aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    aws_secret_access_key='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' )
    secret = event["stage-variables"]["secreat"]
    resp = client.get_secret_value(
        SecretId= secret
    )
    secretDict = json.loads(resp['SecretString'])

    mydb = pymysql.connect(
        host=secretDict['host'],
        user=secretDict['username'],
        passwd=secretDict['password'],
        database=secretDict['dbname'],
        charset='utf8mb4',
        cursorclass=pymysql.cursors.DictCursor
    )

    try:
        with mydb.cursor() as mycursor:
            dbScehma = event["stage-variables"]["schema"]
            
            defSchemaQuery = "use " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
            on = mycursor.fetchone()
            if on['value1'] == 'on':
                chk = enable_xray(event)
                if chk['Enable'] == True:
                    patch_all() 
                    print(event)
            
            attachment = event["params"]["querystring"]['attachment_id']
            email = event["params"]["querystring"]["userid"]
            
            mycursor.execute("select member_id, concat(fs_name, ' ', ls_name) as member_name from einvoice_db_portal.member where email = %s", email)
            member = mycursor.fetchone()
            
            values = (attachment,)
            mycursor.execute('SELECT * FROM einvoice_db_portal.file_storage where attach_id = %s', values)
            attachment_det = mycursor.fetchone()
            
            mycursor.execute("select in_status from einvoice_db_portal.invoice_header where invoice_no = %s", attachment_det["file_id"])
            invoice_header = mycursor.fetchone()
            
            mycursor.execute('DELETE FROM einvoice_db_portal.file_storage WHERE attach_id = %s', values)
            
            msg_cmnt = attachment_det["name"] + " attachment deleted by " + member["member_name"]
            temp = (attachment_det["file_id"], invoice_header["in_status"], invoice_header["in_status"], member['member_id'], msg_cmnt)
            sqlQuery = "insert into einvoice_db_portal.invoice_audit (invoice_no, prev_status, new_status, working_person, msg) values (%s, %s, %s, %s, %s)"
            mycursor.execute(sqlQuery, temp)
            
            if attachment_det:
                
                s3 = boto3.client("s3")
                s3.delete_object(Bucket=attachment_det['file_path'], Key=attachment_det['name'])
                
                mydb.commit()
                
                return {
                    'statuscode': 200,
                    'body': json.dumps("Deleted Successfully!")
                }
                
            return {
                    'statuscode': 200,
                    'body': json.dumps("Attachment not Found")
                }
    except:
        return {
            'statuscode': 500,
            'body': json.dumps("Internal Error!")
        }
    
    finally:
        mydb.close()

def downloadAttachments(event, context):

    print(event)
    global dbScehma 
    dbScehma = event["stageVariables"]["schema"]
    
    client = boto3.client(
    'secretsmanager',
    region_name='eu-central-1',
    aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    aws_secret_access_key='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' )
            
    secret = event["stageVariables"]["secreat"]
    bucket = event["stageVariables"]["non_ocr_attachment"]
    stage = event["stageVariables"]["lambda_alias"]
            
    resp = client.get_secret_value(
        SecretId= secret
    )
        
    secretDict = json.loads(resp['SecretString'])
    
    mydb = pymysql.connect(
        host=secretDict['host'],
        user=secretDict['username'],
        passwd=secretDict['password'],
        database=secretDict['dbname'],
        charset='utf8mb4',
        cursorclass=pymysql.cursors.DictCursor
    )
    
    try:
        print(event)
        content_type = ""  
    
        s3 = boto3.client("s3")
        
        file_name = event["queryStringParameters"]["file_name"]
        
        if('email' in event['queryStringParameters']):  #changed
            email = event['queryStringParameters']['email']
            if(email == 'abhishek.p@peolsolutions.com' or email == 'pramod.b@peolsolutions.com'):
                file_name = 'old-dev/heda-plywood.png'
            else:
                file_name = event["queryStringParameters"]["file_name"]
                # file_name = 'old-dev/Archidply-logo.png' #changed
        
        bucket_used = event["stageVariables"]["non_ocr_attachment"]
        print(file_name, bucket_used)
        
        if "userid" in event["queryStringParameters"]:
            userid = event["queryStringParameters"]["userid"]
            invoice_no = event["queryStringParameters"]["invoice_no"]
            
            with mydb.cursor() as mycursor:
                defSchemaQuery = "use " + dbScehma
                print("dnaksjhdksjdhaskd")
                mycursor.execute(defSchemaQuery)
                
                mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
                on = mycursor.fetchone()
                if on['value1'] == 'on':
                    chk = enable_xray(event)
                    if chk['Enable'] == True:
                        patch_all() 
                        print(event)
                
                mycursor.execute("select concat(fs_name, ' ', ls_name) as member_name, member_id from member where email = %s", userid)
                member = mycursor.fetchone()
                
                msg_cmnt = file_name + " attachment downloaded by " + member["member_name"]
                temp = (invoice_no, "", "", member['member_id'], msg_cmnt)
                sqlQuery = "insert into invoice_audit (invoice_no, prev_status, new_status, working_person, msg) values (%s, %s, %s, %s, %s)"
                mycursor.execute(sqlQuery, temp)
                
                mydb.commit()
        
        
        download = False
        
        if "download" in event["queryStringParameters"]:
            download = True
        
        if "bucket" in event["queryStringParameters"]:
            bucket_name = event["queryStringParameters"]["bucket"]
            
        else:
            bucket_name = bucket_used
        
        
        file_obj = s3.get_object(Bucket=bucket_name, Key=file_name)
        file_content = file_obj["Body"].read()
        
        
        filenamett, file_extension = os.path.splitext(file_name) 
        
        
        if file_extension == ".pdf": 
            content_type = "application/pdf"
        elif file_extension == ".png":
            content_type == "image/png"
        elif file_extension == ".jpg":
            content_type == "image/jpg"
        elif file_extension == ".jpeg":
            content_type == "image/jpg"
            
        conte = ""
        
        if download:
            conte = ''' attachment; filename=''' + file_name
            
        return {
              'headers': { "Content-Type": content_type, 'Content-Disposition' : conte,  'Access-Control-Allow-Origin': '*', 'filename': "jhghjd.pdf" }, 
              'statusCode': 200,
              'body': base64.b64encode(file_content),
              'isBase64Encoded': True
            }
        
    except Exception as e:
        return {
          'headers': { "Content-Type": content_type, 'Access-Control-Allow-Origin': '*' }, 
        #   'body' : json.dumps("No file Found"),
            'body' : json.dumps(str(e)),
            'statusCode': 500
        }
    
   #.........................................................................................................

#event not found
def getAccuracyFieldsList(event, context):  

    
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='eu-central-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )

    # secret = event["stage-variables"]["secreat"]
    # resp = client.get_secret_value(
    #     SecretId= secret
    # ) 
    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()
    records = {}
    
    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
            on = mycursor.fetchone()
            if on['value1'] == 'on':
                chk = enable_xray(event)
                if chk['Enable'] == True:
                    patch_all() 
                    print(event)
            
            mycursor.execute("select value1, value2 from elipo_setting where key_name = 'ocr_accuracy' or key_name = 'ocr_accuracy_item'")
            accuracyFields = mycursor.fetchall()
            
            if accuracyFields:
                for each in accuracyFields:
                    records[each['value1']] = each['value2']
            
    except:
        return {
            'statuscode': 500,
            'body': json.dumps("Internal Error")
        }
            
    finally:
        mydb.close()
        
    return {
        'statuscode': 200,
        'body': records
    }
    
    if 'Authorization' in event['params']['header'] :
       atoken =  event['params']['header']['Authorization']
    
    if atoken != '':
        flg = requests.get("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/getemail", headers={"Content-Type":"application/json", "Authorization":atoken})

    return json.loads(flg.text)['body']

#event not found
def patchAccuracyFieldsList(event, context):
    global dbScehma 
    dbScehma = ' DBADMIN '

    # client = boto3.client(
    # 'secretsmanager',
    # region_name='eu-central-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )

    # secret = event["stage-variables"]["secreat"]
    # resp = client.get_secret_value(
    #     SecretId= secret
    # )
    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()
    
    setting = {
        "amount": "",
        "currency": "",
        "document_type": "",
        "gstin": "",
        "invoice_date": "",
        "irn": "",
        "amt_per_unit": "",
        "gross_amount": "",
        "material_desc": "",
        "quantity": "",
        "unit": "",
        "ref_po_num": "",
        "supplier_name": "",
        "tax_per": "",
        "user_invoice_id": ""
    }

    try:
        for value in event["body-json"]["setting"]:
            if value in setting:
                setting[value] = event["body-json"]["setting"][value]
                
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
            on = mycursor.fetchone()
            if on['value1'] == 'on':
                chk = enable_xray(event)
                if chk['Enable'] == True:
                    patch_all() 
                    print(event)
            
            sqlQuery = "UPDATE elipo_setting SET value2 = ? WHERE (key_name = 'ocr_accuracy' or key_name = 'ocr_accuracy_item') and value1 = ?"
            for key, value in setting.items():
                values = (value, key )
                
                mycursor.execute(sqlQuery, values)
            
        mydb.commit() 
    
    except:
        return {
            'statuscode': 500,
            'body': json.dumps("Internal Error!")
        }
    
    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': json.dumps("Update Successful!")
    }
    if 'Authorization' in event['params']['header'] :
       atoken =  event['params']['header']['Authorization']
    
    if atoken != '':
        flg = requests.get("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/getemail", headers={"Content-Type":"application/json", "Authorization":atoken})

    return json.loads(flg.text)['body']
# event = 
# print(patchAccuracyFieldsList(event, ' '))

#event not found
def deleteCommentTemplates(event, context):
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='eu-central-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )
    # secret = event["stage-variables"]["secreat"]
    # resp = client.get_secret_value(
    #     SecretId= secret
    # )
    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()
    
    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
            on = mycursor.fetchone()
            if on['value1'] == 'on':
                chk = enable_xray(event)
                if chk['Enable'] == True:
                    patch_all() 	
            
            if "sr_no" in event["params"]["querystring"]:
                sqlQuery = "delete from comment_templates where sr_no = ?" 
                values = ( event["params"]["querystring"]["sr_no"], )
                mycursor.execute(sqlQuery, values)

            mydb.commit()
            
    except:
        mydb.rollback()
        return {
            'statuscode': 500,
            'body': json.dumps("Internal Failure!")
        }
            
    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': json.dumps("Deleted Successfully") 
    }
    if 'Authorization' in event['params']['header'] :
       atoken =  event['params']['header']['Authorization']
    
    if atoken != '':
        flg = requests.get("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/getemail", headers={"Content-Type":"application/json", "Authorization":atoken})

    return json.loads(flg.text)['body']

def getCommentTemplates(event, context):

    global dbScehma 
    dbScehma = event["stage-variables"]["schema"]
    
    client = boto3.client(
    'secretsmanager',
    region_name='eu-central-1',
    aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    aws_secret_access_key='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' )
    secret = event["stage-variables"]["secreat"]
    resp = client.get_secret_value(
        SecretId= secret
    )
    secretDict = json.loads(resp['SecretString'])

    mydb = pymysql.connect(
        host=secretDict['host'],
        user=secretDict['username'],
        passwd=secretDict['password'],
        database=secretDict['dbname'],
        charset='utf8mb4',
        cursorclass=pymysql.cursors.DictCursor
    )
    
    records = []
    
    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "use " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            # print(event)
            
            mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
            on = mycursor.fetchone()
            if on['value1'] == 'on':
                chk = enable_xray(event)
                if chk['Enable'] == True:
                    patch_all() 
                    print(event)
            
            if "sr_no" not in event["params"]["querystring"]:
                mycursor.execute("select * from comment_templates")
                comments = mycursor.fetchall()
                
                for row in comments:
                    temp = {
                        "sr_no": row["sr_no"],
                        "comment_title": row["comment_title"],
                        "comment_description": row["comment_description"]
                    }
                    records.append(temp)
                    
            elif "sr_no" in event["params"]["querystring"]:
                sr_no = event["params"]["querystring"]["sr_no"]
                mycursor.execute("select * from comment_templates where sr_no = %s", sr_no)
                comments = mycursor.fetchone()
                
                temp = {
                    "sr_no": comments["sr_no"],
                    "comment_title": comments["comment_title"],
                    "comment_description": comments["comment_description"]
                }
                records.append(temp)
                    
    # except:
    #     mydb.rollback()
    #     return {
    #         'statuscode': 500,
    #         'body': json.dumps("Internal Failure!")
    #     }
            
    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': records
    }

    if 'Authorization' in event['params']['header'] :
       atoken =  event['params']['header']['Authorization']
    
    if atoken != '':
        flg = requests.get("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/getemail", headers={"Content-Type":"application/json", "Authorization":atoken})

    return json.loads(flg.text)['body']

def postCommentTemplates(event, context): 

    global dbScehma 
    dbScehma = event["stage-variables"]["schema"]

    
    client = boto3.client(
    'secretsmanager',
    region_name='eu-central-1',
    aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    aws_secret_access_key='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' )
    secret = event["stage-variables"]["secreat"]
    resp = client.get_secret_value(
        SecretId= secret
    )
    secretDict = json.loads(resp['SecretString'])

    mydb = pymysql.connect(
        host=secretDict['host'],
        user=secretDict['username'],
        passwd=secretDict['password'],
        database=secretDict['dbname'],
        charset='utf8mb4',
        cursorclass=pymysql.cursors.DictCursor
    )

    record = {
        "comment_title" : "",
        "comment_description" : ""
    }
    
    try:
        
        for value in event["body-json"]:
            if value in record:
                record[value] = event["body-json"][value]
        
        with mydb.cursor() as mycursor:
            defSchemaQuery = "use " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            on = mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
            if on == 1:
                chk = enable_xray(event)
                if chk['Enable'] == True:
                    patch_all()

            
            if "sr_no" not in event["params"]["querystring"]:
                sqlQuery = "INSERT INTO comment_templates (comment_title, comment_description) VALUES (%s, %s)"
                values = ( record["comment_title"], record["comment_description"] )
                mycursor.execute(sqlQuery, values)
                msg = "Inserted Successfully!"
                
            elif "sr_no" in event["params"]["querystring"]:
                sqlQuery = "update comment_templates set comment_title = %s, comment_description = %s where sr_no = %s" 
                values = ( record["comment_title"], record["comment_description"], event["params"]["querystring"]["sr_no"] )
                mycursor.execute(sqlQuery, values)
                msg = "Updated Successfully!"

            mydb.commit()
            
    except:
        mydb.rollback()
        return {
            'statuscode': 500,
            'body': json.dumps("Internal Failure!")
        }
            
    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': json.dumps(msg)
    }


    if 'Authorization' in event['params']['header'] :
       atoken =  event['params']['header']['Authorization']
    
    if atoken != '':
        flg = requests.get("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/getemail", headers={"Content-Type":"application/json", "Authorization":atoken})

    return json.loads(flg.text)['body']

def postInvoiceAssignment(event, context):
    global dbScehma 
    dbScehma = ' DBADMIN '
    


    mydb = hdbcliConnect()

    record = {
        "isgroup": "",
        "app": "",
        "invoice_no": ""
    }

    try:
        for value in event["body-json"]:
            if value in record:
                record[value] = event["body-json"][value]
                
        with mydb.cursor() as mycursor:
            defSchemaQuery = "use " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
            on = mycursor.fetchone()
            if on['value1'] == 'on':
                chk = enable_xray(event)
                if chk['Enable'] == True:
                    patch_all() 
                    print(event)
            
            if "userid" in event["params"]["querystring"]:
                userid = event["params"]["querystring"]["userid"]
                mycursor.execute("select member_id, concat(fs_name, ' ', ls_name) as member_name from member where email = ?", userid)
                working_person = mycursor.fetchone()
                
            if record["isgroup"] == 'y':
                mycursor.execute("select name from group where group_id = ?", record["app"])
                assign = mycursor.fetchone()
                msg_cmnt = "Invoice No. " + str(record["invoice_no"]) + " assigned to " + assign["name"] + " Group by " + working_person["member_name"] 
            
            else:
                mycursor.execute("select concat(fs_name, ' ', ls_name) as name from member where member_id = ?", record["app"])
                assign = mycursor.fetchone()
                msg_cmnt = "Invoice No. " + str(record["invoice_no"]) + " assigned to " + assign["name"] + " by " + working_person["member_name"]
            
            mycursor.execute("select in_status from invoice_header where invoice_no = ?", record["invoice_no"])
            invoice = mycursor.fetchone()
            
            sqlQuery = "insert into assignment (isgroup, app, invoice_no) values (?, ?, ?)"
            values = ( record["isgroup"], record["app"], record["invoice_no"] )
            mycursor.execute(sqlQuery, values)
            
            sqlQuery = "insert into invoice_audit (invoice_no, prev_status, new_status, working_person, msg) values (?, ?, ?, ?, ?)"
            values = (record["invoice_no"], invoice["in_status"], invoice["in_status"], working_person['member_id'], msg_cmnt)
            mycursor.execute(sqlQuery, values)
             
            mydb.commit()
            
    except pymysql.err.IntegrityError as e:    
        mydb.rollback()
        return {
            'statuscode': 500,
            'body': json.dumps("Invoice was Already Assigned to Group/User")
        }

    except:
        mydb.rollback()
        return {
            'statuscode': 500,
            'body': json.dumps("Internal Failure!")
        }

    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': json.dumps("Invoice Assigned!")
    }


# def get_stored_credentials(user_id):
#     try:
#         s3 = boto3.client("s3")

#         creds = None
#         encoded_file = s3.get_object(Bucket=bucket_name, Key=user_id)
#         creds = pickle.loads(encoded_file["Body"].read())
#         return creds
#     except Exception as excep:
#         creds = None


# def get_credentials(user_id=None):
#     try:
#         if user_id:
#             credentials = get_stored_credentials(user_id)
#             if credentials and credentials.refresh_token is not None:
#                 return credentials
#             else:
#                 False

#     except Exception as error:
#         print(str(error))


# def build_service(credentials):
#     http = httplib2.Http()
#     http = credentials.authorize(http)
#     return build('gmail', 'v1', http=http)


# def create_message(sender, to, cc, subject, message_text, threadid, reference, lastmsgid):
#     # Create a message for an email.

#     message = email.mime.text.MIMEText(message_text, 'html')

#     message['References'] = reference
#     message['In-Reply-To'] = lastmsgid
#     message['subject'] = 'Re: ' + subject
#     message['cc'] = cc
#     message['from'] = sender
#     message['to'] = to

#     # message['Message-ID'] = '<CAFzz-e4Dt5z2rgec9CvZRz+ez7G4FXnoTPV8xgzcmt2aminW5w@mail.gmail.com>'
#     encoded = base64.urlsafe_b64encode(message.as_string().encode("utf-8"))
#     # return {'raw': encoded.decode("utf-8")}
#     raw = encoded.decode("utf-8")

#     message = {'message': {'raw': raw, 'threadId': threadid}}
#     # draft = service.users().drafts().create(userId="me", body=message).execute()
#     # return {'message': {'raw': encoded, 'threadId': threadid}}.decode("utf-8")

#     return message



# def send_message(service, user_id, message):
#     try:
#         message = (service.users().messages().send(userId=user_id, body=message).execute())
#         # print("Message Id: ", message['id'])
#         # pprint.pprint(message)
#         return message
#     # except errors.HttpError as error:
#     except Exception as error:
#         print("An error occurred: ", error)


# # def postReplyToEnquiry(event, context):
#     # print(event)
#     global dbScehma 
#     dbScehma = event["stage-variables"]["schema"]

#     client = boto3.client(
#     'secretsmanager',
#     region_name='eu-central-1',
#     aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
#     aws_secret_access_key='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' )

#     # secret = event["stage-variables"]["secreat"]
#     secret = 'test/einvoice/secret'

#     global bucket_name
#     # bucket_name = event["stage-variables"]["bucket_gmail_credential"]
#     bucket_name = 'file-bucket-emp'

#     resp = client.get_secret_value(
#         SecretId=secret
#     )

#     secretDict = json.loads(resp['SecretString'])

#     mydb = pymysql.connect(
#         host=secretDict['host'],
#         user=secretDict['username'],
#         passwd=secretDict['password'],
#         database=secretDict['dbname'],
#         charset='utf8mb4',
#         cursorclass=pymysql.cursors.DictCursor
#     )


#     try:
#         with mydb.cursor() as mycursor:
#             defSchemaQuery = "use " + dbScehma
#             mycursor.execute(defSchemaQuery)
            
#             mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
#             on = mycursor.fetchone()
#             if on['value1'] == 'on':
#                 chk = enable_xray(event)
#                 if chk['Enable'] == True:
#                     patch_all() 	

#             enquirieno = event["params"]["querystring"]['enquirieno']
#             reply_body = event["body-json"]['reply']

#             user = 'mosbyted116@gmail.com'

#             # enquirieno = '176a9bde77a0e5c1'
#             # reply_body = "yhbzcjhbhj zbxz jkxjbk"

#             values = (enquirieno,)
#             mycursor.execute('select * from enquirie_header where enquirieno = %s', values)
#             thread_det = mycursor.fetchone()

#             if thread_det:
#                 cred = get_credentials(user_id=user)

#                 if cred:
#                     service = build_service(credentials=cred)

#                     if service:
#                         history = service.users().threads().get(userId='me', id=thread_det['thread_id']).execute()
#                         last_msg = len(history['messages'])

#                         last_msg = history['messages'][last_msg-1]

#                         reference = None
#                         lastmsgid = ''
#                         subject = ''
#                         cc = ''

#                         for head in last_msg['payload']['headers']:
#                             if head['name'] == 'References':
#                                 reference = head['value']
#                             elif head['name'] == 'Message-ID':
#                                 lastmsgid = head['value']
#                             elif head['name'] == 'Subject':
#                                 subject = head['value']
#                             elif head['name'] == 'Cc':
#                                 cc = head['value']


#                         if not reference:
#                             reference = lastmsgid
#                         else:
#                             reference += ' ' + lastmsgid
                            
                            
#                         message = create_message(sender=user, to='rohit.wavhal@peolsolutions.com', cc=cc,
#                                                  subject=thread_det['description'], message_text=reply_body,
#                                                  threadid=thread_det['thread_id'],
#                                                  reference=reference, lastmsgid=lastmsgid)

#                         draft = service.users().drafts().create(userId="me", body=message).execute()

#                         message = service.users().drafts().send(userId='me', body={'id': draft['id']}).execute()
                        
#                         if 'id' in message:
#                             values = (thread_det['enquirieno'], message['id'], 'me', reply_body, 'elipo')

#                             mycursor.execute('INSERT INTO enquirie_responce'
#                                              '(enquirieno, mail_id, bywho, enquirie_responce, sup_mail)'
#                                              ' VALUES(%s,%s,%s,%s,%s) ', values)

#                             values = (thread_det['enquirieno'], )

#                             mycursor.execute('update enquirie_header set last_responce = '
#                                              ' (CURRENT_TIMESTAMP) where enquirieno = %s', values)
#                         # send_message(service=service, user_id="me", message=message)

#         mydb.commit()

#     except Exception as ex:
#         print(str(ex))
        
#         return {
#             'statuscode': 200,
#             'body': json.dumps('Internal Fail!')
#         }

#     finally:
#         mydb.close()
        
#     return {
#         'statuscode': 200,
#         'body': json.dumps('Replyed Successfully!')
#     }

#     if 'Authorization' in event['params']['header'] :
#        atoken =  event['params']['header']['Authorization']
    
#     if atoken != '':
#         flg = requests.get("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/getemail", headers={"Content-Type":"application/json", "Authorization":atoken})

#     return json.loads(flg.text)['body']
    
# def getSettingParameter(event, context):
#     trace_off = ''
    
#     global dbScehma 
#     dbScehma = event["stage-variables"]["schema"]
    
#     client = boto3.client(
#     'secretsmanager',
#     region_name='eu-central-1',
#     aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
#     aws_secret_access_key='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' )
#     secret = event["stage-variables"]["secreat"]
#     resp = client.get_secret_value(
#         SecretId= secret
#     )
#     secretDict = json.loads(resp['SecretString'])

#     mydb = pymysql.connect(
#         host=secretDict['host'],
#         user=secretDict['username'],
#         passwd=secretDict['password'],
#         database=secretDict['dbname'],
#         charset='utf8mb4',
#         cursorclass=pymysql.cursors.DictCursor
#     )

#     records = []

#     try:
#         print(event)
#         with mydb.cursor() as mycursor:
#             defSchemaQuery = "use " + dbScehma
#             mycursor.execute(defSchemaQuery)
            
#             mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
#             on = mycursor.fetchone()
#             if on['value1'] == 'on':
#                 chk = enable_xray(event)
#                 if chk['Enable'] == True:
#                     patch_all() 
#                     print(event)
            
#             # atoken = ''
#             # if 'Authorization' in event['params']['header'] :
# 	           # atoken =  event['params']['header']['Authorization']
# 	           # print(atoken)
#             # mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ") 
#             # flg = mycursor.fetchone()
#             # if flg['value1'] == 'on':
#             #     trace_off = 'off'
#             #     a = requests.post("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/enablexraytracesindividually", headers={"Content-Type":"application/json", "lambda":context.function_name , "api":event['context']['api-id'] ,"Authorization":atoken}) 
#             #     if json.loads(a.text)['body'] == 'on':
#             #         patch_all()
#             #         print(event)  
            
#             # on = mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
#             # if on == 1:
#             #     chk = enable_xray(event)
#             #     if chk['Enable'] == True:
#             #         patch_all()
            
#             mycursor.execute("select value2 from dropdown where drop_key = 'my-company-details' and value1 = 'gstin' ")
#             row2 = mycursor.fetchone()

#             if "key_name" in event["params"]["querystring"]:
                
#                 key_name = event["params"]["querystring"]["key_name"]
                
#                 if key_name == "my_gstin":
#                     mycursor.execute("select value2 from dropdown where drop_key = 'my-company-details' and value1 = 'gstin' ")
#                     row2 = mycursor.fetchone()
#                     records = {'drop_key':"my_gstin", "value1": row2['value2'] , "value2":""}
                    
#                 else:
#                     mycursor.execute("SELECT * FROM elipo_setting where key_name = %s", key_name)
#                     records = mycursor.fetchone()
                    
#                     if(records):   #changed
#                             if 'Authorization' in event['params']['header'] :
#                                 atoken =  event['params']['header']['Authorization']
#                                 flg = requests.get("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/getemail", headers={"Content-Type":"application/json", "Authorization":atoken})
#                                 flg = json.loads(flg.text)['body']
#                                 flg = flg['email']
#                                 if(records['value1']):
#                                     records['value1'] = records['value1'] + '&email='+flg #changed
#                                     # print(records['value1'])
                    
                
#             else:
#                 mycursor.execute("SELECT * FROM elipo_setting")
#                 records = mycursor.fetchall()
                
#                 mycursor.execute("select value2 from dropdown where drop_key = 'my-company-details' and value1 = 'gstin' ")
#                 row2 = mycursor.fetchone()
                
#                 records.append({'key_name':"my_gstin", "value1": row2['value2'], "value2":""})
        
#     except:
#         return {
#             'statuscode': 500,
#             'body': json.dumps("Internal Error!")
#         }
    
#     finally:
#         mydb.close()
#         # xray_recorder.begin_subsegment(name="Test")
#         # # patch_all()
#         # if trace_off == 'off':
#         #     a = requests.post("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/enablexraytracesindividually", headers={"Content-Type":"application/json", "lambda":context.function_name , "api":event['context']['api-id'] ,"Authorization":atoken , "switch":'off'})
#         # xray_recorder.end_subsegment()

#     return {
#         'statuscode': 200,
#         'body': records
#     }

#     if 'Authorization' in event['params']['header'] :
#        atoken =  event['params']['header']['Authorization']
    
#     if atoken != '':
#         flg = requests.get("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/getemail", headers={"Content-Type":"application/json", "Authorization":atoken})

#     return json.loads(flg.text)['body']

def getDetailedSupplierEnquiry(event, context): 

    global dbScehma 
    dbScehma = event["stage-variables"]["schema"]
    
    client = boto3.client(
    'secretsmanager',
    region_name='eu-central-1',
    aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    aws_secret_access_key='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' )
    secret = event["stage-variables"]["secreat"]
    resp = client.get_secret_value(
        SecretId= secret
    )
    secretDict = json.loads(resp['SecretString'])

    mydb = pymysql.connect(
        host=secretDict['host'],
        user=secretDict['username'],
        passwd=secretDict['password'],
        database=secretDict['dbname'],
        charset='utf8mb4',
        cursorclass=pymysql.cursors.DictCursor
    )
    
    records = {}

    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "use " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
            on = mycursor.fetchone()
            if on['value1'] == 'on':
                chk = enable_xray(event)
                if chk['Enable'] == True:
                    patch_all() 
                    print(event)
            
            userid = event["params"]["querystring"]["userid"]
            enquiry_no = event["params"]["querystring"]["enquiry_no"]
            details = {}
            history = []
            
            mycursor.execute("select * from member where email = %s", userid)
            user = mycursor.fetchone()
                
            sqlQuery = "select eh.enquirieno, eh.description, eh.en_status, date(eh.entrydate) as entrydate, er.enquirie_responce " \
            	"from enquirie_header eh " \
                "inner join enquirie_responce er " \
                "on eh.enquirieno = er.enquirieno " \
                "where eh.enquirieno = %s and er.bywho = 'supplier' " \
                "order by eh.entrydate desc " \
                "limit 1"
                
            values = (enquiry_no, )
            mycursor.execute(sqlQuery, values)
            detailEnquiry = mycursor.fetchone()
            
            sqlQuery = "select eh.enquirieno, eh.description, eh.en_status, convert_tz(eh.entrydate, '+00:00','+05:30') as entrytime, " \
                "er.enquirie_responce, er.bywho, er.sup_mail " \
            	"from enquirie_header eh " \
                "inner join enquirie_responce er " \
                "on eh.enquirieno = er.enquirieno " \
                "where eh.enquirieno = %s " \
                "order by eh.entrydate "
            
            values = values = (enquiry_no, )
            mycursor.execute(sqlQuery, values)
            enquiryHistory = mycursor.fetchall()
            
            mycursor.execute("SELECT attach_id, enquiry_no, mail_id, name, mime_type, file_path, file_link, convert_tz(entrydate, '+00:00','+05:30') as entrytime FROM enquiry_attachement where enquiry_no = %s", values)
            attachments = mycursor.fetchall()
            
            if detailEnquiry:
                details = {
                    "enquiry_no": detailEnquiry["enquirieno"],
                    "description": detailEnquiry["description"],
                    "status": detailEnquiry["en_status"],
                    "recieved_date": str(detailEnquiry["entrydate"]),
                    "supplier_enquiry": detailEnquiry["enquirie_responce"]
                }
            
            for row in enquiryHistory:
                temp = {
                    "enquiry_no": row["enquirieno"],
                    "description": row["description"],
                    "status": row["en_status"],
                    "recieved_date": str(row["entrytime"]),
                    "supplier_enquiry": row["enquirie_responce"],
                    "bywho": row["bywho"],
                    "sup_mail": row["sup_mail"]
                }
                history.append(temp)
                
            files = []
            
            if attachments:
                for each in attachments:
                    files.append({
                        'attachment_id': each['attach_id'],
                        'mail_id': each['mail_id'],
                        'name': each['name'],
                        'mime_type': each['mime_type'],
                        'link': each['file_link'],
                        'date': str(each['entrytime'])
                    })
                
            records = {
                "details": details,
                "history": history,
                "attachments": files
            }
            
    # except:
    #     return {
    #     'statuscode': 500,
    #     'body': json.dumps("Internal Failure")   
    # }
            
    finally:
        mydb.close()
        
    return {
        'statuscode': 200,
        'body': records
    }
    if 'Authorization' in event['params']['header'] :
       atoken =  event['params']['header']['Authorization']
    
    if atoken != '':
        flg = requests.get("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/getemail", headers={"Content-Type":"application/json", "Authorization":atoken})

    return json.loads(flg.text)['body']

def getSupplierEnquiry(event, context): 
    global dbScehma 
    dbScehma = event["stage-variables"]["schema"]
    
    client = boto3.client(
    'secretsmanager',
    region_name='eu-central-1',
    aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    aws_secret_access_key='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' )
    secret = event["stage-variables"]["secreat"]
    resp = client.get_secret_value(
        SecretId= secret
    )
    secretDict = json.loads(resp['SecretString'])

    mydb = pymysql.connect(
        host=secretDict['host'],
        user=secretDict['username'],
        passwd=secretDict['password'],
        database=secretDict['dbname'],
        charset='utf8mb4',
        cursorclass=pymysql.cursors.DictCursor
    )
    
    records = []

    try:
        with mydb.cursor() as mycursor: 
            defSchemaQuery = "use " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
            on = mycursor.fetchone()
            if on['value1'] == 'on':
                chk = enable_xray(event)
                if chk['Enable'] == True:
                    patch_all() 	
            
            if "userid" in event["params"]["querystring"]:
                userid = event["params"]["querystring"]["userid"]
                
                mycursor.execute("select * from member where email = %s", userid)
                user = mycursor.fetchall()
                
            val_list = []
            pos = 0
            condn = ""
                
            if "condn" in event["body-json"]:
                
                for row in event["body-json"]["condn"]:
                    if pos != 0:
                        condn = condn + " and "
                        
                    elif pos == 0:
                        condn = " where "
                        pos = pos + 1
        
                    if str(row["operator"]) == "between":
                        val_list.append(row["value"])
                        val_list.append(row["value2"])
                        condn = condn+ "date("  + str(row["field"]) + ") between %s and %s " 
                        
                    else:
                        val_list.append(row["value"])
                        
                        if str(row["field"]) == "entrydate":
                            condn = condn + "date(" + str(row["field"]) + ") " + str(row["operator"]) + " " + "%s"
                            
                        else:
                            condn = condn + str(row["field"]) + " " + str(row["operator"]) + " " + "%s"
                        
            sqlQuery = "select enquirieno, description, en_status, date(entrydate) as entrydate, " \
                "date(last_responce) as last_responce, supplier_no, supplier_name " \
                "from enquirie_header"
            
            if "condn" in event["body-json"]:
                sqlQuery = sqlQuery + condn + " order by enquirieno desc"
                mycursor.execute(sqlQuery, val_list)
                
            else:
                sqlQuery = sqlQuery + " order by enquirieno desc"
                mycursor.execute(sqlQuery)
                
            enquiries = mycursor.fetchall()
            
            if enquiries:
                for row in enquiries:
                    temp = {
                        "enquirie_no": row["enquirieno"],
                        "description": row["description"],
                        "status": row["en_status"],
                        "recieved_date": str(row["entrydate"]),
                        "last_responded": str(row["last_responce"]),
                        "supplier_no": row["supplier_no"],
                        "supplier_name": row["supplier_name"]
                    }
                    records.append(temp)

    except:
        return {
        'statuscode': 500,
        'body': json.dumps("Internal Failure")   
    }
            
    finally:
        mydb.close()
        
    return {
        'statuscode': 200,
        'body': records
    }


    if 'Authorization' in event['params']['header'] :
       atoken =  event['params']['header']['Authorization']
    
    if atoken != '':
        flg = requests.get("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/getemail", headers={"Content-Type":"application/json", "Authorization":atoken})

    return json.loads(flg.text)['body']

#sql statement working fine some complex queries yet to be tested
def getDepartmentBudget(event, context):
    print(event)
    global dbScehma 
    dbScehma = ' DBADMIN '

    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='eu-central-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )

    # secret = event["stage-variables"]["secreat"]
    # resp = client.get_secret_value(
    #     SecretId= secret
    # ) 
    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()

    records = {}

    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
            on = mycursor.fetchone()
            on = convertValuesTodict(mycursor.description, on)
            on = on[0]
            if on['value1'] == 'on':
                chk = enable_xray(event)
                if chk['Enable'] == True:
                    patch_all() 
                    print(event)

            
            if "department_id" in event["params"]["querystring"]:
                department_id = event["params"]["querystring"]["department_id"]
                
                if "budget" in event["params"]["querystring"] and event["params"]["querystring"]["budget"] == 'X':
                    sqlQuery = "select sum(a.amount) as total_amount, b.budget, " \
                        "sum(case when in_status = 'tosap' then amount else 0 end) as consumed_amount, " \
                        "sum(case when in_status = 'inapproval' then amount else 0 end) as committed_amount " \
                    	"from invoice_header a " \
                        "join departmental_budget_master b " \
                        "on a.department_id = b.department_id " \
                    	"where a.npo = 'y' and ( a.in_status = 'inapproval' or a.in_status = 'tosap' ) and a.department_id = ?"
                    values = (department_id,)
                    mycursor.execute(sqlQuery, values)
                    data = mycursor.fetchone()
                    data = convertValuesTodict(mycursor.description, data)
                    data = data[0]
                    if data: 
                        if data["consumed_amount"] == None:
                            data["consumed_amount"] = 0
                        
                        if data["committed_amount"] == None:
                            data["committed_amount"] = 0
                            
                        if data["consumed_amount"] == None:
                            data["consumed_amount"] = 0
                            
                        records = {
                            "available": data["budget"] - data["consumed_amount"],
                            "committed": data["committed_amount"],
                            "consumed": data["consumed_amount"]
                        }
                    
                else:
                    now = datetime.date.today()
                    limit_flag = None
                    warning_flag = None
                    condn = ""
                    msg = None
                    
                    mycursor.execute("select * from departmental_budget_master where department_id = ?", department_id)
                    departmental_budget = mycursor.fetchone()
                    # departmental_budget = convertValuesTodict(mycursor.description, departmental_budget)
                    # departmental_budget = departmental_budget[0]
                    if departmental_budget:
                        if departmental_budget["valid_from"] != None and departmental_budget["valid_to"] != None:
                            sqlQuery = "select sum(cast(amount as int)) as total_amount from invoice_header " \
                                "where npo = 'y' and ( in_status = 'inapproval' or in_status = 'tosap' ) and department_id = ? and to_dats(entry_date) between ? and ? "
                            values = ( department_id, departmental_budget["valid_from"], departmental_budget["valid_to"] )
                        
                        else: 
                            msg = "Budget not defined for current date."
                            
                            sqlQuery = "select sum(amount) as total_amount from invoice_header " \
                                "where npo = 'y' and ( in_status = 'inapproval' or in_status = 'tosap' ) and department_id = ? "
                            values = ( department_id, )
                            
                        mycursor.execute(sqlQuery, values)
                        invoice = mycursor.fetchone()
                        
                        usable_amount_warning = ( int(departmental_budget["warning_per"]) * int(departmental_budget["budget"] )) / 100
                        
                        usable_amount_limit = ( int(departmental_budget["limit_per"]) * int(departmental_budget["budget"]) ) / 100
                        
                        if invoice["total_amount"] != None:
                            
                            if invoice["total_amount"] >= usable_amount_limit and departmental_budget["limit_per"] != 999:
                                if msg == None:
                                    msg = "Budget value limit crossed!"
                                limit_flag = 'y'
                            
                            else:
                                limit_flag = 'n'
                        
                            if invoice["total_amount"] >= usable_amount_warning :  #or departmental_budget["limit_per"] == 999
                                warning_flag = 'y'
                                
                                if msg == None:
                                    msg = "Budget value warning crossed!"
                                
                            else:
                                warning_flag = 'n'
                                
                        else:
                            if departmental_budget["budget"] != 0:
                                limit_flag = 'n'
                                warning_flag = 'n'
                                
                            else:
                                limit_flag = 'y'
                                warning_flag = 'y'
                                msg = "No budget defined for the Department"
                                
                    records = {
                        "limit_flag": limit_flag,
                        "warning_flag": warning_flag,
                        "msg": msg
                    }
             
    except:
        mydb.rollback()
        return {
            'statuscode': 500,
            'body': json.dumps("Internal Failure!")
        }
        
    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': records
    }
   
    if 'Authorization' in event['params']['header'] :
       atoken =  event['params']['header']['Authorization']
    
    if atoken != '':
        flg = requests.get("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/getemail", headers={"Content-Type":"application/json", "Authorization":atoken})

    return json.loads(flg.text)['body']

#event not found  
def getDuplicatePO(event, context):
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='eu-central-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )
    # secret = event["stage-variables"]["secreat"]
    # resp = client.get_secret_value(
    #     SecretId= secret
    # )  
    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()

    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema" + dbScehma
            mycursor.execute(defSchemaQuery)
            
            mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
            on = mycursor.fetchone()
            on = convertValuesTodict(mycursor.description, on)
            on = on[0]
            if on['value1'] == 'on':
                chk = enable_xray(event)
                if chk['Enable'] == True:
                    patch_all() 
                    print(event)
            
            po_number = event['params']['querystring']['ref_po_num']
            invoice_no = None

            if 'invoice_no' in event['params']['querystring']:
                invoice_no = event['params']['querystring']['invoice_no']

            if invoice_no:
                values = (po_number,)
                mycursor.execute("SELECT * FROM invoice_header where ref_po_num = ?", values)
                duplicate = mycursor.fetchone()
                
                if duplicate:
                    
                    if duplicate['invoice_no'] == int(invoice_no):
                        pass
                    else:
                        return {
                            'statuscode': 200,
                            'body': json.dumps('Duplicate Reference PO')
                        }
            else:
                values = (po_number,)
                mycursor.execute("SELECT * FROM invoice_header where ref_po_num = ?", values)
                duplicate = mycursor.fetchone()

                if duplicate:
                    return {
                        'statuscode': 200,
                        'body': json.dumps('Duplicate Reference PO')
                    }
    except:
        return {
            'statuscode': 500,
            'body': json.dumps('Internal Failure')
        }

    finally:
        mydb.close()

    return {
        'statuscode': 201,
        'body': json.dumps('Ucan use PO')
    }

    if 'Authorization' in event['params']['header'] :
       atoken =  event['params']['header']['Authorization']
    
    if atoken != '':
        flg = requests.get("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/getemail", headers={"Content-Type":"application/json", "Authorization":atoken})

    return json.loads(flg.text)['body']

#event not found
def checkInvoiceAndVendor(event, context):
    global dbScehma
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='eu-central-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )
    # secret = event["stage-variables"]["secreat"]
    # resp = client.get_secret_value(
    #     SecretId= secret
    # ) 
    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()
    
    body = ""

    try:
        
        dbScehma = ' DBADMIN '
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
            on = mycursor.fetchone()
            on = convertValuesTodict(mycursor.description, on)
            for row in on:
                if row['value1'] == 'on':
                    chk = enable_xray(event)
                    if chk['Enable'] == True:
                        patch_all() 
                        print(event)
                
            invoice_no = None
            record = None
            
            if "invoice_no" in event["params"]["querystring"]:
                invoice_no = event["params"]["querystring"]["invoice_no"]
                
            user_invoice_no = event["params"]["querystring"]["invoice_id"]
            vendor_no = event["params"]["querystring"]["vendor_no"]
               
            sqlQuery = "select invoice_no from invoice_header where user_invoice_id = ? and supplier_id = ?"
            values = ( user_invoice_no, vendor_no )
            mycursor.execute(sqlQuery, values)
            record = mycursor.fetchone()
            record = convertValuesTodict(mycursor.description, record)
            record = record[0]
            if record: 
                if "invoice_no" in event["params"]["querystring"]:
                    if int(record["invoice_no"]) == int(invoice_no):
                        body = 'n'
                    else:
                        body = 'y'
                else:
                    body = 'y'
            else: 
                body = 'n'
                
                            
    except Exception as e:
        return {
            'statusCode': 500,
            'body': json.dumps("Internal Failure")
        }
        
    finally:
        mydb.close()
        
    return {
        'statusCode': 200,
        'body': body
    }

    if 'Authorization' in event['params']['header'] :
       atoken =  event['params']['header']['Authorization']
    
    if atoken != '':
        flg = requests.get("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/getemail", headers={"Content-Type":"application/json", "Authorization":atoken})

    return json.loads(flg.text)['body']

# working fine for event
def getSearchedInvoiceSup(event, context):
    # print(event)
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='eu-central-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )
    # secret = event["stage-variables"]["secreat"]
    # resp = client.get_secret_value(
    #     SecretId= secret
    # ) 
    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()
    records = {}

    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
            on = mycursor.fetchone()
            if on['value1'] == 'on':
                chk = enable_xray(event)
                if chk['Enable'] == True:
                    patch_all() 
                    print(event)
            
            email = None
            edit = None
            values_pag = []
            
            if "pageno" in event["params"]["querystring"]:
                start_idx = int(event["params"]["querystring"]['pageno'])
            
            if "nooflines" in event["params"]["querystring"]:
                end_idx = int(event["params"]["querystring"]['nooflines'])
            
                start_idx = (start_idx -1 ) * end_idx
            
            if "tabname" in event["params"]["querystring"]:
                tabname = event["params"]["querystring"]['tabname']
            
            if "userid" in event["params"]["querystring"]:
                email = event["params"]["querystring"]["userid"]
                
            if "edit" in event["params"]["querystring"]:
                edit  = event["params"]["querystring"]["edit"]
            
            if "invoice_no" in event["params"]["querystring"]:
                invoiceNo = event["params"]["querystring"]["invoice_no"] 
                
                if edit:
                    values = (invoiceNo,)
                    mycursor.execute("select * from invoice_log where invoice_no = ?", values)
                    invoice_log = mycursor.fetchone()
                    
                    if invoice_log:
                        values = (invoice_log["member_id"],)
                        mycursor.execute("select fs_name, ls_name, email from member where member_id = ?", invoice_log["member_id"])
                        member = mycursor.fetchone()
                        
                        if member['email'] != email:
                            msg = "Invoice is locked by " + str(member["fs_name"]) + " " + str(member["ls_name"])
                            
                            return {
                                'statuscode': 204,
                                'body': json.dumps(msg)
                            }
                    else:
                        if email:
                            values = (email,)
                            mycursor.execute("select member_id from member where email = ?", values)
                            member = mycursor.fetchone()
                            
                            if member:
                                values = ( invoiceNo, member["member_id"] )
                                mycursor.execute("insert into invoice_log (invoice_no, member_id) values (?, ?)", values)
                                mydb.commit()
                
                items = []
                invoice_files = []
                
                mycursor.execute("select attach_id, file_id, name, mime_type, file_link from file_storage where file_id = ?", invoiceNo)
                for row in mycursor:
                    record = {
                        'attach_id': row['attach_id'],    
                        "invoice_id" : row["file_id"],
                        "file_name" : row["name"],
                        "mime_type" : row["mime_type"],
                        "file_link" : row["file_link"]
                    }
                    invoice_files.append(record)
                
                values = (event["params"]["querystring"]["invoice_no"],)
                mycursor.execute("select a.*, b.value2 from invoice_header a inner join dropdown b on a.document_type = b.value1 " \
                    "where invoice_no = ? and from_supplier = 'y'", values)
                invoice_header = mycursor.fetchone()
                
                sqlQuery = "select country from default_master where company_code = (Select company_code from invoice_header where invoice_no = ?)"
                values = (invoiceNo)
                mycursor.execute(sqlQuery,values)
                country = mycursor.fetchone()
                
                if invoice_header:
                    records = {
                        "user_invoice_id": invoice_header["user_invoice_id"],
                        "invoice_no" :invoice_header["invoice_no"],
                        "in_status" : invoice_header["sup_status"],
                        "ref_po_num" : invoice_header["ref_po_num"],
                        "company_code" : invoice_header["company_code"],
                        "payment_method" : invoice_header["payment_method"],
                        "invoice_date" : str(invoice_header["invoice_date"]),
                        "baseline_date" : str(invoice_header["baseline_date"]),
                        "amount" : invoice_header["amount"],
                        "currency" : invoice_header["currency"],
                        "gl_account" : invoice_header["gl_account"],
                        "business_area" : invoice_header["business_area"],
                        "supplier_id" : invoice_header["supplier_id"],
                        "supplier_name" : invoice_header["supplier_name"],
                        "supplier_comments": invoice_header['supplier_comments'],
                        "taxable_amount" : invoice_header["taxable_amount"],
                        "discount_per" : invoice_header["discount_per"],
                        "total_discount_amount" : invoice_header["total_discount_amount"],
                        "is_igst" : invoice_header["is_igst"],
                        "tax_per" : invoice_header["tax_per"],
                        "cgst_tot_amt": invoice_header["cgst_tot_amt"],
                        "sgst_tot_amt": invoice_header["sgst_tot_amt"],
	                    "igst_tot_amt": invoice_header["igst_tot_amt"],
                        "tds_per": invoice_header["tds_per"],
                        "tds_tot_amt": invoice_header["tds_tot_amt"],
                        "payment_terms" :invoice_header["payment_terms"],
                        "adjustment" : invoice_header["adjustment"],
                        "tcs" : invoice_header["tcs"],
                        "npo": invoice_header["npo"],
                        "document_type": invoice_header["document_type"],
                        "doc_type_desc": invoice_header["value2"],
                        "gstin": invoice_header["gstin"],
                        "irn": invoice_header["irn"],
                        'invoice_files' : invoice_files,
                        "items" : items,
                        "country" : country['country']
                    }
                
                    mycursor.execute("select * from invoice_item where invoice_no = ?", values)
                    
                    for row in mycursor:
                        record = {
                            "item_no":row["item_no"],
                            "hsn_code": row["hsn_code"],
                            "material":row["material"],
                            "material_desc":row["material_desc"],
                            "quantity":row["quantity"],
                            "unit":row["unit"],
                            "amount":row["amount"],
                            "currency": row["currency"],
                            "amt_per_unit" : row["amt_per_unit"],
                            "cgst_per": row["cgst_per"],
                            "cgst_amount":row["cgst_amount"],
                            "tax_code":row["tax_code"],
                            "ref_po_no":row["ref_po_no"],
                            "plant":row["plant"],
                            "discount":row["discount"],
                            "discount_amount" : row["discount_amount"],
                            "gross_amount" : row["gross_amount"],
                            "sgst_per": row["sgst_per"],
                            "sgst_amount": row["sgst_amount"],
                            "igst_per": row["igst_per"],
                            "igst_amount": row["igst_amount"],
                            "taxable_amount": row["taxable_amount"],
                            "tax_value_amount": row["tax_value_amount"],
                            "gst_per": row["gst_per"]
                        }
                        items.append(record)
                        
                    records["items"] = items
            
            elif "condn" in event["body-json"]:
            
                val_list = []
                pos = 0
                condn = ""
                records = {}
                
                val_list.append(tabname)
    
                for row in event["body-json"]["condn"]:
                    if pos != 0:
                        condn = condn + " and "
                    elif pos == 0:
                        pos = pos + 1
    
                    if str(row["operator"]) == "like":
                        val_list.append("%" + row["value"] + "%")
                        condn = condn + row["field"] + " " + str(row["operator"]) + " " + "?"
                    elif str(row["operator"]) == "between":
                        val_list.append(row["value"])
                        val_list.append(row["value2"])
                        condn = condn + " " + str(row["field"]) + " between ? and ?"
                    else:
                        val_list.append(row["value"])
                        condn = condn + row["field"] + " " + str(row["operator"]) + " " + "?"
    
                sqlQuery = "SELECT a.invoice_no, a.sup_status, a.user_invoice_id, a.invoice_date, a.approver_comments, a.amount, a.document_type, a.gstin, b.value2 " \
                           "FROM invoice_header a inner join dropdown b on a.document_type = b.value1 where sup_status = ? and from_supplier = 'y' "
                           
                if condn:
                    sqlQuery = sqlQuery + " and " + condn + " order by invoice_no desc limit ? offset ?"
                else:
                    sqlQuery = sqlQuery + " order by invoice_no desc limit ? offset ?"
                    
                
                val_list.append(end_idx)
                val_list.append(start_idx)
    
                values = tuple(val_list,)
    
                mycursor.execute(sqlQuery, values)
                invoice_obj = mycursor.fetchall()
                
                del val_list[0]
                val_list.pop()
                val_list.pop()
                
                sqlQuery = "select count(sup_status) as invoice_count, sup_status from invoice_header where from_supplier = 'y' "
                if condn:
                    sqlQuery = sqlQuery + " and " + condn + " group by sup_status"
                else:
                    sqlQuery = sqlQuery + " group by sup_status"
                
                mycursor.execute(sqlQuery, tuple(val_list))
        
                countrec = {}
                total_count = 0
                
                for each in mycursor:
                    total_count = total_count + int(each["invoice_count"])
                    countrec[each['sup_status']] = each['invoice_count']
                    
                if "" in countrec:
                    del countrec['']
                
                if None in countrec:
                    del countrec[None]
                        
                if "draft" not in countrec:
                    countrec["draft"] = 0
                        
                if "inapproval" not in countrec:
                    countrec["inapproval"] = 0
                        
                if "approved" not in countrec:
                    countrec["approved"] = 0
                        
                if "rejected" not in countrec:
                    countrec["rejected"] = 0
                        
                countrec["total_count"] = total_count
                invoices = []
                invoice_files = []
                
                res = [str(sub['invoice_no']) for sub in invoice_obj]
                
                if res and len(res) > 1:
                    mycursor.execute("select attach_id, file_id, name, mime_type, file_link from file_storage where file_id in {}".format(tuple(res))) 
                            
                elif res and len(res) == 1:
                    values = (res[0],)
                    mycursor.execute("select attach_id, file_id, name, mime_type, file_link from file_storage where file_id = ?", values)
                        
                for row in mycursor:
                    record = {
                        'attach_id': row['attach_id'],
                        "invoice_id" : row["file_id"],
                        "file_name" : row["name"],
                        "mime_type" : row["mime_type"],
                        "file_link" : row["file_link"]
                    }
                    invoice_files.append(record)
                
                for row in invoice_obj:
                    files = []
                    
                    for data in invoice_files:
                        if str(row["invoice_no"]) == str(data["invoice_id"]):
                            temp = {
                                "file_name" : data["file_name"],
                                "mime_type" : data["mime_type"],
                                "file_link" : data["file_link"]
                            }
                            files.append(temp)
                            
                    record = {
                      "invoice_no":row["invoice_no"],
                      "in_status": row["sup_status"],
                      "user_invoice_id": row["user_invoice_id"],   
                      "invoice_date":str(row["invoice_date"]),
                      "approver_comments" : row["approver_comments"],
                      "total_amount": row["amount"],
                      "document_type": row["document_type"],
                      "doc_type_desc": row["value2"],
                      "gstin": row["gstin"],
                      'invoice_files' : files
                    }
                    invoices.append(record)
                    
                records["invoices"] = invoices
                records["count"] = countrec
                
            else:
                records = {}
                invoices = []
                invoice_files = []
                
                if "tabname" in event["params"]["querystring"]:
                    values_pag.append(tabname)
                    values_pag.append(end_idx)
                    values_pag.append(start_idx)
                    
                    sqlQuery = "SELECT a.invoice_no, a.user_invoice_id, a.amount, a.sup_status, a.user_invoice_id, a.invoice_date, a.approver_comments, a.document_type, a.gstin, b.value2 " \
                        "FROM invoice_header a inner join dropdown b on a.document_type = b.value1 " \
                        "where sup_status = ? and from_supplier = 'y' order by invoice_no desc limit ? offset ?"
                    mycursor.execute(sqlQuery, tuple(values_pag))
                    invoices_obj = mycursor.fetchall()   
                    
                else:
                    values_pag.append(end_idx)
                    values_pag.append(start_idx)
                
                    mycursor.execute("SELECT invoice_no, user_invoice_id, amount, sup_status, user_invoice_id, invoice_date, approver_comments " \
                        "FROM invoice_header where from_supplier = 'y' order by invoice_no desc limit ? offset ?", tuple(values_pag))
                    invoices_obj = mycursor.fetchall()
                
                res = [str(sub['invoice_no']) for sub in invoices_obj]
                
                if res and len(res) == 1:
                    mycursor.execute("select attach_id, file_id, name, mime_type, file_link from file_storage where file_id = ? order by file_id", res[0])
                    file = mycursor.fetchall()
                    for row in file:
                        record = {
                            'attach_id': row['attach_id'], 
                            "invoice_id" : row["file_id"], 
                            "file_name" : row["name"],
                            "mime_type" : row["mime_type"],
                            "file_link" : row["file_link"]
                        }
                        invoice_files.append(record)
                    
                elif res and len(res) > 1:
                    mycursor.execute("select attach_id, file_id, name, mime_type, file_link from file_storage where file_id in {} order by file_id".format(tuple(res))) 
                    file = mycursor.fetchall()
                    for row in file:
                        record = {
                            'attach_id': row['attach_id'], 
                            "invoice_id" : row["file_id"], 
                            "file_name" : row["name"],
                            "mime_type" : row["mime_type"],
                            "file_link" : row["file_link"]
                        }
                        invoice_files.append(record)
                
                if invoices_obj:
                    for row in invoices_obj:
                        files = []
                        
                        for data in invoice_files:
                            if str(row["invoice_no"]) == str(data["invoice_id"]):
                                temp = {
                                    "file_name" : data["file_name"],
                                    "mime_type" : data["mime_type"],
                                    "file_link" : data["file_link"]
                                }
                                files.append(temp)
                        
                        record = {
                          "invoice_no":row["invoice_no"],
                          "user_invoice_id": row["user_invoice_id"],
                          "in_status": row["sup_status"],
                          "total_amount": row["amount"],
                          "user_invoice_id": row["user_invoice_id"],
                          "invoice_date":str(row["invoice_date"]),
                          "approver_comments" : row["approver_comments"],
                          "document_type": row["document_type"],
                          "doc_type_desc": row["value2"],
                          "gstin": row["gstin"],
                          'invoice_files' : files
                        }
                        invoices.append(record)
                records["invoices"] = invoices
                
    except Exception as e:
        return {
        'statuscode': 500,
        'body': json.dumps(str(e))
    }
            
    finally:
        mydb.close()
        
    return {
        'statuscode': 200,
        'body': records
    }
    

    if 'Authorization' in event['params']['header'] :
       atoken =  event['params']['header']['Authorization']
    
    if atoken != '':
        flg = requests.get("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/getemail", headers={"Content-Type":"application/json", "Authorization":atoken})

    return json.loads(flg.text)['body']

# event = {'body-json': {}, 'params': {'path': {}, 'querystring': {'nooflines': '10', 'pageno': '1', 'tabname': 'draft', 'userid': 'einvoiceportal@gmail.com'}, 'header': {'accept': 'application/json, text/plain, */*', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'en-US,en;q=0.9', 'Authorization': 'eyJraWQiOiJ1RXlLMTdnUjUzTVVMcXUrYkRsQUZ2NHRSUTR0VVM5KzM4NlwvZnpxMWorQT0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiI5NDkxOTNiMi1hZWQ2LTQxZGUtOTM2YS04MGRjMTEzNjUxNzIiLCJhdWQiOiIyNGJqZTRqdWQ4aDNmOHJzbmtraGcwYmx2MSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJldmVudF9pZCI6IjgxYzUyODQ2LTU4ZTAtNGI5ZS1iMjE4LWFlY2YzZjExMWIzNiIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjg2MjA0MTE4LCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAuZXUtY2VudHJhbC0xLmFtYXpvbmF3cy5jb21cL2V1LWNlbnRyYWwtMV9QOXJubnFpTHUiLCJjb2duaXRvOnVzZXJuYW1lIjoiOTQ5MTkzYjItYWVkNi00MWRlLTkzNmEtODBkYzExMzY1MTcyIiwiZXhwIjoxNjg2MjA3NzE4LCJpYXQiOjE2ODYyMDQxMTgsImVtYWlsIjoiZWludm9pY2Vwb3J0YWxAZ21haWwuY29tIn0.L8B5FtrVzhAXit7Pi2pQ8uUjd35gL27EWWSz6OxUp4MQ4A82Pn4AfvS7O8ysh3GpPbKTWBFE7p8HUeqEPP2x5DXCQZcx7K_xcX0Vm_TZfvECZuNoJnYnELmK3_vLFAEkTrd8xNAwqjqcl7QvBkOuzfWBjD74cAAyRSWa9mfWZDdqlgE-UYrYtR_Z6ue4IGBQjaYXxWzH9fmhJex1cyJEkunEhDTGQeiIfj4fqLgTdiUhF-wdQuab0JiDGdNm_5kg_u2dH44IIW49lMBYOq5HrCR56tzwTTzMtHXyiVrlY5vH7cmIUfCn7CfDE5bA_rProJOxofeMU4-44cvVdyCNVg', 'content-type': 'application/json', 'Host': '7firau5x7b.execute-api.eu-central-1.amazonaws.com', 'origin': 'http://localhost:4200', 'referer': 'http://localhost:4200/', 'sec-ch-ua': '"Not.A/Brand";v="8", "Chromium";v="114", "Google Chrome";v="114"', 'sec-ch-ua-mobile': '?0', 'sec-ch-ua-platform': '"Windows"', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'cross-site', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36', 'X-Amzn-Trace-Id': 'Root=1-648170ea-65b3d11012337a8671f5740a', 'X-Forwarded-For': '49.207.49.108', 'X-Forwarded-Port': '443', 'X-Forwarded-Proto': 'https'}}, 'stage-variables': {'schema': 'einvoice_db_portal', 'non_ocr_attachment': 'einvoice-attachments', 'lambda_alias': 'dev', 'aws_mail_bucket': 'application-email', 'notification_email': 'elipotest@gmail.com', 'ocr_bucket': 'textract-console-ap-southeast-1-b8779ae1-dd77-4d3c-a56d-443a5db', 'ocr_bucket_folder': 'old-dev/', 'oauth_ret': 'https://7firau5x7b.execute-api.eu-central-1.amazonaws.com/einvoice-v1/gmail-s3', 'bucket_gmail_credential': 'file-bucket-emp', 'clientsec_location': 'client_secret.json', 'secreat': 'test/einvoice/secret', 'attach_stage': 'dev'}, 'context': {'account-id': '', 'api-id': '7firau5x7b', 'api-key': '', 'authorizer-principal-id': '', 'caller': '', 'cognito-authentication-provider': '', 'cognito-authentication-type': '', 'cognito-identity-id': '', 'cognito-identity-pool-id': '', 'http-method': 'POST', 'stage': 'einvoice-v1', 'source-ip': '49.207.49.108', 'user': '', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36', 'user-arn': '', 'request-id': '8f92a208-f733-4235-8e4c-76c2b5ac43d2', 'resource-id': 'e79n55', 'resource-path': '/fetch-invoice'}}

# print(getSearchedInvoiceSup(event , ' '))

# class FailedToUpload(Exception):
#     pass

# def get_stored_credentials(user_id):
    
#     s3 = boto3.client("s3")
#     # bucket_name = "file-bucket-emp"
#     # bucket_name = event["stage-variables"]["bucket_gmail_credential"]
    
#     try:
#         encoded_file = s3.get_object(Bucket=cred_bucket_name, Key=cred_bucket_folder+user_id)
#         creds = pickle.loads(encoded_file["Body"].read())
#         return creds
        
#     except Exception as excep:
#         creds = None
#         # print(excep)
#         return creds
      
      
# def build_service(credentials):
#     http = httplib2.Http()
#     http = credentials.authorize(http)
#     return build('gmail', 'v1', http=http)
    

# def fetch_attachments(service, user_id, msg_id, mail, attachmentIds = None, filename = None , mydb = None):
    
#     s3 = boto3.client("s3")  
    
#     try:
#         try :
#             with mydb.cursor() as mycursor: 
        
#                 if attachmentIds:
                    
#                     att = service.users().messages().attachments().get(userId=user_id, messageId=msg_id, id=attachmentIds).execute()
#                     data = att['data']  
                
#                     file_data = base64.urlsafe_b64decode(data.encode('UTF-8'))
                    
#                     fileKey = msg_id + "@" + filename
                
#                     s3.put_object(Bucket=non_ocr_bucket, Key=fileKey, Body=file_data)
                                                  
#                     # urls = "https://l8m6p8a76e.execute-api.eu-central-1.amazonaws.com/dev/attachment?file_name=" + fileKey
#                     urls = "https://l8m6p8a76e.execute-api.eu-central-1.amazonaws.com/" + str(stage_name) + "/attachment?file_name=" + fileKey
                                                  
#                     values = (msg_id, filename, urls) 
                                    
#                     mycursor.execute("INSERT INTO file_storage (file_id, name, file_link) VALUES (%s, %s, %s)", values)
                            
#                     mydb.commit()
                    
#                     return urls
                
#                 else:
#                     message = service.users().messages().get(userId=user_id, id=msg_id).execute()
            
#                     files = []
#                     urls = []
#                     if message:
#                         for part in message['payload']['parts']:
                
#                             if part['filename']:
                
#                                 if 'data' in part['body']:
#                                     data = part['body']['data']
#                                 else:
#                                     att_id = part['body']['attachmentId']
#                                     att = service.users().messages().attachments().get(userId=user_id, messageId=msg_id,
#                                                                                        id=att_id).execute()
#                                     data = att['data']
                
#                                 file_data = base64.urlsafe_b64decode(data.encode('UTF-8'))
#                                 # file_data = '"'+file_data+'"'
                
#                                 if file_data:
#                                     # curDateTime = datetime.now()
#                                     # print(now)
                
#                                     # timestamp = str(datetime.timestamp(curDateTime))
#                                     # print("timestamp =", timestamp)
                                    
                
#                                     fileKey = msg_id + "@" + str(part["filename"])
                
#                                     # s3.put_object(Bucket="einvoice-attachments", Key=fileKey,
#                                     #               Body=file_data)
                                                  
#                                     s3.put_object(Bucket=non_ocr_bucket, Key=fileKey,
#                                                   Body=file_data)
                                                  
                                
                                                  
#                                     url = "https://l8m6p8a76e.execute-api.eu-central-1.amazonaws.com/" + str(stage_name) + "/attachment?file_name=" + fileKey
                                                  
#                                     # print(url)
#                                     values = (msg_id, str(part["filename"]), url)
                                    
#                                     mycursor.execute(
#                                         "INSERT INTO file_storage (file_id, name, file_link) VALUES (%s, %s, %s)", values)
                                    
#                                     mydb.commit()
                                    
#                                     urls.append(url)    
                                
#         finally:
#             mydb.close()

#     finally:
#         pass
    
#     # except Exception as error:
#     #     print('An error occurred: ', error)
#     #     # raise FailedToUpload(error)
        
# # sql statements are working fine       
# def einvoice_fetch_mail_attachments(event, context):
#     # patcher.patch_all()
#     # client = boto3.client('events')
#     # response = client.put_events(
#     #     Entries=[
#     #         {
#     #             'Source': 'foo',
#     #             'DetailType': 'foo',
#     #             'Detail': '{\"foo\": \"foo\"}'
#     #         },
#     #     ]
#     # )
#     global dbScehma 
#     dbScehma = ' DBADMIN '
    
        
#     client = boto3.client(
#     'secretsmanager',
#     region_name='eu-central-1',
#     aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
#     aws_secret_access_key='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' )

#     secret = event["stage-variables"]["secreat"]
    
#     global non_ocr_bucket
#     non_ocr_bucket = event["stage-variables"]["non_ocr_attachment"]
    
#     global stage_name
#     stage_name = event["stage-variables"]['attach_stage']  
    
#     global cred_bucket_name
#     cred_bucket_name = event["stage-variables"]["bucket_gmail_credential"]
    
#     global cred_bucket_folder
#     cred_bucket_folder = event["stage-variables"]["ocr_bucket_folder"]

#     resp = client.get_secret_value(
#         SecretId= secret
#     ) 
    
#     secretDict = json.loads(resp['SecretString'])
    
#     mydb = hdbcliConnect()
    
#     try:
#         print(event)
        
#         user_id = event["params"]["querystring"]["user_id"]
#         msg_id = event["params"]["querystring"]["msg_id"]
        
#         if "attachments" in event["params"]["querystring"]:
#             ath_ids = event["params"]["querystring"]["attachments"]
#             filename = event["params"]["querystring"]["filename"]
            
#             with mydb.cursor() as mycursor:
#                 defSchemaQuery = "set schema" + dbScehma
#                 mycursor.execute(defSchemaQuery)
                
#                 mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
#                 on = mycursor.fetchone()
#                 on = convertValuesTodict(mycursor.description, on)
#                 for row in on:
#                     if row['value1'] == 'on':
#                         chk = enable_xray(event)
#                         if chk['Enable'] == True:
#                             patch_all() 	
                        
#                 # mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
#                 # on = mycursor.fetchone()
#                 # if on['value1'] == 'on':
#                 #     chk = enable_xray(event)
#                 #     if chk['Enable'] == True:
#                 #         patch_all() 

#                 values = (msg_id, filename)
#                 mycursor.execute("select * from file_storage where file_id = ? and name = ?", values) 
#                 file_storage = mycursor.fetchone()
                
#                 if file_storage:
#                     return {
#                         'statusCode': 200,
#                         'body': file_storage["file_link"]
#                     }
        
#         creds = get_stored_credentials(user_id)
#         # print(creds)
        
#         if creds:
#             service = build_service(credentials=creds)
            
#             if ath_ids:
#                 urls = fetch_attachments(service, "me", msg_id, user_id, ath_ids, filename, mydb)
#             else:
#                 urls = fetch_attachments(service, "me", msg_id, user_id)
            
#             # att = service.users().messages().attachments().get(userId=user_id, messageId=msg_id,id=att_id).execute()
#     except FailedToUpload as ex:
#         return {
#             'statusCode': 500,
#             'body': json.dumps('fAILED to upload')
#         }
        
        
#     return {
#         'statusCode': 200,
#         'body': urls,
#         # 'res' : response
#     }

#     if 'Authorization' in event['params']['header'] :
#        atoken =  event['params']['header']['Authorization']
    
#     if atoken != '':
#         flg = requests.get("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/getemail", headers={"Content-Type":"application/json", "Authorization":atoken})

#     return json.loads(flg.text)['body']

#no sql statement to check for delete operation
def einvoice_revoke_email_access(event, context):
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='eu-central-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )
    
    # secret = event["stage-variables"]["secreat"]
    
    cred_bucket = event["stage-variables"]["bucket_gmail_credential"]
    
    cred_bucket_folder = event["stage-variables"]["ocr_bucket_folder"]
    
    del_email = event["params"]["querystring"]["del_email"]

    # resp = client.get_secret_value(
    #     SecretId= secret
    # )  

    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()
    
    
    try:
        with mydb.cursor() as mycursor:
            
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
            on = mycursor.fetchone()
            if on['value1'] == 'on':
                chk = enable_xray(event)
                if chk['Enable'] == True:
                    patch_all() 
                    print(event)
            
            if del_email:
                
                s3 = boto3.client("s3")
                s3.delete_object(Bucket=cred_bucket, Key=cred_bucket_folder+del_email)  
                
    
    except:
        return{
            'statusCode': 500,
            'body': json.dumps("Interal Error!")
        }
                
    finally:
        mydb.close()
        
    return{
        'statusCode': 200,
        'body':json.dumps("Access Removed!")
    }  
    if 'Authorization' in event['params']['header'] :
       atoken =  event['params']['header']['Authorization']
    
    if atoken != '':
        flg = requests.get("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/getemail", headers={"Content-Type":"application/json", "Authorization":atoken})

    return json.loads(flg.text)['body']



class GetCredentialsException(Exception):
    """Error raised when an error occurred while retrieving credentials.

    Attributes:
      authorization_url: Authorization URL to redirect the user to in order to
                         request offline access.
    """

    def __init__(self, authorization_url ):
        """Construct a GetCredentialsException."""
        self.authorization_url = authorization_url


class CodeExchangeException(GetCredentialsException):
    """Error raised when a code exchange has failed."""


class NoRefreshTokenException(GetCredentialsException):  
    """Error raised when no refresh token has been found."""


class UnknownExceotion(Exception):
    """"""


class NoUserIdException(Exception):
    """Error raised when no user ID could be retrieved."""


class NoStoredCredentials(Exception):
    """"""



        
       
#column names not et converted
def einvoice_gmail_attachments_tos3(event, context):
    s3 = boto3.client("s3",region_name='eu-central-1',
    aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    aws_secret_access_key='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')
    creds = None

    file_name = "token.pickle"

    # bucket_name = event["stage-variables"]["bucket_gmail_credential"]
    # bucket_name = None
    # bucket_name = "file-bucket-emp"

    state = ""
    CLIENTSECRETS_LOCATION = 'client_secret.json'
    REDIRECT_URI = 'https://7firau5x7b.execute-api.eu-central-1.amazonaws.com/einvoice-v1/gmail-s3'
    SCOPES = [
        'https://www.googleapis.com/auth/gmail.readonly',
        'https://www.googleapis.com/auth/userinfo.email',
        'https://www.googleapis.com/auth/userinfo.profile'
        # 'https://www.googleapis.com/auth/gmail.send',
        # 'https://www.googleapis.com/auth/gmail.modify',
        # 'https://www.googleapis.com/auth/gmail.compose',
        # 'https://www.googleapis.com/auth/gmail.addons.current.action.compose'
        # Add other requested scopes.
    ]

    # patcher.patch_all()
    # client = boto3.client('events')
    # response = client.put_events(
    #     Entries=[
    #         {
    #             'Source': 'foo',
    #             'DetailType': 'foo',
    #             'Detail': '{\"foo\": \"foo\"}'
    #         },
    #     ]
    # )
    
    
    def get_stored_credentials(user_id):
        try:
            encoded_file = s3.get_object(Bucket=bucket_name, Key=ocr_bucket_folder+user_id)
            creds = pickle.loads(encoded_file["Body"].read())
            return creds
        except Exception as excep:
            creds = None
            raise NoUserIdException(excep)


    def store_credentials(user_id, credentials, mycursor=None, mydb=None, state=None):
        try:
            fileBody = pickle.dumps(credentials)     
            s3.put_object(Bucket=bucket_name, Key=ocr_bucket_folder+user_id, Body=fileBody)

            values = (user_id, "login")
            mycursor.execute("INSERT INTO loggedin_users (userid, login_status) VALUES (?, ?)", values)
            
            # print(state)
            # print("state")  
            if state:
                if state == "hole_access_check": 
                    values = (user_id, )  
                    mycursor.execute("UPDATE elipo_setting SET value1 = ? WHERE key_name = 'notification-mail'", values)
                        
            # mydb.commit()

        except Exception as e:
            raise NotImplementedError(e)


    def exchange_code(authorization_code):
        flow = flow_from_clientsecrets(CLIENTSECRETS_LOCATION, ' '.join(SCOPES))
        flow.redirect_uri = REDIRECT_URI

        try:
            credentials = flow.step2_exchange(authorization_code)
            return credentials
        except FlowExchangeError as error:
            logging.error('An error occurred: %s', error)
            raise CodeExchangeException(None)


    def get_user_info(credentials):
        user_info_service = build(
            serviceName='oauth2', version='v2',
            http=credentials.authorize(httplib2.Http())
        )
        # print("Service is ok")

        user_info = None

        try:
            user_info = user_info_service.userinfo().get().execute()
            # print(user_info)
        except Exception as e:
            logging.error('An error occurred: %s', e)
        if user_info and user_info.get('id'):
            return user_info
        else:
            raise NoUserIdException()


    def get_authorization_url(email_address=None, state=None):
        # print("ok")
        flow = flow_from_clientsecrets(CLIENTSECRETS_LOCATION, ' '.join(SCOPES))
        # print("ok")
        flow.params['access_type'] = 'offline'
        flow.params['approval_prompt'] = 'force'
        if email_address:
            flow.params['user_id'] = email_address
        if state:
            flow.params['state'] = state
        return flow.step1_get_authorize_url(redirect_uri=REDIRECT_URI)


    def get_credentials(authorization_code=None, state=None, user_id=None, cursor=None, mydb=None):
        email_address = ''
        try:
            if authorization_code:
                credentials = exchange_code(authorization_code)
                user_info = get_user_info(credentials)
                user_id = user_info["email"]
                # user_id = user_info.get('id')
                if credentials.refresh_token is not None:
                    store_credentials(user_id, credentials, mycursor=cursor, mydb=mydb, state=state)
                        
                    return credentials

            elif user_id:
                credentials = get_stored_credentials(user_id)
                if credentials and credentials.refresh_token is not None:
                    return credentials
                else:
                    False

        except CodeExchangeException as error:
            logging.error('An error occurred during code exchange.')
            # Drive apps should try to retrieve the user and credentials for the current
            # session.
            # If none is available, redirect the user to the authorization URL.
            authorization_url = get_authorization_url(email_address, state)
            # print("aok")
            raise CodeExchangeException(authorization_url)

        except NoUserIdException:
            
            values = (gmail_user,)
            cursor.execute("DELETE FROM loggedin_users WHERE userid = ?", values)  
            # mydb.commit()
            
            logging.error('No user ID could be retrieved.')
            # No refresh token has been retrieved.
            authorization_url = get_authorization_url(email_address, state)
            raise NoRefreshTokenException(authorization_url)


    def build_service(credentials):
        http = httplib2.Http()
        http = credentials.authorize(http)
        return build('gmail', 'v1', http=http)

    import pprint


    def search_messages(service, user_id, search_query):
        try:

            emials = []
            nextToken = None

            search_id = service.users().messages().list(userId=user_id, q=search_query).execute()

            if search_id:

                if search_id['resultSizeEstimate'] > 0:
                    emials += search_id['messages']

                if 'nextPageToken' in search_id:
                    nextToken = search_id['nextPageToken']
                else:
                    nextToken = None

            while nextToken:
                search_id = service.users().messages().list(userId=user_id, q=search_query,
                                                            pageToken=nextToken).execute()

                if search_id and search_id['resultSizeEstimate'] > 0:
                    emials += search_id['messages']

                    if 'nextPageToken' in search_id:
                        nextToken = search_id['nextPageToken']
                    else:
                        nextToken = None
                else:
                    if 'nextPageToken' in search_id:
                        nextToken = search_id['nextPageToken']
                    else:
                        nextToken = None

            return emials

        except Exception as error:
            print("An error occurred: ", error)


    def fetch_attachments(service, user_id, msg_id):
        try:
            message = service.users().messages().get(userId=user_id, id=msg_id).execute()
            # print("fetch attchments encoded",message)

            if message:
                attachments = []
                mail = {}

                mail['snippet'] = message["snippet"]
                mail['msg_id'] = msg_id

                for header in message["payload"]["headers"]:
                    if header["name"] == "From":
                        mail["sender"] = header["value"]

                    elif header["name"] == "Date":
                        mail["date"] = header["value"]
                        mail['dateobj'] = datetime.datetime.strptime(header["value"], '%a, %d %b %Y %X %z')
                        # print(type(header["value"]))

                    elif header["name"] == "Subject":
                        mail["subject"] = header["value"]

                    # elif header["name"] == "Delivered-To":
                    #     delevered_to = header["value"]

                for part in message['payload']['parts']:

                    if part['filename']:
                        file = {
                            'filename': part['filename'],
                            'msg_id': msg_id,
                            'attachmentId': part['body']['attachmentId']
                        }

                        attachments.append(file)

                mail["attachments"] = attachments

                mail['isReaded'] = ""

                mail['invoice_no'] = None

                mail['timetaken'] = None

                return mail

            else:
                return None  


        except Exception as error:
            print('An error occurred: ', error)

    def fetch_attachments1(msg_id,mycursor):
        mail = {}
        attachments = []
        values = msg_id
        mycursor.execute("Select * from aws_mail_message where message_id = ?",values)
        data = mycursor.fetchall()  

        for each in data:
            file = {
                'filename': each['filename'],
                'msg_id': each['message_id']
                }  
            attachments.append(file)
            mail["date"] = each['date']
            mail['dateobj'] = datetime.datetime.strptime(each['date'], '%a, %d %b %Y %X %z')
            mail["sender"] = each['received_from']
            mail["msg_id"] = each['message_id']
            mail["subject"] = each['sub']
            
        mail["attachments"] = attachments
        
        mail['isReaded'] = ""
        mail['invoice_no'] = None
        mail['timetaken'] = None
        return mail

    global dbScehma 
    dbScehma = ' DBADMIN '
    # print(event)

    # client = boto3.client(
    # 'secretsmanager',
    # region_name='eu-central-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )

    # secret = event["stage-variables"]["secreat"]

    global bucket_name
    # bucket_name = 
    bucket_name = event["stage-variables"]["cred_bucket"]
    
    global ocr_bucket_folder
    ocr_bucket_folder = event["stage-variables"]["ocr_bucket_folder"]

    # global REDIRECT_URI
    # REDIRECT_URI = event["stage-variables"]["oauth_ret"]

    # global CLIENTSECRETS_LOCATION
    # CLIENTSECRETS_LOCATION = event["stage-variables"]["clientsec_location"]
    
    global gmail_user
    
    if "user_id2" in event["params"]["querystring"]:
        gmail_user2 = event["params"]["querystring"]["user_id2"]
        
    
    if "user_id" in event["params"]["querystring"]:
        gmail_user = event["params"]["querystring"]["user_id"]
    
 
    # resp = client.get_secret_value(
    #     SecretId=secret
    # )

    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()

    user = "admin"

    if "state" in event["params"]["querystring"]:
        state = event["params"]["querystring"]["state"]
        # print(state)
    else:
        state = ""
         
    print(event)

    try:       
        with mydb.cursor() as mycursor:
            
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
            on = mycursor.fetchone()
            if on['value1'] == 'on':
                chk = enable_xray(event)
                if chk['Enable'] == True:
                    patch_all() 	
            
            final_emails = []
            final_emails1 = []
            if 'pageno' in event["params"]["querystring"]:
                pageno = int(event["params"]["querystring"]['pageno'])

                start = (pageno - 1) * 10
                end = pageno * 10
            if "user_id2" in event["params"]["querystring"]:
                values = (event["params"]["querystring"]["user_id2"],)
                mycursor.execute("SELECT * FROM aws_mail_message where user_id = ?", values)
                awsmails = mycursor.fetchall()

                
                invoices = []
                msg_ids = [] 
                aws_mailsD = {} 
                time_taken = 0.0

                for each in awsmails:
                    if not each['message_id'] in aws_mailsD:
                        aws_mailsD[each['message_id']] = []
                        msg_ids.append(each['message_id'])
                    aws_mailsD[each['message_id']].append(each)
                emails1 =[]
                if msg_ids:
                    msg_ids = msg_ids[start:end]
                    msg_ids = set(msg_ids)
                    msg_ids = list(msg_ids)

                for em_msg in msg_ids:
                    flag = False

                    mail_f1 = fetch_attachments1(em_msg,mycursor)
                    if mail_f1:
                        invoices = []
                        if aws_mailsD:
                            time_taken = 0.0
                            total = 0
                            invoices = []
                            if em_msg in aws_mailsD:
                                mail_f1['isReaded'] = "yes"
                                for mail in aws_mailsD[em_msg]:
                                    if mail['invoice_no']:
                                        invoices.append(mail['invoice_no'])
                                    if mail['is_processed'] != 'y':
                                        mail_f1['invoice_no'] = "Failed"
                                        mail_f1['isReaded'] = "no"
                                    if mail['is_processed'] == 'y' and mail['invoice_no'] and mail['invoice_no'] != '' and mail['ocr_start'] and mail['ocr_end']:
                                        diff = mail['ocr_end'] - mail['ocr_start']
                                        time_taken += diff.total_seconds()
                                        total += 1
                                    flag = True
                                invoices.sort()
                                mail_f1['invoice_no'] = invoices
                                if time_taken > 0:
                                    time_taken = time_taken / total
                                    time_taken = format(time_taken, '.2f')
                                mail_f1['timetaken'] = time_taken
                            if flag == True:
                                emails1.append(mail_f1)
                        if flag == False:
                            mail_f1['isReaded'] = "no"
                            mail_f1['invoice_no'] = invoices
                            emails1.append(mail_f1)
                emails1 = sorted(emails1, key=lambda i: i['dateobj'], reverse=True)
                for each in emails1:
                    # del each['dateobj']
                    if each['attachments']:
                        final_emails.append(each)

                # for each in awsmails:
                #     file = {
                #         'filename': each['filename'],
                #         'msg_id': each['message_id']
                #     }
                    
                # final_emails1.append(mail)
                # final_emails1.append(invoices)
                # final_emails1.append(sender)
                # final_emails1.append(sub)

                # final_emails.append(final_emails1)
                                           
                           
            if "code" in event["params"]["querystring"]:
                cred = get_credentials(authorization_code=event["params"]["querystring"]["code"],
                                       state=state, cursor=mycursor, mydb=mydb)
                return {
                    'statuscode': 200,
                    'body': json.dumps("Auth successfully")
                }

            elif "user_id" in event["params"]["querystring"]:
                cred = get_credentials(user_id = event["params"]["querystring"]["user_id"],
                                       state = state, cursor = mycursor, mydb=mydb)  

                user = event["params"]["querystring"]["user_id"]

            userNtextToken = ''

            start = 0
            end = 10

            if 'pageno' in event["params"]["querystring"]:
                pageno = int(event["params"]["querystring"]['pageno'])

                start = (pageno - 1) * 10
                end = pageno * 10

            condn = ' AND '
            if 'condn' in event["params"]["querystring"]:
                
                condn += str(event["params"]["querystring"]['condn'])
                # print(condn)

            noOfMails = 0    

            if cred:
                service = build_service(credentials=cred)
                # email_msges = search_messages(service, 'me', 'newer_than:10d')
                email_data = search_messages(service=service, user_id='me',
                                             search_query='has:attachment' + condn)

                email_msges = []
                noOfMails = 0

                if email_data:
                    email_msges = []
                    noOfMails = len(email_data)
                    email_data = email_data[start:end]

                    for ids in email_data:
                        email_msges.append(ids['id'])

                    processed_mails = None

                    values = (event["params"]["querystring"]["user_id"],)
                    mycursor.execute("SELECT * FROM mail_message where user_id = ?", values)
                    processed_mails = mycursor.fetchall()

                    processed_mailsD = {}

                    for each in processed_mails:
                        if not each['message_id'] in processed_mailsD:
                            processed_mailsD[each['message_id']] = []

                        processed_mailsD[each['message_id']].append(each)

                    processed_list = []

                    emails = []

                    if email_msges:
                        email_msges = set(email_msges)
                        email_msges = list(email_msges)

                        for em_msg in email_msges:

                            flag = False

                            mail_f = fetch_attachments(service, "me", em_msg)

                            if mail_f:

                                invoices = []

                                if processed_mailsD:

                                    time_taken = 0.00
                                    total = 0
                                    invoices = []

                                    if em_msg in processed_mailsD:

                                        mail_f['isReaded'] = "yes"

                                        for mail in processed_mailsD[em_msg]:

                                            if mail['invoice_no']:
                                                invoices.append(mail['invoice_no'])

                                            if mail['is_processed'] != 'y':
                                                mail_f['invoice_no'] = "Failed"

                                            if mail['is_processed'] == 'y' and mail['invoice_no'] and mail[
                                                'invoice_no'] != '' and mail['ocr_start'] and mail['ocr_end']:
                                                diff = mail['ocr_end'] - mail['ocr_start']
                                                time_taken += diff.total_seconds()
                                                total += 1
                                                    # pass
                                            flag = True

                                        invoices.sort()
                                        mail_f['invoice_no'] = invoices

                                        if time_taken > 0:
                                            time_taken = time_taken / total
                                            time_taken = format(time_taken, '.2f')

                                        mail_f['timetaken'] = time_taken

                                    if flag == True:
                                        emails.append(mail_f)
    

                                if flag == False:
                                    mail_f['isReaded'] = "no"
                                    mail_f['invoice_no'] = invoices
                                    emails.append(mail_f)

                        emails = sorted(emails, key=lambda i: i['dateobj'], reverse=True)

                        for each in emails:
                            # del each['dateobj']
                            if each['attachments']:
                                final_emails.append(each)
                        final_emails = sorted(final_emails, key=lambda i: i['dateobj'], reverse=True)

                return {
                   'statuscode': 200,
                    'body': json.loads(json.dumps(final_emails, default=str)),
                    # 'body1': json.loads(json.dumps(final_emails1, default=str)),
                    'noOfMails': noOfMails
                }

            else:
                mycursor.execute("delete from loggedin_users where userid = ?", user)
                mydb.commit()

    except NoRefreshTokenException as ex:
        
        print("NoRefreshTokenException")
        return {  
            'statuscode': 201,
            'body': ex.authorization_url
        }

    except CodeExchangeException as ex:
        print("CodeExchangeException")
        return {
            'statuscode': 201,
            'body': ex.authorization_url
        }

    finally:
        # return event
        mydb.close()
   
        
    # return response

# event = {'body-json': {}, 'params': {'path': {}, 'querystring': {'condn': '', 'pageno': '1', 'user_id': 'einvoiceportal@gmail.com', 'user_id2': 'einvoiceportal@elipo.awsapps.com'}, 'header': {'accept': 'application/json, text/plain, */*', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'en-US,en;q=0.9', 'Authorization': 'eyJraWQiOiJ1RXlLMTdnUjUzTVVMcXUrYkRsQUZ2NHRSUTR0VVM5KzM4NlwvZnpxMWorQT0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiI5NDkxOTNiMi1hZWQ2LTQxZGUtOTM2YS04MGRjMTEzNjUxNzIiLCJhdWQiOiIyNGJqZTRqdWQ4aDNmOHJzbmtraGcwYmx2MSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJldmVudF9pZCI6ImYyNWU5NTRjLTcxYWMtNDAzZS1iYjQzLWVjZTBiNjVjNDJkNCIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjQ4NjMwMzYyLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAuZXUtY2VudHJhbC0xLmFtYXpvbmF3cy5jb21cL2V1LWNlbnRyYWwtMV9QOXJubnFpTHUiLCJjb2duaXRvOnVzZXJuYW1lIjoiOTQ5MTkzYjItYWVkNi00MWRlLTkzNmEtODBkYzExMzY1MTcyIiwiZXhwIjoxNjQ4NjMzOTYyLCJpYXQiOjE2NDg2MzAzNjIsImVtYWlsIjoiZWludm9pY2Vwb3J0YWxAZ21haWwuY29tIn0.JQjW7FI2ignDEFxejRSLq88y18akd2MWPj0BSmZdS72w4e5Mfr1ErtF2_IrGhbyVpnPrFeJqcohOXKvJAauU4r9_uuvAosYLPX7qsrFSATgMTXd0wA8-78CpREcyrGACSeGGaDhhvOL71eJDICZ3V0Dp82g5NxW3LcxuOzWiRilmae_XjqZp0zTvmxNpH_1Xlz7f6z48Cv4vCqt1W3OMRtzS9H0jLPMiIeC3nCfFOatfEgo2XZsY6z7zbNRDqKOj5U_aLx4gIzIo4YVtdZkeXqS8C9D3AgB2jbg07kISyfL2ipCu8vzG411MwwLsw3FW3RHsZX1roxahVcofsS5NLg', 'Host': '7firau5x7b.execute-api.eu-central-1.amazonaws.com', 'origin': 'http://localhost:4200', 'referer': 'http://localhost:4200/', 'sec-ch-ua': '" Not A;Brand";v="99", "Chromium";v="99", "Google Chrome";v="99"', 'sec-ch-ua-mobile': '?0', 'sec-ch-ua-platform': '"Windows"', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'cross-site', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.82 Safari/537.36', 'X-Amzn-Trace-Id': 'Root=1-62441ec1-41878c5e22ae11fe17349603', 'X-Forwarded-For': '49.207.197.71', 'X-Forwarded-Port': '443', 'X-Forwarded-Proto': 'https'}}, 'stage-variables': {'schema': 'einvoice_db_portal', 'lambda_alias': 'dev', 'non_ocr_attachment': 'einvoice-attachments', 'notification_email': 'elipotest@gmail.com', 'ocr_bucket': 'textract-console-ap-southeast-1-b8779ae1-dd77-4d3c-a56d-443a5db', 'oauth_ret': 'https://7firau5x7b.execute-api.eu-central-1.amazonaws.com/einvoice-v1/gmail-s3', 'ocr_bucket_folder': 'old-dev/', 'bucket_gmail_credential': 'file-bucket-emp', 'secreat': 'test/einvoice/secret', 'clientsec_location': 'client_secret.json', 'attach_stage': 'dev'}, 'context': {'account-id': '', 'api-id': '7firau5x7b', 'api-key': '', 'authorizer-principal-id': '', 'caller': '', 'cognito-authentication-provider': '', 'cognito-authentication-type': '', 'cognito-identity-id': '', 'cognito-identity-pool-id': '', 'http-method': 'GET', 'stage': 'einvoice-v1', 'source-ip': '49.207.197.71', 'user': '', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.82 Safari/537.36', 'user-arn': '', 'request-id': '0821c386-1d2b-42a4-80aa-704299cad49c', 'resource-id': 'zz1525', 'resource-path': '/gmail-s3'}}

# context = ""
# responce = lambda_handler(event=event, context=context)

# pprint.pprint(responce)




    if 'Authorization' in event['params']['header'] :
       atoken =  event['params']['header']['Authorization']
    
    if atoken != '':
        flg = requests.get("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/getemail", headers={"Content-Type":"application/json", "Authorization":atoken})

    return json.loads(flg.text)['body']

bucket_name = None


# class FailedToUpload(Exception):
#     pass


# def get_stored_credentials(user_id):
#     s3 = boto3.client("s3")
#     # bucket_name = "file-bucket-emp"

#     try:
#         encoded_file = s3.get_object(Bucket=bucket_name, Key=ocr_bucket_folder + user_id)
#         creds = pickle.loads(encoded_file["Body"].read())
#         return creds

#     except Exception as excep:
#         creds = None
#         # print(excep)
#         return creds


# def build_service(credentials):
#     http = httplib2.Http()
#     http = credentials.authorize(http)
#     return build('gmail', 'v1', http=http)


# def fetch_attachments(service, user_id, msg_id, mail, mycursor):
#     try:
#         message = service.users().messages().get(userId=user_id, id=msg_id).execute()

#         print("rarararar")

#         s3 = boto3.client("s3")

#         files = []

#         for part in message['payload']['parts']:

#             if part['filename']:
#                 if 'data' in part['body']:
#                     data = part['body']['data']
#                 else:
#                     att_id = part['body']['attachmentId']
#                     # print(user_id,msg_id,att_id)
#                     att = service.users().messages().attachments().get(userId=user_id, messageId=msg_id,
#                                                                        id=att_id).execute()
#                     data = att['data']

#                     email_from = None
#                     for header in message["payload"]["headers"]:
#                         if header["name"] == "From":
#                             email_from = ((header["value"].split("<"))[1].split(">")[0])

#                     file_data = base64.urlsafe_b64decode(data.encode('UTF-8'))
#                     # file_data = '"'+file_data+'"'

#                     if file_data:
#                         curDateTime = datetime.now()
#                         # print(now)

#                         timestamp = "D" + str(datetime.timestamp(curDateTime))
#                         # print("timestamp =", timestamp)

#                         unwanted = [' ', '-', '(', ')', ',']

#                         fileKey = timestamp + "___"
#                         # + str(part["filename"])
#                         temp = ""

#                         for c in str(part["filename"]):
#                             if c == '.':
#                                 temp += c
#                             if c.isalnum():
#                                 temp += c

#                         temp = temp.lower()
#                         fileKey = fileKey + temp

#                         if ocr_bucket_name == "524145442725-elipo-ocr-bucket":
#                             fileKey = fileKey
#                         else:
#                             fileKey = ocr_bucket_folder + fileKey
                       
#                         s3.put_object(Bucket=ocr_bucket_name, Key=fileKey, Body=file_data)
#                         time.sleep(1) 

#                         files.append(fileKey)

#                         # name = msg_id + str(part["filename"])

#                         values = (mail, msg_id, email_from, 'y', fileKey)

#                         # print(values)

#                         mycursor.execute(
#                             "INSERT INTO mail_message (user_id, message_id, recieved_from, is_processed, filename) VALUES (%s, %s, %s, %s, %s)",
#                             values)

#                         del fileKey, values

#     except Exception as error:
#         print('An error occurred: ', error)
#         raise FailedToUpload(error)

#     finally:
#         pass

# #sql statements are working fine
# def einvoice_prosess_gmail_msg(event, context):
#     global dbScehma
#     dbScehma = ' DBADMIN '

#     try:
#     #     client = boto3.client(
#     # 'secretsmanager',
#     # region_name='eu-central-1',
#     # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
#     # aws_secret_access_key='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' )

#         # secret = event["stage-variables"]["secreat"]
#         global bucket_name
#         bucket_name = event["stage-variables"]["bucket_gmail_credential"]

#         global aws_bucket_name
#         aws_bucket_name = event["stage-variables"]["aws_mail_bucket"]

#         global ocr_bucket_name
#         ocr_bucket_name = event["stage-variables"]["ocr_bucket"]

#         global ocr_bucket_folder
#         ocr_bucket_folder = event["stage-variables"]["ocr_bucket_folder"]

#         # if ocr_bucket_name == "524145442725-elipo-ocr-bucket":
#         #     ocr_bucket_folder = ""

#         # resp = client.get_secret_value(
#         #     SecretId=secret
#         # )

#         # secretDict = json.loads(resp['SecretString'])

#         mydb = hdbcliConnect()

#         print(event)

#         user_id = event["params"]["querystring"]["user_id"]
        
#         msg_id = event["params"]["querystring"]["msg_id"]

#         if "attachments" in event["params"]["querystring"]:
#             ath_ids = event["params"]["querystring"]["attachments"]

#         try:
#             with mydb.cursor() as mycursor:
#                 defSchemaQuery = "set schema " + dbScehma
#                 mycursor.execute(defSchemaQuery)
#                 s3 = boto3.client('s3')
                
#                 mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
#                 on = mycursor.fetchone()
#                 if on['value1'] == 'on':
#                     chk = enable_xray(event)
#                     if chk['Enable'] == True:
#                         patch_all() 
#                         print(event)

#                 values = (user_id, msg_id)
#                 mycursor.execute("select * from mail_message where user_id = ? and message_id= ?", values)
#                 processed = mycursor.fetchone()

#                 if processed:
#                     return {
#                         'statusCode': 400,
#                         'body': json.dumps('Already Processed')
#                     }
                
#                 if user_id == 'einvoiceportal@gmail.com':
#                     creds = get_stored_credentials(user_id)
#                 # print(creds)

#                     if creds:
#                         service = build_service(credentials=creds)

#                         fetch_attachments(service, "me", msg_id, user_id, mycursor)

#                         mydb.commit()
#                 else:
#                     bucket = 'application-email'
#                     Key = msg_id
#                     data = s3.get_object(Bucket= bucket, Key=Key)
#                     contents = data['Body'].read().decode("utf-8")
#                     msg = email.message_from_string(contents)
#                     attachment = msg.get_payload()[1:]
                                        
#                     curDateTime = datetime.datetime.now()
#                     timestamp = "D" + str(datetime.datetime.timestamp(curDateTime))
#                     mycursor.execute("select filename from aws_mail_message where message_id = ?",msg_id)
#                     files = mycursor.fetchall()
#                     i = 0
#                     for value in attachment:
#                         fname = files[i]['filename']
#                         i = i + 1
#                         # filename = value.get('Content-Disposition')
#                         # ffname = filename.split('=')[1]
#                         # ffname = ffname.replace('"',"")
#                         # fname = timestamp + "___"
#                         # temp = ""
#                         # for c in str(ffname):
#                         #     if c == '.':
#                         #         temp += c
#                         #     if c.isalnum():
#                         #         temp += c
#                         # temp = temp.lower()
#                         # fname = fname + temp
#                         open('/tmp/attach.pdf', 'wb').write(value.get_payload(decode=True))
#                         try:
#                             with open("/tmp/attach.pdf","rb") as fi:
#                                 s3.upload_fileobj(fi, 's3-event-notify-s3bucket-11n8dhktkj0ci', 'old-dev' + '/' + fname)
#                                 print("Upload Successful")
                                
#                         except FileNotFoundError:
#                             print("The file was not found")
#                         finally:
#                             pass
#                     mydb.commit()    


#         finally:
#             mydb.close()

#             # att = service.users().messages().attachments().get(userId=user_id, messageId=msg_id,id=att_id).execute()

#     except FailedToUpload as ex:
#         return {
#             'statusCode': 500,
#             'body': json.dumps('fAILED to upload')
#         }

#     finally:
#         pass

#     return {
#         'statusCode': 200,
#         'body': json.dumps('OCR initiated it may take a moment')
#     }


    # if 'Authorization' in event['params']['header'] :
    #    atoken =  event['params']['header']['Authorization']
    
    # if atoken != '':
    #     flg = requests.get("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/getemail", headers={"Content-Type":"application/json", "Authorization":atoken})

    # return json.loads(flg.text)['body']
# event={'body-json': {}, 'params': {'path': {}, 'querystring': {'msg_id': 'k4vplns49fkhcmo2np5uq1o6mtb1agul366hs801', 'user_id': 'einvoiceportal@elipo.awsapps.com'}, 'header': {'accept': 'application/json, text/plain, */*', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'en-US,en;q=0.9', 'Authorization': 'eyJraWQiOiJ1RXlLMTdnUjUzTVVMcXUrYkRsQUZ2NHRSUTR0VVM5KzM4NlwvZnpxMWorQT0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiI5NDkxOTNiMi1hZWQ2LTQxZGUtOTM2YS04MGRjMTEzNjUxNzIiLCJhdWQiOiIyNGJqZTRqdWQ4aDNmOHJzbmtraGcwYmx2MSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJldmVudF9pZCI6ImYyMTMwZjBmLTA5OWYtNGRmYi1iMDQ0LWEwZjI1Yjg5MTQyZCIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjQ5MDY4NTY0LCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAuZXUtY2VudHJhbC0xLmFtYXpvbmF3cy5jb21cL2V1LWNlbnRyYWwtMV9QOXJubnFpTHUiLCJjb2duaXRvOnVzZXJuYW1lIjoiOTQ5MTkzYjItYWVkNi00MWRlLTkzNmEtODBkYzExMzY1MTcyIiwiZXhwIjoxNjQ5MDcyMTY0LCJpYXQiOjE2NDkwNjg1NjQsImVtYWlsIjoiZWludm9pY2Vwb3J0YWxAZ21haWwuY29tIn0.QtuJw1ZiKTn0gOIaYK362sDiJEFzUa_ihqE82doH_MNoXGCZc8QEV5RKNkEtgyoJ6Roz_ZxwbAOC-zFHvU_Qu6QCDJyehEZsbgnMZidQUJe4nI-jOJ_P3ZHPX3BxtpgJcDTlTyH50slJSMkYK7U4nn9cDLgy8kQC0sU2lDkdMdaMyBTh5-lH8doysKW0xIC9i9FBeqli-yZHKsFbGe_cZp-sWaMuK4VI2zH2U4-cfvh4ZgbeJaSIl3GJ6XtQdmw3PE1HgLMCtI51a9ddGXrDgCrP7YvcJzLRYrtJPez03nNeUanTIUpE-fXPHXrRXcnl5mko32EIUVPFyQENXacDNg', 'content-type': 'application/json', 'Host': '7firau5x7b.execute-api.eu-central-1.amazonaws.com', 'origin': 'http://localhost:4200', 'referer': 'http://localhost:4200/', 'sec-ch-ua': '" Not A;Brand";v="99", "Chromium";v="99", "Google Chrome";v="99"', 'sec-ch-ua-mobile': '?0', 'sec-ch-ua-platform': '"Windows"', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'cross-site', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.84 Safari/537.36', 'X-Amzn-Trace-Id': 'Root=1-624acc27-7881d96a4d7aaf6d31dfc94b', 'X-Forwarded-For': '223.186.200.147', 'X-Forwarded-Port': '443', 'X-Forwarded-Proto': 'https'}}, 'stage-variables': {'schema': 'einvoice_db_portal', 'aws_mail_bucket':'s3-event-notify-s3bucket-11n8dhktkj0ci','lambda_alias': 'dev', 'non_ocr_attachment': 'einvoice-attachments', 'notification_email': 'elipotest@gmail.com', 'ocr_bucket': 'textract-console-ap-southeast-1-b8779ae1-dd77-4d3c-a56d-443a5db', 'oauth_ret': 'https://7firau5x7b.execute-api.eu-central-1.amazonaws.com/einvoice-v1/gmail-s3', 'ocr_bucket_folder': 'old-dev/', 'bucket_gmail_credential': 'file-bucket-emp', 'secreat': 'test/einvoice/secret', 'clientsec_location': 'client_secret.json', 'attach_stage': 'dev'}, 'context': {'account-id': '', 'api-id': '7firau5x7b', 'api-key': '', 'authorizer-principal-id': '', 'caller': '', 'cognito-authentication-provider': '', 'cognito-authentication-type': '', 'cognito-identity-id': '', 'cognito-identity-pool-id': '', 'http-method': 'POST', 'stage': 'einvoice-v1', 'source-ip': '223.186.200.147', 'user': '', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.84 Safari/537.36', 'user-arn': '', 'request-id': '0c86b6e0-5699-41ac-99ed-7e447c780fc4', 'resource-id': 'zz1525', 'resource-path': '/gmail-s3'}}
# print(einvoice_prosess_gmail_msg(event,""))

#event not found
def getGstinDetails(event, context):
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='eu-central-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )

    # secret = event["stage-variables"]["secreat"]

    # resp = client.get_secret_value(
    #     SecretId= secret
    # )  

    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()

    body = {}

    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
            on = mycursor.fetchone()
            on = convertValuesTodict(mycursor.description, on)
            for row in on:
                if row['value1'] == 'on':
                    chk = enable_xray(event)
                    if chk['Enable'] == True:
                        patch_all() 
                        print(event)
            
            if "gstin" in event["params"]["querystring"] and "gst_treatment" in event["params"]["querystring"]:
            
                gstin = event["params"]["querystring"]["gstin"]
                gst_treatment = event["params"]["querystring"]["gst_treatment"]
                
                values = (gstin[0:2],)
                mycursor.execute("SELECT * FROM  state_code WHERE gstcode = ?", values)
                detail = mycursor.fetchone()
                detail = convertValuesTodict(mycursor.description, detail)
                detail = detail[0]
                if detail:
                    body = {
                        "state" : detail['state'],
                        "state_code" : detail['state_code'],
                        "gst_treatment": "",
                        "gst_per": ""
                    }
                    
                gst = gstin[0:2]
                
                if gst_treatment == "registered_business":
                    
                    mycursor.execute("SELECT value2 FROM  dropdown WHERE drop_key = 'my-company-details' and value1 = 'gstin'")
                    gstin = mycursor.fetchone()
                    gstin = convertValuesTodict(mycursor.description, gstin)
                    gstin = gstin[0]
                    if gst == gstin["value2"][0:2] or gst == '35' or gst == '04' or gst == '26' or gst == '28' or gst == '97':
                        body["gst_treatment"] = gst_treatment
                        body["gst_per"] = "gst"
                    
                    else:
                        body["gst_treatment"] = gst_treatment
                        body["gst_per"] = "igst"
                
                elif gst_treatment == "Special-Economic-Zone":
                    body["gst_treatment"] = gst_treatment
                    body["gst_per"] = "igst"
            
            elif "vendor_no" in event["params"]["querystring"]:
                vendor_no = event["params"]["querystring"]["vendor_no"]
                
                mycursor.execute("select gstin_uin from  vendor_master where vendor_no = ?", vendor_no)
                gstin_uin = mycursor.fetchone()
                gstin_uin = convertValuesTodict(mycursor.description, gstin_uin)
                gstin_uin = gstin_uin[0]
                state_code = gstin_uin["gstin_uin"][0:2]
                
                if state_code == '35' or state_code == '4' or state_code == '26' or state_code == '38' or state_code == '97':
                    body = 'y'
                    
                else:
                    body = 'n'
                
    except Exception as e:
        return {
            'statusCode': 500,
            'body': json.dumps("Internal Failure")
        }
        
    finally:
        mydb.close()
        
    return {
        'statusCode': 200,
        'body': body
    }

def enable_xray(event):
    if 'Authorization' in event['params']['header'] :
       atoken =  event['params']['header']['Authorization']
    
    if atoken != '':
        flg = requests.get("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/getemail", headers={"Content-Type":"application/json", "Authorization":atoken})

    return json.loads(flg.text)['body']

#sql statements working fine
def getInvoiceCount(event, context):
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='eu-central-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )
    # secret = event["stage-variables"]["secreat"]
    # resp = client.get_secret_value(
    #     SecretId= secret
    # ) 
    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()

    user_settings = {}
    print(event)
    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
            on = mycursor.fetchone()
            on = convertValuesTodict(mycursor.description, on)
            for row in on:
                if row['value1'] == 'on':
                    chk = enable_xray(event)
                    if chk['Enable'] == True:
                        patch_all() 
                        print(event)
            
            mycursor.execute("SELECT * FROM elipo_setting")
            settings = mycursor.fetchall()

            if settings:
                for each in settings:
                    user_settings[each['key_name']] = each['value1']
                del settings
            
            if "userid" in event["params"]["querystring"]:
                email = event["params"]["querystring"]["userid"]
            
            if "from_cockpit" in event["params"]["querystring"]:
                flag = event["params"]["querystring"]["from_cockpit"]
                
                userBased = 'y'
                if "userBased" in event["params"]["querystring"]:
                    userBased = event["params"]["querystring"]["userBased"]
                    
                total_count = 0
                countrec = {}
                
                mycursor.execute("select member_id, group_id, (fs_name||' '||ls_name) as member_name from member where email = ?", email)
                member = mycursor.fetchone()
                
                if flag == 'y':
                    if user_settings["app_assignment"] == 'on' and userBased == 'y':
                        sqlQuery = "select count(in_status) as invoice_count, in_status " \
                            "from invoice_header " \
                            "where invoice_no in ( " \
                        	"	select invoice_no " \
                        	"		from assignment " \
                            "       where ( isgroup = 'y' and app = ? ) or ( isgroup = 'n' and app = ? ) ) " \
                            "group by in_status"
                        values = ( member["group_id"], member["member_id"] )
                        
                        mycursor.execute(sqlQuery,values)
                        
                    else:
                        mycursor.execute("select count(in_status) as invoice_count, in_status from invoice_header group by in_status")
                    
                    for each in mycursor:
                        if each and each['in_status']!= None:
                            total_count = total_count + int(each["invoice_count"])
                            countrec[each['in_status']] = each['invoice_count']
                    
                    if "" in countrec:
                        del countrec['']
                    
                    if "new" not in countrec:
                        countrec["new"] = 0
                        
                    if "draft" not in countrec:
                        countrec["draft"] = 0
                        
                    if "inapproval" not in countrec:
                        countrec["inapproval"] = 0
                        
                    if "tosap" not in countrec:
                        countrec["tosap"] = 0
                        
                    if "rejected" not in countrec:
                        countrec["rejected"] = 0
                        
                    countrec["total_count"] = total_count
                        
                else:
                    mycursor.execute("select count(sup_status) as invoice_count, sup_status from invoice_header where from_supplier = 'y' group by sup_status")
                    
                    for each in mycursor:
                        total_count = total_count + int(each["invoice_count"])
                        countrec[each['sup_status']] = each['invoice_count']
                    
                    if "" in countrec:
                        del countrec['']
                        
                    if None in countrec:
                        del countrec[None]
                        
                    if "draft" not in countrec:
                        countrec["draft"] = 0
                        
                    if "inapproval" not in countrec:
                        countrec["inapproval"] = 0
                        
                    if "approved" not in countrec:
                        countrec["approved"] = 0
                        
                    if "rejected" not in countrec:
                        countrec["rejected"] = 0
                        
                    countrec["total_count"] = total_count
    
    except:
        return {
            'statuscode': 500,
            'body': json.dumps("Internal Failure!")
        }
    
    finally:
        mydb.close()
    
    return {
        'statuscode': 200,
        'body': countrec
    }


def enable_xray(event):
    if 'Authorization' in event['params']['header'] :
       atoken =  event['params']['header']['Authorization']
    
    if atoken != '':
        flg = requests.get("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/getemail", headers={"Content-Type":"application/json", "Authorization":atoken})

    return json.loads(flg.text)['body']

state = ""
# CLIENTSECRETS_LOCATION = 'client_secret.json'
# REDIRECT_URI = 'https://7firau5x7b.execute-api.eu-central-1.amazonaws.com/einvoice-v1/gmail-s3'
SCOPES = [
    'https://www.googleapis.com/auth/gmail.readonly',
    'https://www.googleapis.com/auth/userinfo.email',
    'https://www.googleapis.com/auth/userinfo.profile',
    'https://www.googleapis.com/auth/gmail.send'
    # 'https://www.googleapis.com/auth/gmail.modify',
    # 'https://www.googleapis.com/auth/gmail.compose',
    # 'https://www.googleapis.com/auth/gmail.addons.current.action.compose'
    # Add other requested scopes.
]


class GetCredentialsException(Exception):
    """Error raised when an error occurred while retrieving credentials.

    Attributes:
      authorization_url: Authorization URL to redirect the user to in order to
                         request offline access.
    """

    def __init__(self, authorization_url):
        """Construct a GetCredentialsException."""
        self.authorization_url = authorization_url


class CodeExchangeException(GetCredentialsException):
    """Error raised when a code exchange has failed."""


class NoRefreshTokenException(GetCredentialsException):
    """Error raised when no refresh token has been found."""


class UnknownExceotion(Exception):
    """"""


class NoUserIdException(Exception):
    """Error raised when no user ID could be retrieved."""


class NoStoredCredentials(Exception):
    """"""



#event not found
def setNotificationEmail(event, context):
    
    
    def get_stored_credentials(user_id):
        try:

            s3 = boto3.client("s3",region_name='eu-central-1',
                            aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
                            aws_secret_access_key='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')
            encoded_file = s3.get_object(Bucket=bucket_name, Key=bucket_folder+user_id)
            creds = pickle.loads(encoded_file["Body"].read())
            return creds
        except Exception as excep:
            creds = None
            raise NoUserIdException(excep)


    def get_authorization_url(user_id=None, state=None):
        # print("ok")
        flow = flow_from_clientsecrets(CLIENTSECRETS_LOCATION, ' '.join(SCOPES))
        # print("ok")
        flow.params['access_type'] = 'offline'
        flow.params['approval_prompt'] = 'force'
        flow.params['login_hint'] = user_id
        flow.params['state'] = state
        return flow.step1_get_authorize_url(redirect_uri=REDIRECT_URI)


    def get_credentials(state=None, user_id=None):

        try:
            if user_id:
                credentials = get_stored_credentials(user_id)
                if credentials and credentials.refresh_token is not None:
                    return credentials
                else:
                    False

        except NoUserIdException:
            logging.error('No user ID could be retrieved.')
            # No refresh token has been retrieved.
            authorization_url = get_authorization_url(user_id, state)
            raise NoRefreshTokenException(authorization_url)


    def build_service(credentials):
        http = httplib2.Http()
        http = credentials.authorize(http)
        return build('gmail', 'v1', http=http)
        global dbScehma 
        dbScehma = ' DBADMIN  '

    # client = boto3.client(
    # 'secretsmanager',
    # region_name='eu-central-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )

    # secret = event["stage-variables"]["secreat"]

    global bucket_name
    bucket_name = event["stage-variables"]["cred_bucket"]
    # bucket_name = "file-bucket-emp"
    
    global bucket_folder
    bucket_folder = event["stage-variables"]["ocr_bucket_folder"]

    global REDIRECT_URI
    # REDIRECT_URI = event["stage-variables"]["oauth_ret"]
    REDIRECT_URI = "https://7firau5x7b.execute-api.eu-central-1.amazonaws.com/einvoice-v1/gmail-s3"

    global CLIENTSECRETS_LOCATION
    # CLIENTSECRETS_LOCATION = event["stage-variables"]["clientsec_location"]
    CLIENTSECRETS_LOCATION = "client_secret.json"

    # resp = client.get_secret_value(
    #     SecretId=secret
    # )

    # secretDict = json.loads(resp['SecretString'])
    
    mydb = hdbcliConnect()
    state = "hole_access_check"   

    try:
        global dbScehma 
        dbScehma = ' DBADMIN '
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
            on = mycursor.fetchone()
            if on['value1'] == 'on':
                chk = enable_xray(event)
                if chk['Enable'] == True:
                    patch_all() 
                    print(event)

            user = event["params"]["querystring"]["user_id"]
            
            mail = None
            cred = None
            
            mycursor.execute("SELECT * FROM elipo_setting where key_name = 'notification-mail'")
            mail = mycursor.fetchone()

            if "notification_id" not in event["params"]["querystring"]:

                if mail:
                    cred = get_credentials(user_id=mail['value1'], state=state)
                    if cred:
                        return {
                            'statuscode': 200,
                            'body': {
                                'msg': "Notification mail is already added",
                                'notification_id': mail['value1']
                            }
                        }
                    else:
                        return {
                            'statuscode': 205,
                            'body': {
                                'msg': "Notification mail is not added",
                                'notification_id': ""
                            }
                        }

            else:
                notification_id = event["params"]["querystring"]["notification_id"]
                
                if mail['value1'] == notification_id:

                    cred = get_credentials(user_id=notification_id, state=state)
    
                    if cred:
                        return {
                            'statuscode': 200,
                            'body': json.dumps("Notification mail is already added")
                        }
                    else:
                        cred = get_credentials(user_id=notification_id, state=state)
                else:
                    cred = get_credentials(user_id=notification_id, state=state)
                    



    except NoRefreshTokenException as ex:
        print("NoRefreshTokenException")
        return {
            'statuscode': 201,
            'body': ex.authorization_url
        }

    except CodeExchangeException as ex:
        print("CodeExchangeException")
        return {
            'statuscode': 201,
            'body': ex.authorization_url
        }

    finally:
        mydb.close()
        pass
    
    if 'Authorization' in event['params']['header'] :
       atoken =  event['params']['header']['Authorization']
    
    if atoken != '':
        flg = requests.get("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/getemail", headers={"Content-Type":"application/json", "Authorization":atoken})

    return json.loads(flg.text)['body']


# # event = {
#     "params":{
#         "querystring":{
#             "user_id":"rohit.wavhal@peolsolutions.com",
#             'pageno': 2
#             # "code":"4/2wGhDmMCcFQEMu2t_Hw0Z-4vq4iMhlAs7K_8L5V1gGUMHLiatVhgr_zABeFtT0UoReco5igBPiRX0A1-TGqqjxo"
#         }
#     }
# }
# context = ""
# responce = setNotificationEmail(event=event, context=context)
# print(responce)

def getOcrDataSupplier(event, context):
    
    print(event)
    
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='eu-central-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )
    # secret = event["stage-variables"]["secreat"]
    # resp = client.get_secret_value(
    #     SecretId= secret
    # ) 
    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()
    
    records = {}

    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
            on = mycursor.fetchone()
            on = convertValuesTodict(mycursor.description, on)
            on = on[0]
            if on['value1'] == 'on':
                chk = enable_xray(event)
                if chk['Enable'] == True:
                    patch_all()
            
            file_name = event["params"]["querystring"]["file_name"]
            mycursor.execute("select * from mail_message where filename = ?", file_name)
            data = mycursor.fetchone()
            
            if data:
                if data["invoice_no"]:
                    
                    items = []
                    invoice_files = []
                    
                    mycursor.execute("select attach_id, file_id, name, mime_type, file_link from file_storage where file_id = ?", data["invoice_no"])
                    for row in mycursor:
                        record = {
                            'attach_id': row['attach_id'],    
                            "invoice_id" : row["file_id"],
                            "file_name" : row["name"],
                            "mime_type" : row["mime_type"],
                            "file_link" : row["file_link"]
                        }
                        invoice_files.append(record)
                    
                    values = (data["invoice_no"],)
                    # mycursor.execute("select * from invoice_header where invoice_no = ? and from_supplier = 'y'", values)
                    mycursor.execute("select * from invoice_header where invoice_no = ?", values)
                    invoice_header = mycursor.fetchone()
                    
                    if invoice_header:
                        records = {
                            "invoice_no": data["invoice_no"],
                            "user_invoice_id": invoice_header["user_invoice_id"],
                            "invoice_no" :invoice_header["invoice_no"],
                            "in_status" : invoice_header["sup_status"],
                            "ref_po_num" : invoice_header["ref_po_num"],
                            "company_code" : invoice_header["company_code"],
                            "payment_method" : invoice_header["payment_method"],
                            "invoice_date" : str(invoice_header["invoice_date"]),
                            "baseline_date" : str(invoice_header["baseline_date"]),
                            "amount" : invoice_header["amount"],
                            "currency" : invoice_header["currency"],
                            "gl_account" : invoice_header["gl_account"],
                            "business_area" : invoice_header["business_area"],
                            "supplier_id" : invoice_header["supplier_id"],
                            "supplier_name" : invoice_header["supplier_name"],
                            "supplier_comments": invoice_header['supplier_comments'],
                            "taxable_amount" : invoice_header["taxable_amount"],
                            "discount_per" : invoice_header["discount_per"],
                            "total_discount_amount" : invoice_header["total_discount_amount"],
                            "is_igst" : invoice_header["is_igst"],
                            "tax_per" : invoice_header["tax_per"],
                            "cgst_tot_amt": invoice_header["cgst_tot_amt"],
                            "sgst_tot_amt": invoice_header["sgst_tot_amt"],
    	                    "igst_tot_amt": invoice_header["igst_tot_amt"],
                            "tds_per": invoice_header["tds_per"],
                            "tds_tot_amt": invoice_header["tds_tot_amt"],
                            "payment_terms" :invoice_header["payment_terms"],
                            "adjustment" : invoice_header["adjustment"],
                            "tcs" : invoice_header["tcs"],
                            "npo": invoice_header["npo"],
                            'invoice_files' : invoice_files,
                            "items" : items,
                            "gstin": invoice_header['gstin'],
                            "document_type": invoice_header["document_type"],
                            "irn":""  ,
                            "jurisdiction": invoice_header['jurisdiction_code']
                        }
                    
                        mycursor.execute("select * from invoice_item where invoice_no = ?", values)
                        
                        for row in mycursor:
                            record = {
                                "item_no":row["item_no"],
                                "material":row["material"],
                                "material_desc":row["material_desc"],
                                "quantity":row["quantity"],
                                "unit":row["unit"],
                                "amount":row["amount"],
                                "currency": row["currency"],
                                "amt_per_unit" : row["amt_per_unit"],
                                "cgst_per": row["cgst_per"],
                                "cgst_amount":row["cgst_amount"],
                                "tax_code":row["tax_code"],
                                "ref_po_no":row["ref_po_no"],
                                "plant":row["plant"],
                                "discount":row["discount"],
                                "discount_amount" : row["discount_amount"],
                                "gross_amount" : row["gross_amount"],
                                "sgst_per": row["sgst_per"],
                                "sgst_amount": row["sgst_amount"],
                                "igst_per": row["igst_per"],
                                "igst_amount": row["igst_amount"],
                                "taxable_amount": row["taxable_amount"],
                                "tax_value_amount": row["tax_value_amount"],
                                "gst_per": row["gst_per"],
                                "hsn_code": row["hsn_code"]       
                            }
                            items.append(record)
                            
                        records["items"] = items
                    
                else:
                    return {
                        'statuscode': 201,
                        'body': json.dumps("OCR in process. Wait for sometime!")
                    }
            
    except:
        return {
            'statuscode': 500,
            'body': json.dumps("Internal Error")
        }
            
    finally:
        mydb.close()
        
    return {
        'statuscode': 200,
        'body': records
    }

    if 'Authorization' in event['params']['header'] :
       atoken =  event['params']['header']['Authorization']
    
    if atoken != '':
        flg = requests.get("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/getemail", headers={"Content-Type":"application/json", "Authorization":atoken})

    return json.loads(flg.text)['body']

#event not found
def deleteOcrLabel(event, context):
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='eu-central-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )
    # secret = event["stage-variables"]["secreat"]
    # resp = client.get_secret_value(
    #     SecretId=secret
    # )
    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()

    try:
        with mydb.cursor() as mycursor:
            
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
            on = mycursor.fetchone()
            if on['value1'] == 'on':
                chk = enable_xray(event)
                if chk['Enable'] == True:
                    patch_all() 
                    print(event)

            label_id = event["params"]["querystring"]['label_id']

            values = (label_id,)
            mycursor.execute("select * FROM ocr_label WHERE label_id = ?", values)
            
            header = mycursor.fetchone()
            
            mycursor.execute("DELETE FROM ocr_label WHERE label_id = ?", values)
            
            if header:
                ifheader = header['label_for'].split("-")
                
                if ifheader[0] == "header":
                    
                    values = ("main-header-labels", header['value1'])
                    mycursor.execute("DELETE FROM ocr_label WHERE label_for = ? and value1 = ?", values)
            
                
            mydb.commit()      

    except:
        mydb.rollback()
        return {
            'statuscode': 500,
            'body': json.dumps("Interal Error")
        }     

    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': json.dumps("Label Deleted")
    }

def enable_xray(event):
    if 'Authorization' in event['params']['header'] :
       atoken =  event['params']['header']['Authorization']
    
    if atoken != '':
        flg = requests.get("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/getemail", headers={"Content-Type":"application/json", "Authorization":atoken})

    return json.loads(flg.text)['body']

#event not found
def getOcrLabels(event, context):
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='eu-central-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )
    # secret = event["stage-variables"]["secreat"]
    # resp = client.get_secret_value(
    #     SecretId=secret
    # )
    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()

    records = []

    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
            on = mycursor.fetchone()
            on = convertValuesTodict(mycursor.description, on)
            for row in on:
                if row['value1'] == 'on':
                    chk = enable_xray(event)
                    if chk['Enable'] == True:
                        patch_all() 
                        print(event)

            label_name = event["params"]["querystring"]['label_name']
            userid = event["params"]["querystring"]['userid']
            values = (label_name,)

            mycursor.execute('select * from ocr_label where label_for = ?', values)
            labels = mycursor.fetchall()

            if labels:
                for each in labels:
                    records.append({"label_id":each['label_id'],"label": each['value1']})

    except:
        mydb.rollback()
        return {
            'statuscode': 500,
            'body': records
        }

    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': records
    }

# event = {
#   "params" : {
#       "querystring" : {
#           "user_name": "einvoice_portal@gmail.com",
#           "label_name" : "header-gstin"
#       }
#   },
#   'stage-variables':{
#       'secreat': 'test/einvoice/secret'
#   }
# }
# context = ""

# print(lambda_handler(event,context))

def enable_xray(event):
    if 'Authorization' in event['params']['header'] :
       atoken =  event['params']['header']['Authorization']
    
    if atoken != '':
        flg = requests.get("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/getemail", headers={"Content-Type":"application/json", "Authorization":atoken})

    return json.loads(flg.text)['body']

#ocr_label table not yet created
def patchOcrLabels(event, context):
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='eu-central-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )
    # secret = event["stage-variables"]["secreat"]
    # resp = client.get_secret_value(
    #     SecretId=secret
    # )
    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()

    msg = "Updated Successfully!"
    statuscode = 200

    try:
        print(event)
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
            on = mycursor.fetchone()
            if on['value1'] == 'on':
                chk = enable_xray(event)
                if chk['Enable'] == True:
                    patch_all() 
                    print(event)

            if 'labels' in event["body-json"]:

                label_name = event["params"]["querystring"]['label_name']
                labels = event['body-json']['labels']

                values = (label_name)
                mycursor.execute("DELETE FROM ocr_label WHERE label_for = ?", values)

                values = []
                for each in labels:
                    values.append(
                        (label_name, each)
                    )

                mycursor.executemany('insert into ocr_label (label_for, value1) values (?, ?)', values)
                
                mydb.commit()     
            
            else:
                msg = 'Missing required body parameters: [labels]'
                statuscode = 400

    except:
        mydb.rollback()
        msg = "Interal Error"
        return {
            'statuscode': 500,
            'body': msg
        }

    finally:
        mydb.close()

    return {
        'statuscode': statuscode,
        'body': msg
    }
# event = {'body-json': {'labels': ['P.O.NO', 'Serial No. of Invoice', "Buyer's Order No.", 'Customer PO', 'P.O. Number', 'po', 'purchase order', 'purchase order number', 'Ref. No.', 'Reference', 'reference po']}, 'params': {'path': {}, 'querystring': {'label_name': 'header-po_no', 'user_name': 'einvoiceportal@gmail.com'}, 'header': {'accept': 'application/json, text/plain, */*', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'en-US,en;q=0.9', 'Authorization': 'eyJraWQiOiJ1RXlLMTdnUjUzTVVMcXUrYkRsQUZ2NHRSUTR0VVM5KzM4NlwvZnpxMWorQT0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiI5NDkxOTNiMi1hZWQ2LTQxZGUtOTM2YS04MGRjMTEzNjUxNzIiLCJhdWQiOiIyNGJqZTRqdWQ4aDNmOHJzbmtraGcwYmx2MSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJldmVudF9pZCI6ImIxYWI4Njc4LTQ5ZmQtNGIyOC05Y2Q4LTBhOGVmNTFmNGM4NiIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjY5Nzg2NTg1LCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAuZXUtY2VudHJhbC0xLmFtYXpvbmF3cy5jb21cL2V1LWNlbnRyYWwtMV9QOXJubnFpTHUiLCJjb2duaXRvOnVzZXJuYW1lIjoiOTQ5MTkzYjItYWVkNi00MWRlLTkzNmEtODBkYzExMzY1MTcyIiwiZXhwIjoxNjY5NzkwMTg1LCJpYXQiOjE2Njk3ODY1ODUsImVtYWlsIjoiZWludm9pY2Vwb3J0YWxAZ21haWwuY29tIn0.ZN9Q8JmNQ8E-0QK17gFmJmoAPyUW3WWQGcQzaMeiwt6Gy80MgqGVWxsuFJr7Ybji-O4XhBbjoa5WcYXCASLtfDGg8H6EWaydBDEujVcgPN7P7o6tCnIxdY7Hdu2fLAu91OmJMKMgyTchs5zWAt8eNFDWIpw6C1vUpoo7nGnyWMk33uWiHJ4TWgruStBFjMq5363sXemge2EWqej-RNWXp3y7ajZryxCPWsV-iaKgVe5SSVCyO9NTurAsNqbWRheKXGfEZToeDL3h6fj8Nr_yflLA0110b0b5eUHJcVDphN_YU5xhmlRRb3_sQhIusmIKpLPNq-eoW7Hm6Vz-1b6Amw', 'content-type': 'application/json', 'Host': '7firau5x7b.execute-api.eu-central-1.amazonaws.com', 'origin': 'https://ywi7o0pxhc.execute-api.eu-central-1.amazonaws.com', 'referer': 'https://ywi7o0pxhc.execute-api.eu-central-1.amazonaws.com/', 'sec-ch-ua': '"Google Chrome";v="107", "Chromium";v="107", "Not=A?Brand";v="24"', 'sec-ch-ua-mobile': '?0', 'sec-ch-ua-platform': '"Windows"', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'same-site', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 'X-Amzn-Trace-Id': 'Root=1-6386f9b8-79a758a120d4e64a0b006dfb', 'X-Forwarded-For': '49.206.132.233', 'X-Forwarded-Port': '443', 'X-Forwarded-Proto': 'https'}}, 'stage-variables': {'schema': 'einvoice_db_portal', 'non_ocr_attachment': 'einvoice-attachments', 'lambda_alias': 'dev', 'aws_mail_bucket': 'application-email', 'notification_email': 'elipotest@gmail.com', 'ocr_bucket': 'textract-console-ap-southeast-1-b8779ae1-dd77-4d3c-a56d-443a5db', 'ocr_bucket_folder': 'old-dev/', 'oauth_ret': 'https://7firau5x7b.execute-api.eu-central-1.amazonaws.com/einvoice-v1/gmail-s3', 'bucket_gmail_credential': 'file-bucket-emp', 'clientsec_location': 'client_secret.json', 'secreat': 'test/einvoice/secret', 'attach_stage': 'dev'}, 'context': {'account-id': '', 'api-id': '7firau5x7b', 'api-key': '', 'authorizer-principal-id': '', 'caller': '', 'cognito-authentication-provider': '', 'cognito-authentication-type': '', 'cognito-identity-id': '', 'cognito-identity-pool-id': '', 'http-method': 'PATCH', 'stage': 'einvoice-v1', 'source-ip': '49.206.132.233', 'user': '', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 'user-arn': '', 'request-id': '537500db-9540-4a92-970b-072a6f79a6b7', 'resource-id': '42gtbw', 'resource-path': '/ocr-lable'}}
# print(patchOcrLabels(event , ' '))
# # event = {
#   "params" : {
#       "querystring" : {
#           "user_name": "einvoice_portal@gmail.com",
#           "label_name" : "header-gstin"
#       }
#   },
#   'stage-variables':{
#       'secreat': 'test/einvoice/secret'
#   },
#   "body-json":{
#       "labels": ['a','b','c','d','e','f','g']
#   }
# }
# context = ""

# print(lambda_handler(event,context))

def enable_xray(event):
    if 'Authorization' in event['params']['header'] :
       atoken =  event['params']['header']['Authorization']
    
    if atoken != '':
        flg = requests.get("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/getemail", headers={"Content-Type":"application/json", "Authorization":atoken})

    return json.loads(flg.text)['body']

#event not found
def postOcrLabel(event, context):
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='eu-central-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )
    # secret = event["stage-variables"]["secreat"]
    # resp = client.get_secret_value(
    #     SecretId=secret
    # )
    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()
    
    try:
        with mydb.cursor() as mycursor:
            
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
            on = mycursor.fetchone()
            if on['value1'] == 'on':
                chk = enable_xray(event)
                if chk['Enable'] == True:
                    patch_all() 
                    print(event)

            label_name = event["params"]["querystring"]['label_name']
            label = event["params"]["querystring"]['label']

            values = (label_name, label)
            mycursor.execute('insert into ocr_label (label_for, value1) values (?, ?)', values)
            
            header = label_name.split("-")
              
            if header[0] == "header":
                values = ("main-header-labels", label)
                mycursor.execute('insert into ocr_label (label_for, value1) values (?, ?)', values)
                
            mydb.commit()      

    except:
        mydb.rollback()
        return {
            'statuscode': 500,
            'body': json.dumps("Interal Error")
        }

    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': json.dumps("Label Added")
    }

    if 'Authorization' in event['params']['header'] :
       atoken =  event['params']['header']['Authorization']
    
    if atoken != '':
        flg = requests.get("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/getemail", headers={"Content-Type":"application/json", "Authorization":atoken})

    return json.loads(flg.text)['body']

def find_accuracy(header_accuracy , item_accuracy , mycursor):

    header_fields = []
    item_fields = []
    accurate_header_fields = 0
    header_acc = 0.0
    accurate_item_fields = 0
    item_acc = 0.0
    individual_item_acc = []

    # print(header_accuracy , item_accuracy[0])
    ocr_accurcy_feilds = {}
    ocr_accurcy_feilds_item = {}
    total_accurcy_fields = 0
    total_accurcy_fields_item = 0

    try :
        mycursor.execute("select * from elipo_setting where key_name = 'ocr_accuracy'")
        ocr_field_accurcy = mycursor.fetchall()

        for each in ocr_field_accurcy:
            if each['value2'] == "on":
                total_accurcy_fields += 1
                ocr_accurcy_feilds[each["value1"]] = each["value2"]
                header_fields.append(each["value1"])
        del ocr_field_accurcy

        for hf in header_fields:
            if hf == 'document_type':
                hf = 'doc_type'
            if(header_accuracy[hf] != NULL and header_accuracy[hf] != '' and header_accuracy[hf] != 0.0 and header_accuracy[hf] != None ):
                accurate_header_fields += 1
        header_acc =  ( accurate_header_fields / total_accurcy_fields ) * 100
        # print(header_acc)





        mycursor.execute("select * from elipo_setting where key_name = 'ocr_accuracy_item'")
        ocr_field_accurcy_item = mycursor.fetchall()

        for each in ocr_field_accurcy_item:
            if each['value2'] == "on":
                total_accurcy_fields_item += 1
                ocr_accurcy_feilds_item[each["value1"]] = each["value2"]
                item_fields.append(each["value1"])
        del ocr_field_accurcy_item

        for each in item_accuracy :
            for it_f in item_fields :
                if it_f == 'gross_amount':
                    it_f = 'amount'
                if ( each[it_f] != NULL and each[it_f] != ''  and each[it_f] != 0.0 and each[it_f] != None ):
                    accurate_item_fields += 1
            item_acc = (accurate_item_fields / total_accurcy_fields_item) * 100
            individual_item_acc.append(item_acc)
            accurate_item_fields = 0 
            item_acc = 0.0 
        final_item_accr = sum(individual_item_acc)/len(item_accuracy)
        # print(final_item_accr)

        overall = ( header_acc + final_item_accr ) / 2 

        return header_acc ,final_item_accr, round(overall)

    except :
        return 0,0,0

           



# def get_stored_credentials(user_id):
#     try:
#         s3 = boto3.client("s3")
#         encoded_file = s3.get_object(Bucket=elipo_bucket, Key=user_id)
#         creds = pickle.loads(encoded_file["Body"].read())
#         return creds
#     except Exception as excep:
#         creds = None
#         # print(str(excep))
#         # raise NoUserIdException(excep)


# def create_message(sender, to, subject, message_text, cc):
#     message = email.mime.text.MIMEText(message_text, 'html')

#     message['to'] = to
#     message['from'] = sender
#     message['subject'] = subject
#     message['cc'] = cc

#     encoded = base64.urlsafe_b64encode(message.as_string().encode("utf-8"))
#     return {'raw': encoded.decode("utf-8")}


# def send_message(service, user_id, message):
#     try:
#         message = (service.users().messages().send(userId=user_id, body=message).execute())
#         # print("Message Id: ", message['id'])
#         return message
#     # except errors.HttpError as error:
#     except Exception as error:
#         print("An error occurred: ", error)


# def build_service(credentials):
#     http = httplib2.Http()
#     http = credentials.authorize(http)
#     return build('gmail', 'v1', http=http)


# def sendMailNotifications(invoice_id, emails, body1=None, user=None):
#     # user_id = "mosbyted116@gmail.com"
#     user_id = elipo_email

#     if not body1:
#         body1 = ''

#     credentials = get_stored_credentials(user_id)

#     if credentials and credentials.refresh_token is not None:
#         service = build_service(credentials=credentials)

#         mail_subject = 'ELIPO Notification'
#         mail_cc = ''

#         message_body = '''<html>
#                 <body  >
#             <div style="  max-width: 500px; margin: auto; padding: 10px; ">
#                     <div style=" width:100%; align-content: center;text-align: center;">
#                         <img src="https://einvoice-public-images.s3.ap-south-1.amazonaws.com/ELIPO+logo.png" alt="Italian Trulli" style="vertical-align:middle; width: 140px;height:50px;text-align: center;"  >
#                     </div>

#                     <div style=" width:100%; align-content:left;text-align:left;">
#                             <hr style="width:100%; text-align: center; border: 2px solid #0000001A;opacity: 0.5; border-radius: 2px;" >
#                         </div>
#                     <b>

#                 <span style="vertical-align: middle;text-align: left;font: 600  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;" >
#                     Dear User,
#                 </span> 
#                 <br><br>
#                 <span style="vertical-align: middle;text-align: left;font: 600  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;" >
#                     Invoice No: <span style="font: 500  15px/22px ;">{},</span>
#                 </span> 

#                 <br>
#                 <span style="vertical-align: middle;text-align: left;font: 600  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;" >
#                    Is generated by OCR and assigned for approval to you.
#                 </span> 
#                 </b> 
#                 <br>
#                 <br>
#                 <div style=" width:100%;align-content: center;text-align: center; ">
#                     <a href="https://ywi7o0pxhc.execute-api.eu-central-1.amazonaws.com/production/login" target="_blank">
#                         <button style="border: none;box-shadow: 1px 1px 5px 1px #5a9e9b; background:rgb(80, 219, 212) 0% 0% no-repeat padding-box; border-radius: 7px;opacity: 1;width:180px; height: 35px;outline: none;border: none;" > 
#                             <span style="vertical-align: middle; text-align: left;font: 600 16px/23px Open Sans;letter-spacing: 0px;color: whitesmoke;white-space: nowrap;opacity: 1;">Login to ELIPO</span>
#                         </button>
#                     </a>
#                 </div>

#                 <br><br>
#                 <div style="width:100%;">
#                 <span style="vertical-align: middle; text-align: left;font: 500  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;">Regards,</span>
#                 <br>
#                 <span style="vertical-align: middle;text-align: left;font: 500  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;">Team ELIPO</span>
#                 </div>
#             <div style=" width:100%; align-content:left;text-align:left;">
#                         <hr style="width:100%; text-align: center; border: 2px solid #0000001A;opacity: 0.5; border-radius: 2px;" >
#                     </div>


#                 <div style="width:100%;align-content: center;text-align: center;">
#                     <span style=" text-align: center;font: 600 16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 0.7;">This message was sent to you by ELIPO</span>
#                 </div>
#                 <div style="width:100%;align-content: center;text-align: center;">
#                     <img src="https://einvoice-public-images.s3.ap-south-1.amazonaws.com/elipo+logo_2.png" alt="Italian Trulli" style="text-align: center;width: 80px;height: 30px;" >
#                 </div>

#                 <br>
#             </div>
#                 </body></html>'''.format(invoice_id)

#         message = create_message(sender=elipo_email, to=emails, subject=mail_subject,
#                                  message_text=str(message_body), cc=mail_cc)

#         send_message(service=service, user_id="me", message=message)


# def find_vendor(mycursor, r_vendor, idate):
    
#     if idate:
#         idate = str(idate.date())  
        
#     vendor_data = None
#     vendor = {}

#     if r_vendor['gstin']:
#         sqlQuery = "SELECT v.*, d.value2 FROM vendor_master v " \
#                    "left join dropdown d on v.gst_treatment = d.value1 where " \
#                    "(v.gstin_uin = ? and d.drop_key = 'vendor_gst_treatment')"
#         values = (r_vendor['gstin'],)
#         mycursor.execute(sqlQuery, values)
#         vendor = mycursor.fetchone()

#     if not vendor and r_vendor['vendor_name']:

#         mycursor.execute("SELECT v.*, d.value2 FROM vendor_master v left join dropdown d on v.gst_treatment = d.value1")
#         allVendors = mycursor.fetchall()

#         # fuzzScore = 0

#         for eachVendor in allVendors:

#             dist_sc = fuzz.ratio(eachVendor['vendor_name'].lower(), r_vendor['vendor_name'].lower())
#             if dist_sc > 81 or r_vendor['vendor_name'].lower() in eachVendor['vendor_name'].lower():
#                 # if dist_sc > 75 and fuzzScore < dist_sc:
#                 vendor = eachVendor
#                 # fuzzScore = dist_sc
#                 break

#     if vendor:

#         due = None

#         igst = 'n'

#         if idate and vendor['payment_terms']:

#             due = idate

#             if vendor['payment_terms'] == "On the day invoice raised":
#                 due = idate
#             elif vendor['payment_terms'] == "On the month end":
#                 last = calendar.monthrange(idate.year, idate.month)
#                 idate = datetime.datetime.strptime(idate, '%Y-%m-%d')
#                 due = idate.date() + datetime.timedelta(days=last[1] - idate.day)
#             else:
#                 idate = datetime.datetime.strptime(idate, '%Y-%m-%d')
#                 due = idate.date() + datetime.timedelta(days=int(vendor['payment_terms']))

#         if vendor['gst_per'] == "igst":
#             igst = 'y'
#         else:
#             igst = 'n'

#         vendor_data = {
#             'currency': vendor['currency'],
#             'payment_terms': vendor['payment_terms'],
#             'due_date': due,
#             'vendor_code': vendor['vendor_no'],
#             'vendor_name': vendor['vendor_name'],
#             'is_igst': igst,
#             'tds': vendor['tds'],
#             'gst_treatment': vendor['gst_treatment'],
#             'gstin': vendor['gstin_uin']
#         }

#     return vendor_data


# def fetch_default_vendor(mycursor, idate=None):
#     # vendor_data = None
    
#     vendor_data = {
#             'currency': "",
#             'payment_terms': "",
#             'due_date': "",
#             'vendor_code': "",
#             'vendor_name': "",
#             'is_igst': "",
#             'tds': "",
#             'gst_treatment': "",
#             'gstin': "",
#             'company_code': "",

#         }

#     mycursor.execute("SELECT * FROM dropdown where drop_key = 'default-master-detail'")
#     d_master = mycursor.fetchall()

#     defaults = {}
#     vendor = {}

#     if d_master:

#         for each in d_master:
#             defaults[each['value1']] = each['value2']

#         if defaults['supplier_id']:
#             values = (defaults['supplier_id'],)
#             mycursor.execute(
#                 "SELECT v.*, d.value2 FROM vendor_master v left join dropdown d "
#                 "on v.gst_treatment = d.value1 where v.vendor_no = ?", values)
#             vendor = mycursor.fetchone()

#         due = None

#         igst = 'n'
        
#         print(idate, vendor)
        
#         if vendor:

#             if idate and ['payment_terms']:
    
#                 due = idate
    
#                 if vendor['payment_terms'] == "On the day invoice raised":
#                     due = idate
#                 elif vendor['payment_terms'] == "On the month end":
#                     last = calendar.monthrange(idate.year, idate.month)
#                     idate = datetime.datetime.strptime(idate, '%Y-%m-%d')
#                     due = idate.date() + datetime.timedelta(days=last[1] - idate.day)
#                 else:
#                     idate = datetime.datetime.strptime(str(idate.date()) , '%Y-%m-%d')
#                     due = idate.date() + datetime.timedelta(days=int(vendor['payment_terms']))
    
#             if vendor['gst_per'] == "igst":
#                 igst = 'y'
#             else:
#                 igst = 'n'

#             vendor_data = {
#                 'currency': vendor['currency'],
#                 'payment_terms': vendor['payment_terms'],
#                 'due_date': due,
#                 'vendor_code': vendor['vendor_no'],
#                 'vendor_name': vendor['vendor_name'],
#                 'is_igst': igst,
#                 'tds': vendor['tds'],
#                 'gst_treatment': vendor['gst_treatment'],
#                 'gstin': vendor['gstin_uin'],
#                 # 'company_code': defaults['company_code'],
    
#             }
        
#         if defaults:
#             vendor_data['company_code'] = defaults['company_code']

#     return vendor_data


# def clearDate(rawDate):
    
#     if rawDate != '' and rawDate[2] != '.' :
#         if rawDate.index('-') == 4:
#             date = rawDate.split('-')
#             fdate = date[2]+ '.'+date[1]+'.'+date[0]
#             rawDate = fdate
        
#     dateF = None

#     for index in range(7):
#         try:
#             date_time_strtt = str(rawDate)
#             date_time_strtt = date_time_strtt.strip()
#             date_time_str = ""

#             for c in date_time_strtt:
#                 if c.isalnum():
#                     date_time_str += c

#             if index == 0:
#                 date_time_obj = datetime.datetime.strptime(date_time_str, '%d%m%Y')

#             elif index == 1:
#                 date_time_obj = datetime.datetime.strptime(date_time_str, '%d%B%Y')

#             elif index == 2:
#                 date_time_obj = datetime.datetime.strptime(date_time_str, '%d%b%Y')

#             elif index == 3:
#                 date_time_obj = datetime.datetime.strptime(date_time_str, '%d%b%y')

#             elif index == 4:
#                 date_time_obj = datetime.datetime.strptime(date_time_str, '%d%B%y')

#             elif index == 5:
#                 date_time_str = date_time_str[0:1] + date_time_str[3:]
#                 date_time_obj = datetime.datetime.strptime(date_time_str, '%d%B%Y')
                
#             elif index == 6:
#                 date_time_obj = datetime.datetime.strptime(date_time_str, '%d%m%y')

#             # dateF = str(date_time_obj.date())
#             dateF = date_time_obj

#             return dateF

#         except ValueError as e:
#             pass


# def fetchSAP_PoDetails(poNumber):
#     item_category = []
#     try:

#         s = requests.Session()
#         s.headers.update({'Connection': 'keep-alive'})

#         url = "http://182.72.219.94:8000/zgetpo/GetPo"
#         params = {'sap-client': '800'}

#         headersFetch = {'X-CSRF-TOKEN': 'Fetch'}
#         y = s.get(url, auth=HTTPBasicAuth('developer31', 'peol@123'), headers=headersFetch, params=params, timeout=10)
#         token = y.headers["X-CSRF-TOKEN"]

#         headers = {"X-CSRF-TOKEN": token, 'Content-type': 'application/json'}
#         records = {
#             "ebeln": poNumber
#         }

#         x = s.post(url, json=records, auth=HTTPBasicAuth('developer31', 'peol@123'), headers=headers, params=params,
#                    timeout=10)

#         if x.status_code != 500:
#             payload = x.json()

#             # item_category = []
#             for each in payload[0]['POITEM']:
#                 item_category.append(each['ITEM_CAT'])

#     except requests.exceptions.RequestException as msg:
#         pass

#     except requests.exceptions.ConnectionError as msg:
#         pass

#     return item_category


# def create_approvals(mycursor, invoice_id, decider, working_person):
#     try:

#         mycursor.execute(
#             "SELECT a.* FROM rule a inner join rule_snro b on a.rule_id = b.rule_id where b.is_approval = 'y' and a.is_on = 'y'")
#         all_rules = mycursor.fetchall()

#         rule_ids = [sub['rule_id'] for sub in all_rules]
#         rule_ids = set(rule_ids)
#         rule_ids = list(rule_ids)

#         rule = []

#         default = []
#         for ruleID in rule_ids:
#             rules = []

#             for row in all_rules:
#                 if not default and row[
#                     'decider'] == "default":  # ruleID == row['rule_id'] and row['decider'] != "default":
#                     default.append(row)

#                 elif row['decider'] == "default_assignment":
#                     pass

#                 elif ruleID == row['rule_id']:
#                     rules.append(row)

#             noOfRules = len(rules)
#             countMatches = 0

#             for row in rules:

#                 if row['decider_type'] == "number":

#                     if row['decider'] == "amount" or row["decider"] == "discount":
#                         d_value = float(decider[row['decider']])
#                     else:
#                         d_value = int(decider[row['decider']])

#                     if row['operator'] == "=" and d_value == int(row['d_value']):
#                         countMatches += 1
#                     elif row['operator'] == ">" and d_value > int(row['d_value']):
#                         countMatches += 1
#                     elif row['operator'] == "<" and d_value < int(row['d_value']):
#                         countMatches += 1
#                     elif row['operator'] == "between" and int(row['d_value']) <= d_value <= int(row['d_value2']):
#                         countMatches += 1

#                 elif row['decider_type'] == "string":
#                     if row["decider"] == "item_category":
#                         for each in decider["item_category"]:
#                             if each == str(row['d_value']):
#                                 countMatches += 1
#                                 break

#                     elif decider[row['decider']] == str(row['d_value']):
#                         countMatches += 1

#             if noOfRules == countMatches and noOfRules != 0:
#                 rule.append(row)

#         if not rule and default:
#             rule.append(default[0])

#         if rule:

#             values = [sub['rule_id'] for sub in rule]
#             values = set(values)
#             values = list(values)

#             format_strings = ','.join(['?'] * len(values))
#             sqlQuery = "select distinct r.*, ru.approval_type, ru.ifnot_withindays from rule_approver r " \
#                        "left join rule ru on r.rule_key = ru.rule_id " \
#                        "where r.rule_key in (?) " \
#                        "order by field(approval_type, 'series', 'parallel', 'single'), " \
#                        "r.level desc, r.rule_key" % format_strings
#             mycursor.execute(sqlQuery, tuple(values))
#             all_approvers = mycursor.fetchall()

#             multiple_app = []
#             allrules = []

#             main_rule = None
#             main_rule = all_approvers[0]

#             for row in all_approvers:

#                 if row["approver"] == 999999999:
#                     return False

#                 allrules.append(row['rule_key'])

#                 if all_approvers[0]['rule_key'] == row['rule_key']:
#                     data = {
#                         "isgroup": row["isgroup"],
#                         "approver": row["approver"],
#                         'level': row['level'],
#                         'approval_type': main_rule['approval_type'],
#                         'rule_id': row['rule_key']
#                     }
#                     multiple_app.append(data)

#             allrules = set(allrules)
#             allrules = list(allrules)
#             allrules.remove(all_approvers[0]['rule_key'])

#             add_level = all_approvers[0]['level']

#             for rule in allrules:

#                 level_s = 0

#                 for row in all_approvers:

#                     if rule == row['rule_key']:

#                         dupl_app = False

#                         for ex in multiple_app:
#                             if ex['isgroup'] == row['isgroup'] and ex['approver'] == row['approver']:
#                                 dupl_app = True
#                                 break

#                         if dupl_app:
#                             continue

#                         if level_s < row['level']:
#                             level_s = row['level']

#                         data = {
#                             "isgroup": row["isgroup"],
#                             "approver": row["approver"],
#                             'level': row['level'] + add_level,
#                             'approval_type': row['approval_type'],
#                             'rule_id': row['rule_key']
#                         }
#                         multiple_app.append(data)

#                 if level_s > 0:
#                     add_level += level_s

#             values = []
#             exc_days = int(main_rule['ifnot_withindays'])

#             escalate_when = datetime.date.today() + datetime.timedelta(days=exc_days)

#             groups = []
#             members = []

#             for row in multiple_app:

#                 if row['isgroup'] == 'y' and (
#                         (row['approval_type'] == "single" or row['approval_type'] == "parallel") or row['level'] == 1):
#                     groups.append(row['approver'])

#                 elif (row['approval_type'] == 'single' or row['approval_type'] == 'parallel') or row['level'] == 1:
#                     members.append(row['approver'])

#                 value = (
#                     row['isgroup'], row['approver'], invoice_id, "n", row['level'], row['approval_type'], escalate_when,
#                     row['rule_id'])
#                 values.append(value)

#             format_strings_grp = ','.join(['?'] * len(groups))
#             format_strings_mem = ','.join(['?'] * len(members))
#             emails = None

#             if members and groups:
#                 mix = members + groups
#                 mycursor.execute(
#                     "select email from member where member_id in ({}) or group_id in ({})".format(
#                         format_strings_mem, format_strings_grp), tuple(mix))
#                 emails = mycursor.fetchall()

#             elif groups:
#                 mycursor.execute(
#                     "select email from member where group_id in ({})".format(format_strings_grp),
#                     tuple(groups))
#                 emails = mycursor.fetchall()

#             else:
#                 mycursor.execute(
#                     "select email from member where member_id in ({})".format(format_strings_mem),
#                     tuple(members))
#                 emails = mycursor.fetchall()

#             if values:
#                 mycursor.executemany(
#                     "INSERT INTO approval (isgroup, approver, invoice_no, isapproved,"
#                     " approval_level, approval_type, escalate_date, rule_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
#                     values)

#                 if emails:

#                     email_Add = None
#                     for each in emails:
#                         if not email_Add:
#                             email_Add = each['email']
#                         else:
#                             email_Add += "," + each['email']

#                     # sendMailNotifications(invoice_id=invoice_id, mycursor=mycursor, emails=emails, user=working_person)
#                     sendMailNotifications(invoice_id=invoice_id, emails=email_Add, user=working_person)

#             return True

#         else:
#             return False

#     finally:
#         pass


# # invoice_id = 856
# # decider = {
# #                 'discount': 0,
# #                 'amount': 150001.24,
# #                 'cost_center': '1000',
# #                 'currency': 'INR',
# #                 'gl_account': '113310',
# #                 'npo': 'n',
# #                 'vendor_no': '2000000075',
# #                 'department_id': '13',
# #                 'item_category': ['0']
# #             }

# # with mydb.cursor() as mycursor:
# #     print(create_approvals(mycursor, invoice_id, decider))


# def assign_approcessor(mycursor, invoice_id, decider):
#     try:
#         default = None
#         email_str = ""

#         mycursor.execute("SELECT * FROM elipo_setting where key_name = 'app_assignment'")
#         appdet = mycursor.fetchone()

#         if appdet:

#             email_str = ''

#             if appdet['value1'] == "on":

#                 mycursor.execute(
#                     "SELECT a.* FROM rule a inner join rule_snro b"
#                     " on a.rule_id = b.rule_id "
#                     "where b.is_approval = 'n' and a.is_on = 'y'")
#                 all_rules = mycursor.fetchall()

#                 rule_ids = []
#                 email_str = ''
#                 rule = None

#                 if all_rules:
#                     rule_ids = [sub['rule_id'] for sub in all_rules]
#                     rule_ids = set(rule_ids)
#                     rule_ids = list(rule_ids)

#                     rule = []

#                     rules = {}

#                     for ruleId in rule_ids:
#                         rules[ruleId] = []

#                     default = None

#                     for row in all_rules:
#                         if row['decider'] == 'default_assignment':
#                             default = row
#                         else:
#                             rules[row['rule_id']].append(row)

#                     if default:
#                         rule_ids.remove(default['rule_id'])
#                         del rules[default['rule_id']]

#                 if rule_ids:
#                     # noOfRules = len(rules)

#                     for eachRule in rules:

#                         countMatches = 0
#                         noOfCondn = len(rules[eachRule])

#                         for row in rules[eachRule]:

#                             if row['decider_type'] == "number":

#                                 if row['decider'] == "invoice_value":
#                                     d_value = float(decider[row['decider']])
#                                 else:
#                                     d_value = int(decider[row['decider']])

#                                 if row['operator'] == "=" and d_value == int(row['d_value']):
#                                     countMatches += 1
#                                 elif row['operator'] == ">" and d_value > int(row['d_value']):
#                                     countMatches += 1
#                                 elif row['operator'] == "<" and d_value < int(row['d_value']):
#                                     countMatches += 1
#                                 elif row['operator'] == "between" and int(row['d_value']) <= d_value <= int(
#                                         row['d_value2']):
#                                     countMatches += 1

#                             elif row['decider_type'] == "string":
#                                 if row["decider"] == "invoice_type":
#                                     for each in decider["invoice_type"]:
#                                         if each == str(row['d_value']):
#                                             countMatches += 1
#                                             break

#                                 elif decider[row['decider']] == str(row['d_value']):
#                                     countMatches += 1

#                         if countMatches > 0 :
#                             rule.append(row)

#                 # print(default)
#                 if not rule and default:
#                     rule.append(default)

#                 if rule:
#                     # print(rule)

#                     values = [sub['rule_id'] for sub in rule]
#                     values = set(values)
#                     values = list(values)

#                     format_strings = ','.join(['?'] * len(values))

#                     sqlQuery = "select isgroup, approver from rule_approver where rule_key in (?) " % format_strings
#                     # print(sqlQuery, values)
#                     mycursor.execute(sqlQuery, tuple(values))
#                     all_app = mycursor.fetchall()

#                     all_approvers = [dict(t) for t in {tuple(d.items()) for d in all_app}]

#                     groups = []
#                     members = []
#                     values = []

#                     for row in all_approvers:

#                         value = (
#                             row['isgroup'], row['approver'], invoice_id)
#                         values.append(value)

#                         if row['isgroup'] == 'y':
#                             groups.append(row['approver'])
#                         else:
#                             members.append(row['approver'])

#                     format_strings_grp = ','.join(['%s'] * len(groups))
#                     format_strings_mem = ','.join(['%s'] * len(members))
#                     emails = None

#                     audit_trail = 'Invoice ' + str(invoice_id) + ' assigned to '
#                     trail_grp = ''

#                     if members and groups:
#                         mix = members + groups
#                         mycursor.execute(
#                             "select concat(fs_name, ' ', ls_name) as name, email, group_id from member "
#                             "where member_id in ({}) or group_id in ({})".format(
#                                 format_strings_mem, format_strings_grp), tuple(mix))
#                         emails = mycursor.fetchall()

#                         # mycursor.execute(
#                         #     "select group_id, name from group where group_id in ({})".format(
#                         #         format_strings_grp), tuple(groups))
#                         # grp_details = mycursor.fetchall()

#                         sqlQueryt = "select group_id, name from " + dbScehma + ".group where group_id in ({})".format(
#                             format_strings_grp)
#                         mycursor.execute(sqlQueryt, tuple(groups))
#                         grp_details = mycursor.fetchall()

#                         if grp_details:
#                             for each in grp_details:
#                                 if not trail_grp:
#                                     trail_grp += each['name']
#                                 else:
#                                     trail_grp += ', ' + each['name']

#                     elif groups:
#                         mycursor.execute(
#                             "select concat(fs_name, ' ', ls_name) as name, email, group_id from member "
#                             "where group_id in ({})".format(format_strings_grp),
#                             tuple(groups))
#                         emails = mycursor.fetchall()

#                         # mycursor.execute(
#                         #     "select group_id, name from group where group_id in ({})".format(
#                         #         format_strings_grp), tuple(groups))
#                         # grp_details = mycursor.fetchall()

#                         sqlQuery = "select group_id, name from " + dbScehma + ".group where group_id in ({})".format(
#                             format_strings_grp)

#                         mycursor.execute(sqlQuery, tuple(groups))
#                         grp_details = mycursor.fetchall()

#                         if grp_details:
#                             for each in grp_details:
#                                 if not trail_grp:
#                                     trail_grp += each['name']
#                                 else:
#                                     trail_grp += ', ' + each['name']

#                     else:
#                         mycursor.execute(
#                             "select concat(fs_name, ' ', ls_name) as name, email, group_id from member "
#                             "where member_id in ({})".format(format_strings_mem),
#                             tuple(members))
#                         emails = mycursor.fetchall()

#                     if emails:

#                         for each in emails:
#                             if not email_str:
#                                 email_str = each['email']
#                             else:
#                                 email_str += ',' + each['email']
#                             if not each['group_id'] in groups:
#                                 if not trail_grp:
#                                     trail_grp += each['name']
#                                 else:
#                                     trail_grp += ', ' + each['name']

#                         audit_trail += trail_grp

#                     if values:
#                         mycursor.executemany(
#                             "INSERT INTO assignment (isgroup, app, invoice_no) VALUES (%s, %s, %s)",
#                             values)

#                         values = (invoice_id, '', 'new', audit_trail)
#                         sqlQuery = "insert into invoice_audit (invoice_no, prev_status, " \
#                                    "new_status, msg) values (%s, %s, %s, %s)"
#                         mycursor.execute(sqlQuery, values)

#                         return True, email_str


#             else:
#                 values = ("y", 6, invoice_id)
#                 mycursor.execute(
#                     "INSERT INTO assignment (isgroup, app, invoice_no) VALUES (%s, %s, %s)", values)

#                 mycursor.execute(
#                     "select concat(fs_name, ' ', ls_name) as name, email, group_id from member "
#                     "where group_id = '6'")
#                 emails = mycursor.fetchall()

#                 if emails:
#                     for each in emails:
#                         if email_str:
#                             email_str += "," + each['email']
#                         else:
#                             email_str = each['email']

#                 return False, email_str

#         return False, email_str

#     except Exception as e:
#         print(e)
#         pass

#     finally:
#         pass

# #coulmn names not yet coverted to uppercase
# def postPaperAiResponse(event=None, context=None):
#     print(event)

#     header_accuracy = {}
#     item_accuracy = []


#     pdfTextExtractionJobId = event['params']['querystring']['task_id']

#     pdfTextExtractionStatus = "processed"

#     pdfTextExtractionS3ObjectName = ""

#     # client = boto3.client(
#     # 'secretsmanager',
#     # region_name='eu-central-1',
#     # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
#     # aws_secret_access_key='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' )

#     # secret = "test/einvoice/secret"

#     global elipo_bucket
#     # elipo_bucket = 'file-bucket-emp'
#     elipo_bucket = event["stage-variables"]["bucket_gmail_credential"]

#     global pdfTextExtractionS3Bucket
#     pdfTextExtractionS3Bucket = event["stage-variables"]["ocr_bucket"]

#     global elipo_email
#     # elipo_email = 'elipotest@gmail.com'
#     elipo_email = event["stage-variables"]["notification_email"]

#     global dbScehma
#     dbScehma = ' DBADMIN '

#     # resp = client.get_secret_value(
#     #     SecretId=secret
#     # )

#     # secretDict = json.loads(resp['SecretString'])

#     mydb = hdbcliConnect()
#     if pdfTextExtractionStatus == 'processed':

#         try:
#             with mydb.cursor() as mycursor:
#                 defSchemaQuery = "set schema " + dbScehma
#                 mycursor.execute(defSchemaQuery)
                
#                 mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
#                 on = mycursor.fetchone()
#                 if on['value1'] == 'on':
#                     chk = enable_xray(event)
#                     if chk['Enable'] == True:
#                         patch_all() 
#                         print(event)

#                 values = (pdfTextExtractionJobId,)
#                 mycursor.execute("SELECT * FROM mail_message where job_id = ?", values)
#                 job_details = mycursor.fetchone()
                
#                 if job_details == '':
#                     mycursor.execute("SELECT * FROM aws_mail_message where job_id = ?", values)
#                     job_details = mycursor.fetchone()

#                 if job_details:
#                     pdfTextExtractionS3ObjectName = job_details['filename']

               

#                 faulty_invoice = False

#                 # # ocr_folder_name = pdfTextExtractionS3ObjectName.split('/')

#                 # # values = (ocr_folder_name[0],)
#                 # values = ("old-dev",)

#                 # mycursor.execute('select * from elipo_saas_seeting.schemas_confg where ocr_folder = ?', values)
#                 # ocr_folder = mycursor.fetchone()

#                 # # defSchemaQuery = "use " + ocr_folder['schema_name']
#                 # # mycursor.execute(defSchemaQuery)

#                 # dbScehma = ocr_folder['schema_name']
  
#                 header = {
#                     "invoice_id":None,
#                     "status": "new",
#                     "ref_po_num": None,
#                     "user_invoice_no": None,
#                     "user_invoice_id":None,
#                     "company_code": None,
#                     "invoice_date": None,
#                     "posting_date": "",
#                     "baseline_date": "",
#                     "payment_terms": None,
#                     "payment_method": None,
#                     "amount": 0.00,
#                     "currency": None,
#                     "gl_account": None,
#                     "business_area": "",
#                     "supplier_id": None,
#                     "approver_id": "",
#                     "supplier_name": None,
#                     "discount": "",
#                     "cost_center": None,
#                     "tds": None,
#                     "npo": None,
#                     "is_igst": '',
#                     "tax_per": None,
#                     "doc_type": '',
#                     "gstin": '',
#                     'customer_name':'',
#                     'tcs':0,
#                     'jurisdiction_code':''
#                 }

#                 headerKeyValues = {
#                     'Document Title': "",
#                     'Invoice Number': "",
#                     'Invoice Date': "",
#                     'PO Number': "",
#                     'PO Date': "",
#                     'Customer Name': "",
#                     'Vendor Name': "",
#                     'Vendor Tax ID': "",

#                     'Sub Total': "",
#                     'Total Amount': "",
#                     'Discount': "",
#                     'CGST': "",
#                     'SGST': "",
#                     'IGST': "",
#                     'TCS': "",
#                     'Taxable Value': "",

#                     'Bill of Lading Number': "",
#                     'Due Date': "",
#                     'Tax Amount': "",
#                     'Amount Paid': "",
#                     'Amount Due': "",
#                     'Currency': "",
#                     'Payment Terms': "",
#                 }

#                 for each in event['body-json']['key_value_pairs']:
                    
#                         if each['display_name'] == 'Supplier Name':   #changed
#                            each['display_name'] = 'Vendor Name'
                    
#                         headerKeyValues[each['display_name']] = each['value']
                

#                 # header['jurisdiction_code'] = ''
#                 vn = '' #change
#                 jurisdiction_code = ''
#                 for j in event['body-json']['key_value_pairs'] :
#                     if j['display_name'] == 'Vendor Name':
#                         vn = j['value']
#                         break
                
#                 if vn != '':
#                     mycursor.execute("select * from vendor_master ")
#                     valuevm = mycursor.fetchall()
#                     compare = vn
#                     for i in valuevm :
#                         per = fuzz.ratio(i['vendor_name'], compare )
#                         if per > 85 :
#                             jurisdiction_code = i['jurisdiction_code']
#                             header['jurisdiction_code'] = jurisdiction_code
#                             break  #change

#                 print(headerKeyValues['Vendor Name'])
#                 if(headerKeyValues['Vendor Name'] in 'Decor for Better Living ARCHIDPLY DÉCOR LTD'):   #changed
#                     headerKeyValues['Taxable Value'] = headerKeyValues['Taxable Value'].split(' ')[0]
                        
#                 headerKeyValues['Taxable Value'] = headerKeyValues['Taxable Value'].replace(',','')
#                 headerKeyValues['Total Amount'] = headerKeyValues['Total Amount'].replace(',','') 

#                 if headerKeyValues['Taxable Value'] and headerKeyValues['Total Amount']:
#                     rat = float(headerKeyValues['Total Amount']) / float(headerKeyValues['Taxable Value'])
#                     rat = float("{:.2f}".format(rat)) - 1
#                     header['tax_per'] = round(rat  * 100)

#                 if headerKeyValues['IGST']:
#                     header['is_igst'] = 'y'

#                 header['invoice_date'] = clearDate(rawDate=headerKeyValues['Invoice Date'].strip())
#                 header["user_invoice_no"] = headerKeyValues['Invoice Number'].strip().replace(' ', '')
#                 header["gstin"] = headerKeyValues['Vendor Tax ID'].strip().replace(' ', '')
#                 header["ref_po_num"] = headerKeyValues['PO Number'].strip().replace(' ', '')
#                 header['customer_name']= headerKeyValues['Customer Name']
#                 header['tcs'] = headerKeyValues['TCS']  

                 
                
#                 # header['doc_type'] =

#                 header_flags = {'usr_invoice': False,
#                                 'gstin': False,
#                                 'pan': False,
#                                 'invoice_date': False,
#                                 'posting_date': False,
#                                 'po': False
#                                 }

#                 vendor = {}

#                 if headerKeyValues['Vendor Name'] or headerKeyValues['Vendor Tax ID']:
#                     vendor = find_vendor(mycursor=mycursor,
#                                          r_vendor={
#                                              'vendor_name': headerKeyValues['Vendor Name'],
#                                              'gstin': headerKeyValues['Vendor Tax ID']
#                                          },
#                                          idate=header['invoice_date']
#                                          )

#                 if not vendor:
#                     vendor = fetch_default_vendor(mycursor=mycursor,
#                                                   idate=header['invoice_date'])

#                 if vendor:
#                     header['currency'] = str(vendor['currency']).upper()
#                     header['supplier_name'] = str(vendor['vendor_name'])
#                     header['baseline_date'] = str(vendor['due_date'])
#                     header["payment_terms"] = str(vendor['payment_terms'])
#                     header['supplier_id'] = str(vendor['vendor_code'])

#                     if not header['is_igst']:
#                         header['is_igst'] = str(vendor['is_igst'])

#                     header['tds'] = vendor['tds']
#                     header['gstin'] = vendor['gstin']

#                 mycursor.execute(
#                     "select value1, value2 from dropdown where drop_key = 'default-master-detail' ")
#                 default_data = mycursor.fetchall()

#                 d_currency = None
#                 d_glaccountItem = None
#                 d_paymentTerms = None
#                 d_taxPer = None
#                 d_tdsPer = None

#                 for each in default_data:
#                     if each['value1'] == 'company_code':
#                         header["company_code"] = each['value2']
#                     elif each['value1'] == 'cost_center':
#                         header["cost_center"] = each['value2']
#                     elif each['value1'] == 'currency':
#                         d_currency = each['value2']
#                     if each['value1'] == 'gl_account_header':
#                         header["gl_account"] = each['value2']
#                     elif each['value1'] == 'gl_account_item':
#                         d_glaccountItem = each['value2']
#                     elif each['value1'] == 'payment_method':
#                         header["payment_method"] = each['value2']
#                     if each['value1'] == 'payment_terms':
#                         d_paymentTerms = each['value2']
#                     elif each['value1'] == 'plant':
#                         header["plant"] = each['value2']
#                     elif each['value1'] == 'tax_per' and not header["tax_per"]:
#                         header["tax_per"] = each['value2']
#                     elif each['value1'] == 'tds_per':
#                         d_tdsPer = each['value2']

#                 if not header['supplier_id']:
#                     header["currency"] = d_currency
#                     header["payment_terms"] = d_paymentTerms
#                     header['tds'] = d_tdsPer
                    
#                     # print("lalallalallalalalala",header['invoice_date'], d_paymentTerms )

#                     if header['invoice_date'] and d_paymentTerms:
#                         if d_paymentTerms == 'On the month end':
#                             noofday = str(
#                                 calendar.monthrange(header['invoice_date'].year, header['invoice_date'].month)[1])
#                             header["baseline_date"] = str(
#                                 (header['invoice_date'] + datetime.timedelta(
#                                     int(noofday) - int(header['invoice_date'].day))).date())
#                         else:
#                             header["baseline_date"] = str(
#                                 (header['invoice_date'] + datetime.timedelta(int(d_paymentTerms))).date())

#                 npo = None

#                 #boc acu
#                 accuracy_header = header 
#                 # print(header)
#                 #eoc acu 

#                 if header['ref_po_num']:
#                     npo = 'n'
#                 else:
#                     npo = 'y'

#                 sup_status = ""
#                 from_supplier = ""

#                 tename = pdfTextExtractionS3ObjectName.split("/")

#                 if len(tename) > 1 and tename[1][0] == "S":
#                     header["status"] = ""
#                     sup_status = "draft"
#                     from_supplier = "y"

#                 sqlQuery = "select * from invoice_header where user_invoice_id = ?"
#                 mycursor.execute(sqlQuery,header["user_invoice_no"])
#                 values1 =  mycursor.fetchone()

#                 sqlQuery1 = "select count(*) from invoice_header_resent where invoice_id = ?"
#                 mycursor.execute(sqlQuery1,header["user_invoice_no"])
#                 values2 = mycursor.fetchall()
#                 values2 = values2[0]
#                 values2 = int(values2['count(*)'])
#                 # values2 = str(values2 + 1)  
                
#                 sqlQuery = "select * from invoice_header_resent where user_invoice_id = ?"
#                 mycursor.execute(sqlQuery,header["user_invoice_no"])
#                 values3 = mycursor.fetchone()
                
#                 sqlQuery = mycursor.execute("select * from elipo_setting where key_name = 'resent_invoice' ")
#                 values4 = mycursor.fetchone()
                
#                 mycursor.execute("select company_code from default_master where country = (select value1 from elipo_setting where key_name = 'country')")
#                 value5 = mycursor.fetchone()
                
#                 if values1 != None  and values3 == None and values4['value1'] == 'on':
#                     if header["user_invoice_no"] == values1["user_invoice_id"] and values1["in_status"] == "invoice_resent" :
#                         sqlQuery = "INSERT INTO invoice_header (in_status, sup_status, from_supplier, user_invoice_id, ref_po_num, " \
#                                 " company_code, invoice_date, posting_date, baseline_date, amount, currency, payment_method, gl_account," \
#                                 " business_area, supplier_id, supplier_name, cost_center, tcs, is_igst, tax_per, tds_per, payment_terms, npo, document_type, gstin, customer_name , jurisdiction_code) " \
#                                 "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?)"

#                     # header["posting_date"] = str(datetime.date.today())
#                         values2 = str(values2 + 1)
#                         header["invoice_id"] = header["user_invoice_no"]
#                         header["user_invoice_no"] = "R" + values2 +"_"+header["user_invoice_no"]
#                         values = (header["status"], sup_status, from_supplier, header["user_invoice_no"], header["ref_po_num"],
#                                 value5["company_code"],
#                                 header["invoice_date"], header["posting_date"], header["baseline_date"], header["amount"],
#                                 header["currency"], header["payment_method"], header["gl_account"], header["business_area"],
#                                 header["supplier_id"], header["supplier_name"], header["cost_center"], header['tcs'], header['is_igst'],
#                                 header['tax_per'], header['tds'],
#                                 header["payment_terms"], npo, header['doc_type'], header['gstin'], header['customer_name'] , header['jurisdiction_code'])

#                         # print(sqlQuery)
#                         # print(values)
#                         # print(header) # acr
#                         header_accuracy = header # acr
#                         mycursor.execute(sqlQuery, values)

#                         invoice_no = mycursor.lastrowid
#                         header["user_invoice_id"] = header["user_invoice_no"]
#                         sqlQuery1 = "INSERT INTO invoice_header_resent (invoice_no,invoice_id,in_status, sup_status, from_supplier, user_invoice_id, ref_po_num, " \
#                                 " company_code, invoice_date, posting_date, baseline_date, amount, currency, payment_method, gl_account," \
#                                 " business_area, supplier_id, supplier_name, cost_center, tcs, is_igst, tax_per, tds_per, payment_terms, npo, document_type, gstin, customer_name) " \
#                                 "VALUES (?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?)"

#                         values1= (invoice_no,header["invoice_id"],header["status"], sup_status, from_supplier,header["user_invoice_id"],  header["ref_po_num"],
#                                 value5["company_code"],
#                                 header["invoice_date"], header["posting_date"], header["baseline_date"], header["amount"],
#                                 header["currency"], header["payment_method"], header["gl_account"], header["business_area"],
#                                 header["supplier_id"], header["supplier_name"], header["cost_center"], header['tcs'], header['is_igst'],
#                                 header['tax_per'], header['tds'],
#                                 header["payment_terms"], npo, header['doc_type'], header['gstin'], header['customer_name'])
#                         # print(sqlQuery1)
#                         # print(values1)
#                         mycursor.execute(sqlQuery1, values1)

#                         if not header["user_invoice_no"] or not header["invoice_date"] or not \
#                                 header["supplier_id"]:
#                             faulty_invoice = True

#                         item = {
#                             "invoice_no": "",
#                             "item_no": "",
#                             "material": "",
#                             "quantity": "",
#                             "amount": "",
#                             "payment_method": "",
#                             "tax_amount": "",
#                             "tax_code": "",
#                             "ref_po_no": "",
#                             "plant": ""
#                         }

#                         # paper-entry format

#                         rowItemsByPaperAi = []

#                         for eachItem in event['body-json']['line_items']:

#                             d_ItemPaperAi = {
#                                 'hsn_code': "",
#                                 'material': "",
#                                 'material_desc': "",
#                                 'quantity': "",
#                                 'unit': "",
#                                 'amount': "",
#                                 'currency': "",
#                                 'amt_per_unit': "",
#                                 'gst_per': "",
#                                 'gl_account': "",
#                             }

#                             for each in eachItem:
#                                 # if each == "Product Description":
#                                 #     d_ItemPaperAi['material_desc'] = eachItem[each]
#                                 # elif each == "Rate":
#                                 #     d_ItemPaperAi['amt_per_unit'] = eachItem[each].replace(',','')  
#                                 # elif each == "Unit of Measure":
#                                 #     d_ItemPaperAi['unit'] = eachItem[each]
#                                 # elif each == "Quantity":
#                                 #     d_ItemPaperAi['quantity'] = eachItem[each]
#                                 # elif each == "Currency":
#                                 #     d_ItemPaperAi['currency'] = eachItem[each]
#                                 # elif each == "Product Code":
#                                 #     d_ItemPaperAi['hsn_code'] = eachItem[each]
#                                 # elif each == "Line Total":
#                                 #     d_ItemPaperAi['amount'] = eachItem[each]
#                                 # elif each == "HSN Code":
#                                 #     d_ItemPaperAi['hsn_code'] = eachItem[each]
#                                 # # elif each == "":
#                                 # #     d_ItemPaperAi[''] = eachItem[each]
#                                 # # elif each == "":
#                                 # #     d_ItemPaperAi[''] = eachItem[each]
                                
#                                 if each == "Product Description":
#                                     d_ItemPaperAi['material_desc'] = eachItem[each]
#                                 elif each == "Rate" or each == "Unit Price":
#                                 # elif each == "Unit Price":
#                                     d_ItemPaperAi['amt_per_unit'] = eachItem[each].replace(',','')  
#                                 elif each == "Unit of Measure":
#                                     d_ItemPaperAi['unit'] = eachItem[each]
#                                 elif each == "Quantity":
#                                     d_ItemPaperAi['quantity'] = eachItem[each]
#                                 elif each == "Currency":
#                                     d_ItemPaperAi['currency'] = eachItem[each]
#                                 elif each == "Product Code":
#                                     d_ItemPaperAi['hsn_code'] = eachItem[each]
#                                 # elif each == "Line Total":
#                                 elif each == "Line Amount":
#                                     d_ItemPaperAi['amount'] = eachItem[each]
#                                 # elif each == "HSN Code":
#                                 elif each == "HS Code":
#                                     d_ItemPaperAi['hsn_code'] = eachItem[each]    

#                             if not d_ItemPaperAi['gst_per']:
#                                 d_ItemPaperAi['gst_per'] = header['tax_per']

#                             rowItemsByPaperAi.append(d_ItemPaperAi)

#                         if rowItemsByPaperAi:

#                             # print(rowItemsByPaperAi)

#                             mycursor.execute("SELECT * FROM material_master")
#                             materials = mycursor.fetchall()

#                             mycursor.execute("SELECT * FROM master where master_id = 6")
#                             db_units = mycursor.fetchall()
#                             units = []
#                             for cur in db_units:
#                                 units.append(cur['code'])
#                             del db_units

#                             exclude_lines = ['net price', 'CGST', 'CGST %', 'CGST @ %',
#                                             'SGST', 'SGST %', 'SGST @ %',
#                                             'IGST', 'IGST %', 'IGST @ %',
#                                             'TOTAL', 'UTGST/SGST', 'Conditions',
#                                             'Exchange Rate USD to EUR', 'Q 10-14898 RECEIVED 19 AUG 2020 Facilities DA']

#                             exclude_no = []

#                             # for row in rowItemsByPaperAi:
#                             for index, row in enumerate(rowItemsByPaperAi):
                                
#                                 if not row['material_desc']:
#                                     continue   

#                                 flag1 = None

#                                 for exclude in exclude_lines:

#                                     fuz_dist22 = fuzz.partial_ratio(exclude.lower(), row['material_desc'].lower())

#                                     if fuz_dist22 > 70 and not len(exclude) * 4 < len(row['material_desc']):
#                                         flag1 = True
#                                         exclude_no.append(index)
#                                         break

#                                 if flag1:
#                                     continue

#                                 match_per = 0
#                                 db_matnr = {}   

#                                 row['currency'] = row['currency'].strip()
                                
#                                 if row['currency']:
#                                     try:
#                                         row['currency'] = str(row['currency']).upper()
#                                     except:
#                                         pass

#                                 row['unit'] = row['unit'].strip()
#                                 if row['unit'] and not row['unit'] in units:
#                                     row['unit'] = None

#                                 if not row['amt_per_unit']:
#                                     row['amt_per_unit'] = None

#                                 for mater in materials:

#                                     value = row['material_desc'][0:48]

#                                     # print(fuzz.ratio(row_name.lower(), mater['name'].lower()), "ratio")
#                                     # print(fuzz.token_set_ratio(row_name, mater['name']), "token_set_ratio")
#                                     # fuz_dist = fuzz.token_set_ratio(value.lower(), mater['material_name'].lower())
#                                     # fuz_dist = fuzz.ratio(value.lower(), mater['material_name'].lower())

#                                     fuz_dist = fuzz.WRatio(value.lower(), mater['material_name'].lower())

#                                     if fuz_dist >= 70 and fuz_dist > match_per:
#                                         match_per = fuz_dist
#                                         db_matnr = mater

#                                 if db_matnr:
                                    
#                                     print(match_per, "-----", value, "-------",  db_matnr['material_name'])

#                                     row['material'] = db_matnr['material_no']
#                                     row['material_desc'] = db_matnr['material_name']

#                                     if not row['amt_per_unit']:
#                                         row['amt_per_unit'] = db_matnr['unit_price']

#                                     if not row['hsn_code']:
#                                         row['hsn_code'] = db_matnr['hsn_code']

#                                     if not row['unit']:
#                                         row['unit'] = db_matnr['uom']

#                                     if not row['gst_per']:
#                                         row['gst_per'] = db_matnr['gst_per']
                                        
#                                     if not row['currency'] and header['currency']:
#                                         row['currency'] = header['currency']    

#                                     row['gl_account'] = db_matnr['gl_account']
#                                     row['ocr_matched'] = 'y'
#                                     # row[''] = db_matnr['']

#                                     # if no rate, quantity and amount there rate = amount
#                                     # if not quantity then make as 1

#                                     # df.loc[index, 'gross_amount'] = amoty + (
#                                     #         amoty * (int(db_matnr['gst_per']) / 100))
                                    


#                                 else:
#                                     row['ocr_matched'] = 'n'

#                                 #BOC ACU
#                                 # print(row)
#                                 #EOC ACU

#                             if exclude_no:
#                                 temp_rowItems = rowItemsByPaperAi
#                                 rowItemsByPaperAi = []

#                                 for index, eachItm in enumerate(temp_rowItems):
#                                     if index not in exclude_no:
#                                         rowItemsByPaperAi.append(eachItm)

#                                 del temp_rowItems

#                             del exclude_no
#                             del exclude_lines

#                             sqlFields = "invoice_no, item_no"
#                             sqlPer = "?, ?"

#                             # item_category = fetchSAP_PoDetails(header['ref_po_num'])

#                             # supplier_type = ''
#                             # vendor_no = ''
#                             # vendor_currency = ''

#                             # if vendor:
#                             #     if vendor['gst_treatment'] == 'overseas':
#                             #         supplier_type = 'export'
#                             #     else:
#                             #         supplier_type = 'domestic'

#                             #     vendor_no = header['supplier_id']
#                             #     vendor_currency = header['currency']

#                             # d_decider = {
#                             #     'supplier_type': supplier_type,
#                             #     'invoice_value': headerAmount,
#                             #     'invoice_type': item_category,
#                             #     'vendor_no': vendor_no,
#                             #     'currency': vendor_currency,
#                             #     'document_type': header['doc_type']
#                             # }

#                             # success, emails = assign_approcessor(mycursor=mycursor, invoice_id=invoice_no, decider=d_decider)

#                             if rowItemsByPaperAi:
#                                 #here
#                                 row = rowItemsByPaperAi[0]
            
#                                 for each in row:
#                                     sqlFields = sqlFields + ", " + str(each)
#                                     sqlPer = sqlPer + ", ?"


#                                 try:
#                                     sqlQuery = "INSERT INTO invoice_item ( " + sqlFields + ") " \
#                                                                                         "VALUES ( " + sqlPer + " )"
            
#                                     final_values = []
#                                     for index, row in enumerate(rowItemsByPaperAi):
            
#                                         raw_list = [invoice_no, index + 1]
            
#                                         for value in row.values():
#                                             raw_list.append(value)
            
#                                         final_values.append(tuple(raw_list))
            
#                                     # print(sqlQuery)
#                                     # print(final_values)
            
#                                     values = mycursor.executemany(sqlQuery, final_values)
#                                     # print(values)

#                                 except Exception as e:
#                                     print(e, "ened")

#                         # print(rowItemsByPaperAi) #accr
#                         item_accuracy = rowItemsByPaperAi

#                         item = {
#                             "invoice_no": "",
#                             "item_no": "",
#                             "material": "",
#                             "quantity": "",
#                             "amount": "",
#                             "payment_method": "",
#                             "tax_amount": "",
#                             "tax_code": "",
#                             "ref_po_no": "",
#                             "plant": ""
#                         }

#                         # paper-entry format

#                         rowItemsByPaperAi = []

#                         for eachItem in event['body-json']['line_items']:

#                             d_ItemPaperAi = {
#                                 "user_invoice_id":header['user_invoice_no'],
#                                 "invoice_id":header['invoice_id'],
#                                 'hsn_code': "",
#                                 'material': "",
#                                 'material_desc': "",
#                                 'quantity': "",
#                                 'unit': "",
#                                 'amount': "",
#                                 'currency': "",
#                                 'amt_per_unit': "",
#                                 'gst_per': "",
#                                 'gl_account': "",
#                             }

#                             for each in eachItem:
#                                 # if each == "Product Description":
#                                 #     d_ItemPaperAi['material_desc'] = eachItem[each]
#                                 # elif each == "Rate":
#                                 #     d_ItemPaperAi['amt_per_unit'] = eachItem[each].replace(',','')  
#                                 # elif each == "Unit of Measure":
#                                 #     d_ItemPaperAi['unit'] = eachItem[each]
#                                 # elif each == "Quantity":
#                                 #     d_ItemPaperAi['quantity'] = eachItem[each]
#                                 # elif each == "Currency":
#                                 #     d_ItemPaperAi['currency'] = eachItem[each]
#                                 # elif each == "Product Code":
#                                 #     d_ItemPaperAi['hsn_code'] = eachItem[each]
#                                 # elif each == "Line Total":
#                                 #     d_ItemPaperAi['amount'] = eachItem[each]
#                                 # elif each == "HSN Code":
#                                 #     d_ItemPaperAi['hsn_code'] = eachItem[each]
#                                 # # elif each == "":
#                                 # #     d_ItemPaperAi[''] = eachItem[each]
#                                 # # elif each == "":
#                                 # #     d_ItemPaperAi[''] = eachItem[each]
                                
#                                 if each == "Product Description":
#                                     d_ItemPaperAi['material_desc'] = eachItem[each]
#                                 elif each == "Rate" or each == "Unit Price":
#                                 # elif each == "Unit Price":
#                                     d_ItemPaperAi['amt_per_unit'] = eachItem[each].replace(',','')  
#                                 elif each == "Unit of Measure":
#                                     d_ItemPaperAi['unit'] = eachItem[each]
#                                 elif each == "Quantity":
#                                     d_ItemPaperAi['quantity'] = eachItem[each]
#                                 elif each == "Currency":
#                                     d_ItemPaperAi['currency'] = eachItem[each]
#                                 elif each == "Product Code":
#                                     d_ItemPaperAi['hsn_code'] = eachItem[each]
#                                 # elif each == "Line Total":
#                                 elif each == "Line Amount":
#                                     d_ItemPaperAi['amount'] = eachItem[each]
#                                 # elif each == "HSN Code":
#                                 elif each == "HS Code":
#                                     d_ItemPaperAi['hsn_code'] = eachItem[each]    

#                             if not d_ItemPaperAi['gst_per']:
#                                 d_ItemPaperAi['gst_per'] = header['tax_per']

#                             rowItemsByPaperAi.append(d_ItemPaperAi)

#                         if rowItemsByPaperAi:

#                             # print(rowItemsByPaperAi)

#                             mycursor.execute("SELECT * FROM material_master")
#                             materials = mycursor.fetchall()

#                             mycursor.execute("SELECT * FROM master where master_id = 6")
#                             db_units = mycursor.fetchall()
#                             units = []
#                             for cur in db_units:
#                                 units.append(cur['code'])
#                             del db_units

#                             exclude_lines = ['net price', 'CGST', 'CGST %', 'CGST @ %',
#                                             'SGST', 'SGST %', 'SGST @ %',
#                                             'IGST', 'IGST %', 'IGST @ %',
#                                             'TOTAL', 'UTGST/SGST', 'Conditions',
#                                             'Exchange Rate USD to EUR', 'Q 10-14898 RECEIVED 19 AUG 2020 Facilities DA']

#                             exclude_no = []

#                             # for row in rowItemsByPaperAi:
#                             for index, row in enumerate(rowItemsByPaperAi):
                                
#                                 if not row['material_desc']:
#                                     continue   

#                                 flag1 = None

#                                 for exclude in exclude_lines:

#                                     fuz_dist22 = fuzz.partial_ratio(exclude.lower(), row['material_desc'].lower())

#                                     if fuz_dist22 > 70 and not len(exclude) * 4 < len(row['material_desc']):
#                                         flag1 = True
#                                         exclude_no.append(index)
#                                         break

#                                 if flag1:
#                                     continue

#                                 match_per = 0
#                                 db_matnr = {}   

#                                 row['currency'] = row['currency'].strip()
                                
#                                 if row['currency']:
#                                     try:
#                                         row['currency'] = str(row['currency']).upper()
#                                     except:
#                                         pass

#                                 row['unit'] = row['unit'].strip()
#                                 if row['unit'] and not row['unit'] in units:
#                                     row['unit'] = None

#                                 if not row['amt_per_unit']:
#                                     row['amt_per_unit'] = None

#                                 for mater in materials:

#                                     value = row['material_desc'][0:48]

#                                     # print(fuzz.ratio(row_name.lower(), mater['name'].lower()), "ratio")
#                                     # print(fuzz.token_set_ratio(row_name, mater['name']), "token_set_ratio")
#                                     # fuz_dist = fuzz.token_set_ratio(value.lower(), mater['material_name'].lower())
#                                     # fuz_dist = fuzz.ratio(value.lower(), mater['material_name'].lower())

#                                     fuz_dist = fuzz.WRatio(value.lower(), mater['material_name'].lower())

#                                     if fuz_dist >= 70 and fuz_dist > match_per:
#                                         match_per = fuz_dist
#                                         db_matnr = mater

#                                 if db_matnr:
                                    
#                                     print(match_per, "-----", value, "-------",  db_matnr['material_name'])

#                                     row['material'] = db_matnr['material_no']
#                                     row['material_desc'] = db_matnr['material_name']

#                                     if not row['amt_per_unit']:
#                                         row['amt_per_unit'] = db_matnr['unit_price']

#                                     if not row['hsn_code']:
#                                         row['hsn_code'] = db_matnr['hsn_code']

#                                     if not row['unit']:
#                                         row['unit'] = db_matnr['uom']

#                                     if not row['gst_per']:
#                                         row['gst_per'] = db_matnr['gst_per']
                                        
#                                     if not row['currency'] and header['currency']:
#                                         row['currency'] = header['currency']    

#                                     row['gl_account'] = db_matnr['gl_account']
#                                     row['ocr_matched'] = 'y'
#                                     # row[''] = db_matnr['']

#                                     # if no rate, quantity and amount there rate = amount
#                                     # if not quantity then make as 1

#                                     # df.loc[index, 'gross_amount'] = amoty + (
#                                     #         amoty * (int(db_matnr['gst_per']) / 100))

#                                 else:
#                                     row['ocr_matched'] = 'n'

#                             if exclude_no:
#                                 temp_rowItems = rowItemsByPaperAi
#                                 rowItemsByPaperAi = []

#                                 for index, eachItm in enumerate(temp_rowItems):
#                                     if index not in exclude_no:
#                                         rowItemsByPaperAi.append(eachItm)

#                                 del temp_rowItems

#                             del exclude_no
#                             del exclude_lines

#                             sqlFields = "invoice_no, item_no"
#                             sqlPer = "?, ?"

#                             # item_category = fetchSAP_PoDetails(header['ref_po_num'])

#                             # supplier_type = ''
#                             # vendor_no = ''
#                             # vendor_currency = ''

#                             # if vendor:
#                             #     if vendor['gst_treatment'] == 'overseas':
#                             #         supplier_type = 'export'
#                             #     else:
#                             #         supplier_type = 'domestic'

#                             #     vendor_no = header['supplier_id']
#                             #     vendor_currency = header['currency']

#                             # d_decider = {
#                             #     'supplier_type': supplier_type,
#                             #     'invoice_value': headerAmount,
#                             #     'invoice_type': item_category,
#                             #     'vendor_no': vendor_no,
#                             #     'currency': vendor_currency,
#                             #     'document_type': header['doc_type']
#                             # }

#                             # success, emails = assign_approcessor(mycursor=mycursor, invoice_id=invoice_no, decider=d_decider)

#                             if rowItemsByPaperAi:
#                                 row = rowItemsByPaperAi[0]
            
#                                 for each in row:
#                                     sqlFields = sqlFields + ", " + str(each)
#                                     sqlPer = sqlPer + ", ?"

        
#                                 try:
#                                     sqlQuery = "INSERT INTO invoice_item_resent ( " + sqlFields + ") " \
#                                                                                         "VALUES ( " + sqlPer + " )"
            
#                                     final_values = []
#                                     for index, row in enumerate(rowItemsByPaperAi):
            
#                                         raw_list = [invoice_no, index + 1]
            
#                                         for value in row.values():
#                                             raw_list.append(value)
            
#                                         final_values.append(tuple(raw_list))
            
#                                     # print(sqlQuery)
#                                     # print(final_values)
            
#                                     values = mycursor.executemany(sqlQuery, final_values)
#                                     print(values)
                                    

#                                 # print(file_extension)
                                    
#                                     mydb.commit() #acu

#                                 except Exception as e:
#                                     print(e, "ened")
#                 else:
                    
#                     if header['supplier_name'] == 'PricewaterhouseCoopers Ltd':   #hello
#                         header['tax_per'] = 19

#                     sqlQuery = "INSERT INTO invoice_header (in_status, sup_status, from_supplier, user_invoice_id, ref_po_num, " \
#                             " company_code, invoice_date, posting_date, baseline_date, amount, currency, payment_method, gl_account," \
#                             " business_area, supplier_id, supplier_name, cost_center, tcs, is_igst, tax_per, tds_per, payment_terms, npo, document_type, gstin, customer_name , jurisdiction_code) " \
#                             "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? , ?)"

#                     # header["posting_date"] = str(datetime.date.today())

#                     values = (header["status"], sup_status, from_supplier, header["user_invoice_no"], header["ref_po_num"],
#                             value5["company_code"],
#                             header["invoice_date"], header["posting_date"], header["baseline_date"], header["amount"],
#                             header["currency"], header["payment_method"], header["gl_account"], header["business_area"],
#                             header["supplier_id"], header["supplier_name"], header["cost_center"], header['tcs'], header['is_igst'],
#                             header['tax_per'], header['tds'],
#                             header["payment_terms"], npo, header['doc_type'], header['gstin'], header['customer_name'],header['jurisdiction_code'])

#                     # print(sqlQuery)
#                     # print(values)
#                     mycursor.execute(sqlQuery, values)

#                     invoice_no = mycursor.lastrowid      

#                     # if not header["user_invoice_no"] or not header["ref_po_num"] or not header["invoice_date"] or not \
#                     if not header["user_invoice_no"] or not header["invoice_date"] or not \
#                             header["supplier_id"]:
#                         faulty_invoice = True

#                     # BOC ACR
#                     # print(header)
#                     header_accuracy = header 
#                     #EOC ACR

#                     item = {
#                         "invoice_no": "",
#                         "item_no": "",
#                         "material": "",
#                         "quantity": "",
#                         "amount": "",
#                         "payment_method": "",
#                         "tax_amount": "",
#                         "tax_code": "",
#                         "ref_po_no": "",
#                         "plant": ""
#                     }

#                     # paper-entry format

#                     rowItemsByPaperAi = []

#                     for eachItem in event['body-json']['line_items']:

#                         d_ItemPaperAi = {
#                             'hsn_code': "",
#                             'material': "",
#                             'material_desc': "",
#                             'quantity': "",
#                             'unit': "",
#                             'amount': "",
#                             'currency': "",
#                             'amt_per_unit': "",
#                             'gst_per': "",
#                             'gl_account': ""
#                         }

#                         for each in eachItem:
#                             # if each == "Product Description":
#                             #     d_ItemPaperAi['material_desc'] = eachItem[each]
#                             # elif each == "Rate":
#                             #     d_ItemPaperAi['amt_per_unit'] = eachItem[each].replace(',','')  
#                             # elif each == "Unit of Measure":
#                             #     d_ItemPaperAi['unit'] = eachItem[each]
#                             # elif each == "Quantity":
#                             #     d_ItemPaperAi['quantity'] = eachItem[each]
#                             # elif each == "Currency":
#                             #     d_ItemPaperAi['currency'] = eachItem[each]
#                             # elif each == "Product Code":
#                             #     d_ItemPaperAi['hsn_code'] = eachItem[each]
#                             # elif each == "Line Total":
#                             #     d_ItemPaperAi['amount'] = eachItem[each]
#                             # elif each == "HSN Code":
#                             #     d_ItemPaperAi['hsn_code'] = eachItem[each]
#                             # # elif each == "":
#                             # #     d_ItemPaperAi[''] = eachItem[each]
#                             # # elif each == "":
#                             # #     d_ItemPaperAi[''] = eachItem[each]
                            
#                             if each == "Product Description":
#                                 d_ItemPaperAi['material_desc'] = eachItem[each]
#                             elif each == "Rate" or each == "Unit Price":
#                             # elif each == "Unit Price":
#                                 d_ItemPaperAi['amt_per_unit'] = eachItem[each].replace(',','')  
#                             elif each == "Unit of Measure":
#                                 d_ItemPaperAi['unit'] = eachItem[each]
#                             elif each == "Quantity":
#                                 d_ItemPaperAi['quantity'] = eachItem[each]
#                             elif each == "Currency":
#                                 d_ItemPaperAi['currency'] = eachItem[each]
#                             elif each == "Product Code":
#                                 d_ItemPaperAi['hsn_code'] = eachItem[each]
#                             # elif each == "Line Total":
#                             elif each == "Line Amount":
#                                 d_ItemPaperAi['amount'] = eachItem[each]
#                             # elif each == "HSN Code":
#                             elif each == "HS Code":
#                                 d_ItemPaperAi['hsn_code'] = eachItem[each]    

#                         if not d_ItemPaperAi['gst_per']:
#                             d_ItemPaperAi['gst_per'] = header['tax_per']

#                         rowItemsByPaperAi.append(d_ItemPaperAi)

#                     if rowItemsByPaperAi:

#                         # print(rowItemsByPaperAi)

#                         mycursor.execute("SELECT * FROM material_master")
#                         materials = mycursor.fetchall()

#                         mycursor.execute("SELECT * FROM master where master_id = 6")
#                         db_units = mycursor.fetchall()
#                         units = []
#                         for cur in db_units:
#                             units.append(cur['code'])
#                         del db_units

#                         exclude_lines = ['net price', 'CGST', 'CGST %', 'CGST @ %',
#                                         'SGST', 'SGST %', 'SGST @ %',
#                                         'IGST', 'IGST %', 'IGST @ %',
#                                         'TOTAL', 'UTGST/SGST', 'Conditions',
#                                         'Exchange Rate USD to EUR', 'Q 10-14898 RECEIVED 19 AUG 2020 Facilities DA']

#                         exclude_no = []

#                         # for row in rowItemsByPaperAi:
#                         # item_accuracy = [] 
#                         # item_accuracy = rowItemsByPaperAi
#                         for index, row in enumerate(rowItemsByPaperAi):
                            
#                             if not row['material_desc']:
#                                 continue   

#                             flag1 = None

#                             for exclude in exclude_lines:

#                                 fuz_dist22 = fuzz.partial_ratio(exclude.lower(), row['material_desc'].lower())

#                                 if fuz_dist22 > 70 and not len(exclude) * 4 < len(row['material_desc']):
#                                     flag1 = True
#                                     exclude_no.append(index)
#                                     break

#                             if flag1:
#                                 continue

#                             match_per = 0
#                             db_matnr = {}   

#                             row['currency'] = row['currency'].strip()
                            
#                             if row['currency']:
#                                 try:
#                                     row['currency'] = str(row['currency']).upper()
#                                 except:
#                                     pass

#                             row['unit'] = row['unit'].strip()
#                             if row['unit'] and not row['unit'] in units:
#                                 row['unit'] = None

#                             if not row['amt_per_unit']:
#                                 row['amt_per_unit'] = None

#                             for mater in materials:

#                                 value = row['material_desc'][0:48]

#                                 # print(fuzz.ratio(row_name.lower(), mater['name'].lower()), "ratio")
#                                 # print(fuzz.token_set_ratio(row_name, mater['name']), "token_set_ratio")
#                                 # fuz_dist = fuzz.token_set_ratio(value.lower(), mater['material_name'].lower())
#                                 # fuz_dist = fuzz.ratio(value.lower(), mater['material_name'].lower())

#                                 fuz_dist = fuzz.WRatio(value.lower(), mater['material_name'].lower())

#                                 if fuz_dist >= 70 and fuz_dist > match_per:
#                                     match_per = fuz_dist
#                                     db_matnr = mater

#                             if db_matnr:
                                
#                                 print(match_per, "-----", value, "-------",  db_matnr['material_name'])

#                                 row['material'] = db_matnr['material_no']
#                                 row['material_desc'] = db_matnr['material_name']

#                                 if not row['amt_per_unit']:
#                                     row['amt_per_unit'] = db_matnr['unit_price']

#                                 if not row['hsn_code']:
#                                     row['hsn_code'] = db_matnr['hsn_code']

#                                 if not row['unit']:
#                                     row['unit'] = db_matnr['uom']

#                                 if not row['gst_per']:
#                                     row['gst_per'] = db_matnr['gst_per']
                                    
#                                 if not row['currency'] and header['currency']:
#                                     row['currency'] = header['currency']    

#                                 row['gl_account'] = db_matnr['gl_account']
#                                 row['ocr_matched'] = 'y'
#                                 # row[''] = db_matnr['']

#                                 # if no rate, quantity and amount there rate = amount
#                                 # if not quantity then make as 1

#                                 # df.loc[index, 'gross_amount'] = amoty + (
#                                 #         amoty * (int(db_matnr['gst_per']) / 100))

#                             else:
#                                 row['ocr_matched'] = 'n'
                            
#                             # BOC ACR
#                             # item_accuracy = []
#                             item_accuracy.append(row)
#                             # print(item_accuracy)
#                             #EOC ACR

#                         if exclude_no:
#                             temp_rowItems = rowItemsByPaperAi
#                             rowItemsByPaperAi = []

#                             for index, eachItm in enumerate(temp_rowItems):
#                                 if index not in exclude_no:
#                                     rowItemsByPaperAi.append(eachItm)

#                             del temp_rowItems

#                         del exclude_no
#                         del exclude_lines

#                         sqlFields = "invoice_no, item_no"
#                         sqlPer = "?, ?"

#                         # item_category = fetchSAP_PoDetails(header['ref_po_num'])

#                         # supplier_type = ''
#                         # vendor_no = ''
#                         # vendor_currency = ''

#                         # if vendor:
#                         #     if vendor['gst_treatment'] == 'overseas':
#                         #         supplier_type = 'export'
#                         #     else:
#                         #         supplier_type = 'domestic'

#                         #     vendor_no = header['supplier_id']
#                         #     vendor_currency = header['currency']

#                         # d_decider = {
#                         #     'supplier_type': supplier_type,
#                         #     'invoice_value': headerAmount,
#                         #     'invoice_type': item_category,
#                         #     'vendor_no': vendor_no,
#                         #     'currency': vendor_currency,
#                         #     'document_type': header['doc_type']
#                         # }

#                         # success, emails = assign_approcessor(mycursor=mycursor, invoice_id=invoice_no, decider=d_decider)
#                         #here
#                         item_accuracy = rowItemsByPaperAi
                        
#                         for v in rowItemsByPaperAi:
#                             if(v['quantity']):
#                                 v['quantity'] = str(v['quantity']).replace(",","")
                                
                                
#                         if rowItemsByPaperAi:
#                             row = rowItemsByPaperAi[0]
        
#                             for each in row:
#                                 sqlFields = sqlFields + ", " + str(each)
#                                 sqlPer = sqlPer + ", ?"

    
#                             try:
#                                 sqlQuery = "INSERT INTO invoice_item ( " + sqlFields + ") " \
#                                                                                     "VALUES ( " + sqlPer + " )"
        
#                                 final_values = []
                                
#                                 # if rowItemsByPaperAi != '': #changed
                                
#                                     # for det in rowItemsByPaperAi:
#                                     #     mycursor.execute("SELECT gst_per FROM einvoice_db_portal.material_master where material_no = ?" , det['material'] )
#                                     #     val_gst = mycursor.fetchone()
#                                     #     if val_gst != '':
#                                     #         if str(val_gst['gst_per']).isnumeric() :
#                                     #             det['gst_per'] = val_gst['gst_per']
#                                     #         else:
#                                     #             if str(val_gst['gst_per']) == 'VA':
#                                     #                 det['gst_per'] = 19
#                                     #             if str(val_gst['gst_per']) == '0I':
#                                     #                 det['gst_per'] = 0
#                                     #     # if det['material_desc'] == 'Our charges for services rendered to ArcelorMittal Liberia Holdings Limited' or det['material_desc'] ==  'Communication, printing, stationery and sundry expenses':
#                                     #     if det['material_desc'] == 'Our charges for services rendered to ArcelorMittal Liberia Holdings Limited' or det['material_desc'] ==  'Communication, printing, stationery and sundry expenses' or det['material_desc'] == 'Service for – July 2022' or det['material_desc'] == 'Service charges for May 2019 as per agreement' or det['material_desc'] == '10.113,78':
#                                     #         det['material'] = ' '
                                
#                                 for index, row in enumerate(rowItemsByPaperAi):
        
#                                     raw_list = [invoice_no, index + 1]
        
#                                     for value in row.values():
#                                         raw_list.append(value)
        
#                                     final_values.append(tuple(raw_list))
        
#                                 # print(sqlQuery)
#                                 # print(final_values)
        
#                                 mycursor.executemany(sqlQuery, final_values)
#                                 mydb.commit() #acu
                                
        
#                             except Exception as e:
#                                 print(e, "ened")

#                     else:
#                         faulty_invoice = True

#                     # item_category = fetchSAP_PoDetails(header['ref_po_num'])

#                 item_category = []
#                 supplier_type = ''
#                 vendor_no = ''
#                 vendor_currency = ''

#                 if vendor:
#                     if vendor['gst_treatment'] == 'overseas':
#                         supplier_type = 'export'
#                     else:
#                         supplier_type = 'domestic'

#                     vendor_no = header['supplier_id']
#                     vendor_currency = header['currency']

#                 d_decider = {
#                     'supplier_type': supplier_type,
#                     # 'invoice_value': headerAmount,
#                     'invoice_value': 0,
#                     'invoice_type': item_category,
#                     'vendor_no': vendor_no,
#                     'currency': vendor_currency,
#                     'document_type': header['doc_type']
#                 }

#                 success, emails = assign_approcessor(mycursor=mycursor, invoice_id=invoice_no, decider=d_decider)
#                 flagg = 'n'
#                 if faulty_invoice:
#                     flagg = 'y'

#                 link = "https://l8m6p8a76e.execute-api.eu-central-1.amazonaws.com/dev/attachment?file_name=" \
#                         + pdfTextExtractionS3ObjectName + "&bucket=" + pdfTextExtractionS3Bucket

#                 filenamett, file_extension = os.path.splitext(pdfTextExtractionS3ObjectName)

#                     # print(file_extension)
#                 content_type = ''

#                 if file_extension == ".pdf":
#                     content_type = "application/pdf"
#                 elif file_extension == ".png":
#                     content_type == "image/png"
#                 elif file_extension == ".jpg":
#                     content_type == "image/jpg"
#                 elif file_extension == ".jpeg":
#                     content_type == "image/jpg"

#                 values = (invoice_no, pdfTextExtractionS3ObjectName, content_type, pdfTextExtractionS3Bucket, link)
#                 sqlQuery = "INSERT INTO file_storage (file_id, name, mime_type, file_path, file_link) VALUES ( ?, ?, ?, ?, ?)"

#                 mycursor.execute(sqlQuery, values)

#                 values = (invoice_no, pdfTextExtractionS3ObjectName)
#                 mycursor.execute(
#                         "UPDATE mail_message SET invoice_no = ? WHERE filename = ?", values)
#                 mycursor.execute(
#                         "UPDATE aws_mail_message SET invoice_no = ? WHERE filename = ?", values)
#                 # print(values)

#                 mycursor.execute("SELECT * FROM elipo_setting where key_name = 'approval_auto_trigger'")
#                 detgb = mycursor.fetchone()

#                 res = False
#                 instatus = "new"

#                 if detgb:
#                     if detgb['value1'] == "on":

#                         if flagg != "y":

#                             npo = ""

#                             if header['ref_po_num']:
#                                 npo = "y"
#                             else:
#                                 npo = "n"

#                             r_decider = {
#                                 'discount': 0,
#                                     # 'amount': headerAmount,
#                                 'amount': 0,
#                                 'cost_center': "",
#                                 'currency': header['currency'],
#                                 'gl_account': str(header["gl_account"]),
#                                 'npo': header["npo"],
#                                 'vendor_no': str(header["supplier_id"]),
#                                 'department_id': "",
#                                 'item_category': item_category,
#                                 'document_type': header['doc_type']
#                             }

#                             res = create_approvals(mycursor=mycursor, invoice_id=invoice_no, decider=r_decider,
#                                                     working_person="ocr")

#                 if res == False:
#                         # if emails:
#                         #     sendMailNotifications(invoice_id=invoice_no, emails=emails)
#                     pass
#                 else:
#                     instatus = "inapproval"

#                 sqlQuery = "update invoice_header set in_status = ?, amount = ?, faulty_invoice= ? " \
#                             "where invoice_no = ?"
#                     # values = (instatus, str(headerAmount), flagg, invoice_no)
#                 values = (instatus, str(0), flagg, invoice_no)

#                 mycursor.execute(sqlQuery, values)

#                 # print(header_accuracy , item_accuracy[0]) #acu
#                 mycursor.execute("select * from elipo_setting where key_name = 'accuracy_parameter'")
#                 ocr_accurcy_on = mycursor.fetchone()
#                 if ocr_accurcy_on and ocr_accurcy_on['value1'] == "on":
#                     h_acr , i_acr ,overall = find_accuracy(header_accuracy ,item_accuracy ,mycursor)
#                     if overall != 0:
#                         sqlQuery = "UPDATE invoice_header SET head_accuracy = ?, item_accuracy =? , ocr_inv = 'y', ocr_accuracy = ? WHERE invoice_no = ? "
#                         values = (  str(h_acr ), str(i_acr),str(overall), invoice_no)
#                         mycursor.execute(sqlQuery, values)

                

#                 mydb.commit()  #acu

#         # except Exception as e:
#         #     print(e)
#         #     mydb.rollback()

#         #     try:
#         #         with mydb.cursor() as mycursor:

#         #             values = (pdfTextExtractionS3ObjectName,)
#         #             # mycursor.execute("DELETE FROM mail_message WHERE filename = ?", values)
#         #             mycursor.execute(
#         #                 "UPDATE mail_message SET is_processed = 'n' WHERE filename = ?",
#         #                 values)

#         #             mydb.commit()

#         #     finally:
#         #         pass

#         finally:
#             mydb.close()

#     else:

#         try:
#             with mydb.cursor() as mycursor:

#                 values = ("new",)

#                 mycursor.execute("INSERT INTO invoice_header (in_status) VALUES (?)", values)

#                 invoice_no = mycursor.lastrowid

#                 link = "https://l8m6p8a76e.execute-api.eu-central-1.amazonaws.com/dev/attachment?file_name=" \
#                        + pdfTextExtractionS3ObjectName + "&bucket=" + pdfTextExtractionS3Bucket

#                 filenamett, file_extension = os.path.splitext(pdfTextExtractionS3ObjectName)

#                 # print(file_extension)
#                 content_type = ''

#                 if file_extension == ".pdf":
#                     content_type = "application/pdf"
#                 elif file_extension == ".png":
#                     content_type == "image/png"
#                 elif file_extension == ".jpg":
#                     content_type == "image/jpg"
#                 elif file_extension == ".jpeg":
#                     content_type == "image/jpg"

#                 values = (invoice_no, pdfTextExtractionS3ObjectName, content_type, pdfTextExtractionS3Bucket, link)
#                 sqlQuery = "INSERT INTO file_storage (file_id, name, mime_type, file_path, file_link) VALUES ( ?, ?, ?, ?, ?)"

#                 mycursor.execute(sqlQuery, values)

#                 values = (invoice_no, pdfTextExtractionS3ObjectName)
#                 mycursor.execute(
#                     "UPDATE mail_message SET invoice_no = ? WHERE filename = ?", values)
#                 mycursor.execute(
#                     "UPDATE aws_mail_message SET invoice_no = ? WHERE filename = ?", values)

#                 # values = (pdfTextExtractionS3ObjectName,)
#                 # # mycursor.execute("DELETE FROM mail_message WHERE filename = ?", values)
#                 # mycursor.execute("UPDATE mail_message SET is_processed = 'n' WHERE filename = ?",
#                 #                  values)
                
#                 mydb.commit() #acu

#         except Exception as e:
#             print(e)
#             mydb.rollback()

#         finally:
#             mydb.close()

# # event = {'body-json': {'version': '1.1', 'input_filename': '1643366101633_D1643366089.645919___testpayment2801.pdf', 'encoding': 'UTF-8', 'language 639.1': '', 'metadata': '', 'normalized_resolution': [2550, 3300], 'key_value_pairs': [{'display_name': 'Document Title', 'data_type': 'str', 'key': 'DocumentTitle_name', 'value': 'TAX INVOICE', 'value_bbox': '(1098.184534907341, 425.5138546228409, 1369.876053929329, 466.5935754776001)', 'prob': '0.994674801826477'}, {'display_name': 'Invoice Number', 'data_type': 'str', 'key': ' Invoice No .:', 'value': '280122', 'value_bbox': '(1269.453451037407, 506.6417768597603, 1400.2277165651321, 537.6752838492393)', 'prob': '1.0'}, {'display_name': 'Invoice Date', 'data_type': 'str', 'key': ' Invoice Date', 'value': '28.01.2022', 'value_bbox': '(1730.8740377426147, 580.868250131607, 1928.5253047943115, 615.0075763463974)', 'prob': '0.9999607801437378'}, {'display_name': 'PO Number', 'data_type': 'str', 'key': ' Ref PO No .:', 'value': '4500020305', 'value_bbox': '(1721.6423392295837, 498.1787145137787, 1953.7656426429749, 535.2844029664993)', 'prob': '0.9999911785125732'}, {'display_name': 'PO Date', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Customer Name', 'data_type': 'str', 'key': '-', 'value': 'PEOL Technologies Pvt . Ltd', 'value_bbox': '(417.8685039281845, 1031.799566745758, 1998.414695262909, 1382.514613866806)', 'prob': '0.9971240162849426'}, {'display_name': 'Vendor Name', 'data_type': 'str', 'key': '-', 'value': 'SAP LABS', 'value_bbox': '(413.2237896323204, 496.0290804505348, 1035.0324511528015, 864.272090792656)', 'prob': '0.9994171857833862'}, {'display_name': 'Vendor Tax ID', 'data_type': 'str', 'key': ' GSTIN :', 'value': '29AAFCS3649P1ZJ', 'value_bbox': '(591.8838769197464, 873.8898038864136, 960.2423965930939, 905.7296633720398)', 'prob': '0.9999998807907104'}, {'display_name': 'Sub Total', 'data_type': 'str', 'key': ' Sub Total', 'value': '35400', 'value_bbox': '(1880.0922274589539, 1994.246131181717, 1984.585440158844, 2023.6678183078766)', 'prob': '0.9999984502792358'}, {'display_name': 'Total Amount', 'data_type': 'str', 'key': ' Grand Total', 'value': '35400', 'value_bbox': '(1875.7192969322205, 2243.595814704895, 1988.130283355713, 2276.569426059723)', 'prob': '0.9999489784240724'}, {'display_name': 'Discount', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'CGST', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'SGST', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'IGST', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'TCS', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Discount', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Taxable Value', 'data_type': 'str', 'key': '-', 'value': '35400', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}], 'line_items': [{'Product Description': 'Gold', 'HSN Code': '', 'Quantity': '10kg', 'Unit of Measure': '', 'Rate': '1000', 'Line Total': '11800', 'VAT Amount': ''}, {'Product Description': 'Silver', 'HSN Code': '', 'Quantity': '10kg', 'Unit of Measure': '', 'Rate': '1000', 'Line Total': '11800', 'VAT Amount': ''}, {'Product Description': 'Brass', 'HSN Code': '', 'Quantity': '10kg', 'Unit of Measure': '', 'Rate': '1000', 'Line Total': '11800', 'VAT Amount': ''}], 'validator_url': 'http://deepcognition.ydns.eu:13202/validate?task_id=1643366101633'}, 'params': {'path': {}, 'querystring': {'task_id': '1643366101633'}, 'header': {'Accept': '*/*', 'Accept-Encoding': 'gzip, deflate', 'Content-type': 'application/json', 'Host': '7firau5x7b.execute-api.eu-central-1.amazonaws.com', 'User-Agent': 'python-requests/2.25.1', 'X-Amzn-Trace-Id': 'Root=1-61f3c6f4-29e7d4aa2214e2c4756cae8c', 'X-Forwarded-For': '69.216.18.116', 'X-Forwarded-Port': '443', 'X-Forwarded-Proto': 'https'}}, 'stage-variables': {'schema': 'einvoice_db_portal', 'lambda_alias': 'dev', 'non_ocr_attachment': 'einvoice-attachments', 'notification_email': 'elipotest@gmail.com', 'ocr_bucket': 'textract-console-ap-southeast-1-b8779ae1-dd77-4d3c-a56d-443a5db', 'oauth_ret': 'https://7firau5x7b.execute-api.eu-central-1.amazonaws.com/einvoice-v1/gmail-s3', 'ocr_bucket_folder': 'old-dev/', 'bucket_gmail_credential': 'file-bucket-emp', 'secreat': 'test/einvoice/secret', 'clientsec_location': 'client_secret.json', 'attach_stage': 'dev'}, 'context': {'account-id': '', 'api-id': '7firau5x7b', 'api-key': '', 'authorizer-principal-id': '', 'caller': '', 'cognito-authentication-provider': '', 'cognito-authentication-type': '', 'cognito-identity-id': '', 'cognito-identity-pool-id': '', 'http-method': 'POST', 'stage': 'einvoice-v1', 'source-ip': '69.216.18.116', 'user': '', 'user-agent': 'python-requests/2.25.1', 'user-arn': '', 'request-id': '9ecf40ad-d3d5-40b7-823f-a23aaf32912a', 'resource-id': '5pzpnl', 'resource-path': '/paper-entry'}}
# # event = {'body-json': {'version': '1.1', 'input_filename': '1643605692480_D1643605687.186461___t8.pdf', 'encoding': 'UTF-8', 'language 639.1': '', 'metadata': '', 'normalized_resolution': [2550, 3300], 'key_value_pairs': [{'display_name': 'Document Title', 'data_type': 'str', 'key': 'DocumentTitle_name', 'value': 'TAX INVOICE', 'value_bbox': '(1095.2661663293839, 430.3769499063492, 1368.4388011693954, 469.5665270090103)', 'prob': '0.9969594478607178'}, {'display_name': 'Invoice Number', 'data_type': 'str', 'key': ' Invoice No .:', 'value': 'INV20 / 40', 'value_bbox': '(1278.6938041448593, 525.2340584993362, 1439.7798031568527, 558.9035779237747)', 'prob': '0.9999996423721312'}, {'display_name': 'Invoice Date', 'data_type': 'str', 'key': ' Invoice Date :', 'value': '23.10.2020', 'value_bbox': '(1743.4711933135986, 613.2200583815575, 1930.9033513069153, 642.1619072556496)', 'prob': '0.9999639987945556'}, {'display_name': 'PO Number', 'data_type': 'str', 'key': ' Ref PO No', 'value': '4500020020', 'value_bbox': '(1723.8024473190308, 521.4528366923332, 1956.989085674286, 553.9488717913628)', 'prob': '0.9999923706054688'}, {'display_name': 'PO Date', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Customer Name', 'data_type': 'str', 'key': '-', 'value': 'PEOL Technologies Pvt . Ltd', 'value_bbox': '(403.74169796705246, 1133.2609176635742, 2001.8021821975708, 1497.599869966507)', 'prob': '0.9967361092567444'}, {'display_name': 'Vendor Name', 'data_type': 'str', 'key': '-', 'value': 'SAP LABS', 'value_bbox': '(413.1036087870598, 507.7669233083725, 1033.6601078510284, 939.3307328224182)', 'prob': '0.99936181306839'}, {'display_name': 'Vendor Tax ID', 'data_type': 'str', 'key': ' GSTIN :', 'value': '29 AAFCS3649P1ZJ', 'value_bbox': '(608.8542580604553, 953.3710420131683, 960.5026245117188, 985.6180608272552)', 'prob': '0.9999998807907104'}, {'display_name': 'Sub Total', 'data_type': 'str', 'key': ' Sub Total', 'value': '35400', 'value_bbox': '(1879.8223614692688, 2178.4395039081573, 1987.5221014022827, 2209.9701583385468)', 'prob': '0.9999984502792358'}, {'display_name': 'Total Amount', 'data_type': 'str', 'key': ' Grand Total', 'value': '35400', 'value_bbox': '(1876.8249213695526, 2456.551158428192, 1989.3322885036469, 2485.94491481781)', 'prob': '0.9999489784240724'}, {'display_name': 'Discount', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'CGST', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'SGST', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'IGST', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'TCS', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Discount', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Taxable Value', 'data_type': 'str', 'key': '-', 'value': '35400', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}], 'line_items': [{'Product Description': 'Gold', 'HSN Code': '', 'Quantity': '9kg', 'Unit of Measure': '', 'Rate': '10009', 'Line Total': '11800', 'VAT Amount': ''}, {'Product Description': 'Silver', 'HSN Code': '', 'Quantity': '10kg', 'Unit of Measure': '', 'Rate': '1000', 'Line Total': '11800', 'VAT Amount': ''}, {'Product Description': 'Brass', 'HSN Code': '', 'Quantity': '10kg', 'Unit of Measure': '', 'Rate': '1000', 'Line Total': '11800', 'VAT Amount': ''}], 'validator_url': 'http://deepcognition.ydns.eu:13202/validate?task_id=1643605692480'}, 'params': {'path': {}, 'querystring': {'task_id': '1643605692480'}, 'header': {'Accept': '*/*', 'Accept-Encoding': 'gzip, deflate', 'Content-type': 'application/json', 'Host': '7firau5x7b.execute-api.eu-central-1.amazonaws.com', 'User-Agent': 'python-requests/2.25.1', 'X-Amzn-Trace-Id': 'Root=1-61f76edd-0b2123e74178879e476ee1ef', 'X-Forwarded-For': '69.216.18.116', 'X-Forwarded-Port': '443', 'X-Forwarded-Proto': 'https'}}, 'stage-variables': {'schema': 'einvoice_db_portal', 'lambda_alias': 'dev', 'non_ocr_attachment': 'einvoice-attachments', 'notification_email': 'elipotest@gmail.com', 'ocr_bucket': 'textract-console-ap-southeast-1-b8779ae1-dd77-4d3c-a56d-443a5db', 'oauth_ret': 'https://7firau5x7b.execute-api.eu-central-1.amazonaws.com/einvoice-v1/gmail-s3', 'ocr_bucket_folder': 'old-dev/', 'bucket_gmail_credential': 'file-bucket-emp', 'secreat': 'test/einvoice/secret', 'clientsec_location': 'client_secret.json', 'attach_stage': 'dev'}, 'context': {'account-id': '', 'api-id': '7firau5x7b', 'api-key': '', 'authorizer-principal-id': '', 'caller': '', 'cognito-authentication-provider': '', 'cognito-authentication-type': '', 'cognito-identity-id': '', 'cognito-identity-pool-id': '', 'http-method': 'POST', 'stage': 'einvoice-v1', 'source-ip': '69.216.18.116', 'user': '', 'user-agent': 'python-requests/2.25.1', 'user-arn': '', 'request-id': '48dd6012-cda0-4fb2-baa5-b766e123c042', 'resource-id': '5pzpnl', 'resource-path': '/paper-entry'}}
# # event = {'body-json': {'version': '1.1', 'input_filename': '1643630580689_I1643630568.583068___t11.pdf', 'encoding': 'UTF-8', 'language 639.1': '', 'metadata': '', 'normalized_resolution': [2550, 3300], 'key_value_pairs': [{'display_name': 'Document Type', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Vendor Name', 'data_type': 'str', 'key': '-', 'value': 'AMWIN SYSTEMS PRIVATE LIMITED', 'value_bbox': '(150.15394315123558, 256.3565120100975, 846.2918758392334, 547.9378134012222)', 'prob': '0.999372661113739'}, {'display_name': 'Vendor Tax ID', 'data_type': 'str', 'key': ' GSTIN / UIN :', 'value': 'UIN : 29AAPCA1129E1ZR', 'value_bbox': '(294.7503827512264, 424.31745529174805, 718.9538776874542, 449.40319061279297)', 'prob': '0.9999359846115112'}, {'display_name': 'Invoice Number', 'data_type': 'str', 'key': ' Invoice No.', 'value': '42212288', 'value_bbox': '(1204.5593351125717, 307.4212498962879, 1372.7051228284836, 340.0199107825756)', 'prob': '1.0'}, {'display_name': 'Invoice Date', 'data_type': 'str', 'key': ' Dated', 'value': '13 - May - 2021', 'value_bbox': '(1714.6869957447052, 306.5836228430271, 1943.4869349002838, 343.60109344124794)', 'prob': '0.999998927116394'}, {'display_name': 'PO Number', 'data_type': 'str', 'key': " Buyer's Order No.", 'value': 'PEOL / PO / 2020-21 / 352', 'value_bbox': '(1208.2355707883835, 607.7844813466072, 1601.2609630823135, 643.21678429842)', 'prob': '0.999997854232788'}, {'display_name': 'Total Amount', 'data_type': 'str', 'key': '-', 'value': '39240.00', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}], 'line_items': [{'Charge Code': '', 'HS Code': '997315', 'Product Description': '', 'Quantity': '3Nos', 'Unit Price': '3,000.00', 'Line Amount': '9,000.00', 'Currency': '', 'VAT Amount': ''}, {'Charge Code': '', 'HS Code': '997315', 'Product Description': '', 'Quantity': '3Nos', 'Unit Price': '3,000.00', 'Line Amount': '9,000.00', 'Currency': '', 'VAT Amount': ''}], 'validator_url': 'http://deepcognition.ydns.eu:13202/validate?task_id=1643630580689'}, 'params': {'path': {}, 'querystring': {'task_id': '1643630580689'}, 'header': {'Accept': '*/*', 'Accept-Encoding': 'gzip, deflate', 'Content-type': 'application/json', 'Host': '7firau5x7b.execute-api.eu-central-1.amazonaws.com', 'User-Agent': 'python-requests/2.25.1', 'X-Amzn-Trace-Id': 'Root=1-61f7d04f-167bc514322244fb3a8d837b', 'X-Forwarded-For': '69.216.18.116', 'X-Forwarded-Port': '443', 'X-Forwarded-Proto': 'https'}}, 'stage-variables': {'schema': 'einvoice_db_portal', 'lambda_alias': 'dev', 'non_ocr_attachment': 'einvoice-attachments', 'notification_email': 'elipotest@gmail.com', 'ocr_bucket': 'textract-console-ap-southeast-1-b8779ae1-dd77-4d3c-a56d-443a5db', 'oauth_ret': 'https://7firau5x7b.execute-api.eu-central-1.amazonaws.com/einvoice-v1/gmail-s3', 'ocr_bucket_folder': 'old-dev/', 'bucket_gmail_credential': 'file-bucket-emp', 'secreat': 'test/einvoice/secret', 'clientsec_location': 'client_secret.json', 'attach_stage': 'dev'}, 'context': {'account-id': '', 'api-id': '7firau5x7b', 'api-key': '', 'authorizer-principal-id': '', 'caller': '', 'cognito-authentication-provider': '', 'cognito-authentication-type': '', 'cognito-identity-id': '', 'cognito-identity-pool-id': '', 'http-method': 'POST', 'stage': 'einvoice-v1', 'source-ip': '69.216.18.116', 'user': '', 'user-agent': 'python-requests/2.25.1', 'user-arn': '', 'request-id': 'aad5e3b8-d646-4d76-b98a-a1cec1b8e0b9', 'resource-id': '5pzpnl', 'resource-path': '/paper-entry'}}
# event = {'body-json': {'version': '1.1', 'input_filename': '1648619293613_ss2.pdf2.pdf', 'encoding': 'UTF-8', 'language 639.1': '', 'metadata': '', 'normalized_resolution': [2550, 3300], 'key_value_pairs': [{'display_name': 'Document Type', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Vendor Name', 'data_type': 'str', 'key': '-', 'value': 'ARABYADS FZ LLC', 'value_bbox': '(1709.5528542995453, 415.59155881404877, 2120.0379073619843, 681.6122531890869)', 'prob': '0.9988859295845032'}, {'display_name': 'Vendor Tax ID', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Invoice Number', 'data_type': 'str', 'key': ' Invoice Number', 'value': 'INV - 1739', 'value_bbox': '(1226.0354161262512, 595.530116558075, 1363.177102804184, 625.3655523061752)', 'prob': '0.9999998807907104'}, {'display_name': 'Invoice Date', 'data_type': 'str', 'key': ' Invoice Date', 'value': '10 Jun 2021', 'value_bbox': '(1227.5852769613266, 463.99478763341904, 1397.5007325410843, 492.83691197633743)', 'prob': '0.999979853630066'}, {'display_name': 'PO Number', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Total Amount', 'data_type': 'str', 'key': ' Invoice Total USD', 'value': '1,536.00', 'value_bbox': '(2145.4070806503296, 1210.6752812862396, 2272.9702949523926, 1243.995863199234)', 'prob': '0.9999498128890992'}], 'line_items': [{'Charge Code': '', 'HS Code': '', 'Product Description': 'Xcite - KSA - CPS - May revenue', 'Quantity': '1.00', 'Unit Price': '88.00', 'Line Amount': '88.00', 'Currency': '', 'VAT Amount': '0.00'}, {'Charge Code': '', 'HS Code': '', 'Product Description': 'Xcite - Kuwait - CPS - May revenue', 'Quantity': '1.00', 'Unit Price': '1,448.00', 'Line Amount': '1,448.00', 'Currency': '', 'VAT Amount': '0.00'}], 'validator_url': 'http://deepcognition.ydns.eu:13202/validate?task_id=1648619293613'}, 'params': {'path': {}, 'querystring': {'task_id': '1648619293613'}, 'header': {'Accept': '*/*', 'Accept-Encoding': 'gzip, deflate', 'Content-type': 'application/json', 'Host': '7firau5x7b.execute-api.eu-central-1.amazonaws.com', 'User-Agent': 'python-requests/2.25.1', 'X-Amzn-Trace-Id': 'Root=1-6243ef52-6900d0f37729c8b93e3c629a', 'X-Forwarded-For': '69.216.18.116', 'X-Forwarded-Port': '443', 'X-Forwarded-Proto': 'https'}}, 'stage-variables': {'schema': 'einvoice_db_portal', 'lambda_alias': 'dev', 'non_ocr_attachment': 'einvoice-attachments', 'notification_email': 'elipotest@gmail.com', 'ocr_bucket': 'textract-console-ap-southeast-1-b8779ae1-dd77-4d3c-a56d-443a5db', 'oauth_ret': 'https://7firau5x7b.execute-api.eu-central-1.amazonaws.com/einvoice-v1/gmail-s3', 'ocr_bucket_folder': 'old-dev/', 'bucket_gmail_credential': 'file-bucket-emp', 'secreat': 'test/einvoice/secret', 'clientsec_location': 'client_secret.json', 'attach_stage': 'dev'}, 'context': {'account-id': '', 'api-id': '7firau5x7b', 'api-key': '', 'authorizer-principal-id': '', 'caller': '', 'cognito-authentication-provider': '', 'cognito-authentication-type': '', 'cognito-identity-id': '', 'cognito-identity-pool-id': '', 'http-method': 'POST', 'stage': 'einvoice-v1', 'source-ip': '69.216.18.116', 'user': '', 'user-agent': 'python-requests/2.25.1', 'user-arn': '', 'request-id': '700edef7-e2b0-418f-8b4a-551bfacf32c3', 'resource-id': '5pzpnl', 'resource-path': '/paper-entry'}}
# event = {'body-json': {'version': '1.1', 'input_filename': '1651119619513_D1651119606.715771___testusinvoice.pdf', 'encoding': 'UTF-8', 'language 639.1': '', 'metadata': '', 'normalized_resolution': [2550, 3300], 'key_value_pairs': [{'display_name': 'Document Title', 'data_type': 'str', 'key': 'DocumentTitle_name', 'value': 'TAX INVOICE', 'value_bbox': '(1091.7107999324799, 426.52585208415985, 1371.2608873844147, 462.01047599315643)', 'prob': '0.9920478463172911'}, {'display_name': 'Invoice Number', 'data_type': 'str', 'key': ' Invoice No .:', 'value': '01280422', 'value_bbox': '(1270.8617895841599, 508.9106574654579, 1439.0079706907272, 535.6902346014977)', 'prob': '1.0'}, {'display_name': 'Invoice Date', 'data_type': 'str', 'key': ' Invoice Date :', 'value': '28-04-2022', 'value_bbox': '(1733.933436870575, 582.9716116189957, 1935.070538520813, 612.4842703342438)', 'prob': '0.9999983310699464'}, {'display_name': 'PO Number', 'data_type': 'str', 'key': ' Ref PO No .:', 'value': '4500020488', 'value_bbox': '(1726.1136174201965, 508.9416369795799, 1928.2530784606934, 534.9322691559792)', 'prob': '0.9999908208847046'}, {'display_name': 'PO Date', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Customer Name', 'data_type': 'str', 'key': '-', 'value': 'PEOL Technologies Pvt . Ltd', 'value_bbox': '(420.0091391801834, 1029.8925071954727, 2002.44380235672, 1386.6169899702072)', 'prob': '0.996918797492981'}, {'display_name': 'Vendor Name', 'data_type': 'str', 'key': '-', 'value': 'C.E.B. New York', 'value_bbox': '(414.50889855623245, 488.64262998104095, 1040.5619502067566, 901.9610792398453)', 'prob': '0.9983652234077454'}, {'display_name': 'Vendor Tax ID', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Sub Total', 'data_type': 'str', 'key': ' Sub Total', 'value': '2000', 'value_bbox': '(1841.6489124298096, 1784.3051433563232, 1929.6275854110718, 1809.7834825515747)', 'prob': '0.9999992847442628'}, {'display_name': 'Total Amount', 'data_type': 'str', 'key': ' Grand Total', 'value': '2000', 'value_bbox': '(1841.7675197124481, 1906.6364586353302, 1930.1285684108734, 1933.800083398819)', 'prob': '0.9999423027038574'}, {'display_name': 'Discount', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'CGST', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'SGST', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'IGST', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'TCS', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Discount', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Taxable Value', 'data_type': 'str', 'key': '-', 'value': '2000', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}], 'line_items': [{'Product Description': '1500-500 ( 10W30 MOTOR OIL QT . )', 'HSN Code': '', 'Quantity': '2 QT', 'Unit of Measure': '', 'Rate': '1000', 'Line Total': '2000', 'VAT Amount': ''}], 'validator_url': 'http://deepcognition.ydns.eu:13202/validate?task_id=1651119619513'}, 'params': {'path': {}, 'querystring': {'task_id': '1651119619513'}, 'header': {'Accept': '*/*', 'Accept-Encoding': 'gzip, deflate', 'Content-type': 'application/json', 'Host': '7firau5x7b.execute-api.eu-central-1.amazonaws.com', 'User-Agent': 'python-requests/2.25.1', 'X-Amzn-Trace-Id': 'Root=1-626a1623-3adad43c4e1032a36a9a6534', 'X-Forwarded-For': '69.216.18.116', 'X-Forwarded-Port': '443', 'X-Forwarded-Proto': 'https'}}, 'stage-variables': {'schema': 'einvoice_db_portal', 'non_ocr_attachment': 'einvoice-attachments', 'lambda_alias': 'dev', 'aws_mail_bucket': 'application-email', 'notification_email': 'elipotest@gmail.com', 'ocr_bucket': 'textract-console-ap-southeast-1-b8779ae1-dd77-4d3c-a56d-443a5db', 'ocr_bucket_folder': 'old-dev/', 'oauth_ret': 'https://7firau5x7b.execute-api.eu-central-1.amazonaws.com/einvoice-v1/gmail-s3', 'bucket_gmail_credential': 'file-bucket-emp', 'clientsec_location': 'client_secret.json', 'secreat': 'test/einvoice/secret', 'attach_stage': 'dev'}, 'context': {'account-id': '', 'api-id': '7firau5x7b', 'api-key': '', 'authorizer-principal-id': '', 'caller': '', 'cognito-authentication-provider': '', 'cognito-authentication-type': '', 'cognito-identity-id': '', 'cognito-identity-pool-id': '', 'http-method': 'POST', 'stage': 'einvoice-v1', 'source-ip': '69.216.18.116', 'user': '', 'user-agent': 'python-requests/2.25.1', 'user-arn': '', 'request-id': '1d1128fb-99f2-4e2f-a0a2-8adb2c27ef00', 'resource-id': '5pzpnl', 'resource-path': '/paper-entry'}}
# event = {'body-json': {'version': '1.1', 'input_filename': '1651119619513_D1651119606.715771___testusinvoice.pdf', 'encoding': 'UTF-8', 'language 639.1': '', 'metadata': '', 'normalized_resolution': [2550, 3300], 'key_value_pairs': [{'display_name': 'Document Title', 'data_type': 'str', 'key': 'DocumentTitle_name', 'value': 'TAX INVOICE', 'value_bbox': '(1091.7107999324799, 426.52585208415985, 1371.2608873844147, 462.01047599315643)', 'prob': '0.9920478463172911'}, {'display_name': 'Invoice Number', 'data_type': 'str', 'key': ' Invoice No .:', 'value': '01280422', 'value_bbox': '(1270.8617895841599, 508.9106574654579, 1439.0079706907272, 535.6902346014977)', 'prob': '1.0'}, {'display_name': 'Invoice Date', 'data_type': 'str', 'key': ' Invoice Date :', 'value': '28-04-2022', 'value_bbox': '(1733.933436870575, 582.9716116189957, 1935.070538520813, 612.4842703342438)', 'prob': '0.9999983310699464'}, {'display_name': 'PO Number', 'data_type': 'str', 'key': ' Ref PO No .:', 'value': '4500020488', 'value_bbox': '(1726.1136174201965, 508.9416369795799, 1928.2530784606934, 534.9322691559792)', 'prob': '0.9999908208847046'}, {'display_name': 'PO Date', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Customer Name', 'data_type': 'str', 'key': '-', 'value': 'PEOL Technologies Pvt . Ltd', 'value_bbox': '(420.0091391801834, 1029.8925071954727, 2002.44380235672, 1386.6169899702072)', 'prob': '0.996918797492981'}, {'display_name': 'Vendor Name', 'data_type': 'str', 'key': '-', 'value': 'C.E.B. New York', 'value_bbox': '(414.50889855623245, 488.64262998104095, 1040.5619502067566, 901.9610792398453)', 'prob': '0.9983652234077454'}, {'display_name': 'Vendor Tax ID', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Sub Total', 'data_type': 'str', 'key': ' Sub Total', 'value': '2000', 'value_bbox': '(1841.6489124298096, 1784.3051433563232, 1929.6275854110718, 1809.7834825515747)', 'prob': '0.9999992847442628'}, {'display_name': 'Total Amount', 'data_type': 'str', 'key': ' Grand Total', 'value': '2000', 'value_bbox': '(1841.7675197124481, 1906.6364586353302, 1930.1285684108734, 1933.800083398819)', 'prob': '0.9999423027038574'}, {'display_name': 'Discount', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'CGST', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'SGST', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'IGST', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'TCS', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Discount', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Taxable Value', 'data_type': 'str', 'key': '-', 'value': '2000', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}], 'line_items': [{'Product Description': '1500-500 ( 10W30 MOTOR OIL QT . )', 'HSN Code': '', 'Quantity': '2 QT', 'Unit of Measure': '', 'Rate': '1000', 'Line Total': '2000', 'VAT Amount': ''}], 'validator_url': 'http://deepcognition.ydns.eu:13202/validate?task_id=1651119619513'}, 'params': {'path': {}, 'querystring': {'task_id': '1651119619513'}, 'header': {'Accept': '*/*', 'Accept-Encoding': 'gzip, deflate', 'Content-type': 'application/json', 'Host': '7firau5x7b.execute-api.eu-central-1.amazonaws.com', 'User-Agent': 'python-requests/2.25.1', 'X-Amzn-Trace-Id': 'Root=1-626a1623-3adad43c4e1032a36a9a6534', 'X-Forwarded-For': '69.216.18.116', 'X-Forwarded-Port': '443', 'X-Forwarded-Proto': 'https'}}, 'stage-variables': {'schema': 'einvoice_db_portal', 'non_ocr_attachment': 'einvoice-attachments', 'lambda_alias': 'dev', 'aws_mail_bucket': 'application-email', 'notification_email': 'elipotest@gmail.com', 'ocr_bucket': 'textract-console-ap-southeast-1-b8779ae1-dd77-4d3c-a56d-443a5db', 'ocr_bucket_folder': 'old-dev/', 'oauth_ret': 'https://7firau5x7b.execute-api.eu-central-1.amazonaws.com/einvoice-v1/gmail-s3', 'bucket_gmail_credential': 'file-bucket-emp', 'clientsec_location': 'client_secret.json', 'secreat': 'test/einvoice/secret', 'attach_stage': 'dev'}, 'context': {'account-id': '', 'api-id': '7firau5x7b', 'api-key': '', 'authorizer-principal-id': '', 'caller': '', 'cognito-authentication-provider': '', 'cognito-authentication-type': '', 'cognito-identity-id': '', 'cognito-identity-pool-id': '', 'http-method': 'POST', 'stage': 'einvoice-v1', 'source-ip': '69.216.18.116', 'user': '', 'user-agent': 'python-requests/2.25.1', 'user-arn': '', 'request-id': '1d1128fb-99f2-4e2f-a0a2-8adb2c27ef00', 'resource-id': '5pzpnl', 'resource-path': '/paper-entry'}}

# print(postPaperAiResponse(event,''))


# def enable_xray(event):
#     if 'Authorization' in event['params']['header'] :
#        atoken =  event['params']['header']['Authorization']
    
#     if atoken != '':
#         flg = requests.get("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/getemail", headers={"Content-Type":"application/json", "Authorization":atoken})

#     return json.loads(flg.text)['body']


# def get_stored_credentials(user_id):
#     try:
#         s3 = boto3.client("s3")
#         encoded_file = s3.get_object(Bucket=elipo_bucket, Key=user_id)
#         creds = pickle.loads(encoded_file["Body"].read())
#         return creds
#     except Exception as excep:
#         creds = None
#         # print(str(excep))
#         # raise NoUserIdException(excep)


# def create_message(sender, to, subject, message_text, cc):
#     message = email.mime.text.MIMEText(message_text, 'html')

#     message['to'] = to
#     message['from'] = sender
#     message['subject'] = subject
#     message['cc'] = cc

#     encoded = base64.urlsafe_b64encode(message.as_string().encode("utf-8"))
#     return {'raw': encoded.decode("utf-8")}


# def send_message(service, user_id, message):
#     try:
#         message = (service.users().messages().send(userId=user_id, body=message).execute())
#         # print("Message Id: ", message['id'])
#         return message
#     # except errors.HttpError as error:
#     except Exception as error:
#         print("An error occurred: ", error)


# def build_service(credentials):
#     http = httplib2.Http()
#     http = credentials.authorize(http)
#     return build('gmail', 'v1', http=http)


# def sendMailNotifications(invoice_id, emails, body1=None, user=None):
#     # user_id = "mosbyted116@gmail.com"
#     user_id = elipo_email

#     if not body1:
#         body1 = ''

#     credentials = get_stored_credentials(user_id)

#     if credentials and credentials.refresh_token is not None:
#         service = build_service(credentials=credentials)

#         mail_subject = 'ELIPO Notification'
#         mail_cc = ''

#         message_body = '''<html>
#                 <body  >
#             <div style="  max-width: 500px; margin: auto; padding: 10px; ">
#                     <div style=" width:100%; align-content: center;text-align: center;">
#                         <img src="https://einvoice-public-images.s3.ap-south-1.amazonaws.com/ELIPO+logo.png" alt="Italian Trulli" style="vertical-align:middle; width: 140px;height:50px;text-align: center;"  >
#                     </div>

#                     <div style=" width:100%; align-content:left;text-align:left;">
#                             <hr style="width:100%; text-align: center; border: 2px solid #0000001A;opacity: 0.5; border-radius: 2px;" >
#                         </div>
#                     <b>

#                 <span style="vertical-align: middle;text-align: left;font: 600  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;" >
#                     Dear User,
#                 </span> 
#                 <br><br>
#                 <span style="vertical-align: middle;text-align: left;font: 600  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;" >
#                     Invoice No: <span style="font: 500  15px/22px ;">{},</span>
#                 </span> 

#                 <br>
#                 <span style="vertical-align: middle;text-align: left;font: 600  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;" >
#                    Is generated by OCR and assigned for approval to you.
#                 </span> 
#                 </b> 
#                 <br>
#                 <br>
#                 <div style=" width:100%;align-content: center;text-align: center; ">
#                     <a href="https://ywi7o0pxhc.execute-api.eu-central-1.amazonaws.com/production/login" target="_blank">
#                         <button style="border: none;box-shadow: 1px 1px 5px 1px #5a9e9b; background:rgb(80, 219, 212) 0% 0% no-repeat padding-box; border-radius: 7px;opacity: 1;width:180px; height: 35px;outline: none;border: none;" > 
#                             <span style="vertical-align: middle; text-align: left;font: 600 16px/23px Open Sans;letter-spacing: 0px;color: whitesmoke;white-space: nowrap;opacity: 1;">Login to ELIPO</span>
#                         </button>
#                     </a>
#                 </div>

#                 <br><br>
#                 <div style="width:100%;">
#                 <span style="vertical-align: middle; text-align: left;font: 500  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;">Regards,</span>
#                 <br>
#                 <span style="vertical-align: middle;text-align: left;font: 500  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;">Team ELIPO</span>
#                 </div>
#             <div style=" width:100%; align-content:left;text-align:left;">
#                         <hr style="width:100%; text-align: center; border: 2px solid #0000001A;opacity: 0.5; border-radius: 2px;" >
#                     </div>


#                 <div style="width:100%;align-content: center;text-align: center;">
#                     <span style=" text-align: center;font: 600 16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 0.7;">This message was sent to you by ELIPO</span>
#                 </div>
#                 <div style="width:100%;align-content: center;text-align: center;">
#                     <img src="https://einvoice-public-images.s3.ap-south-1.amazonaws.com/elipo+logo_2.png" alt="Italian Trulli" style="text-align: center;width: 80px;height: 30px;" >
#                 </div>

#                 <br>
#             </div>
#                 </body></html>'''.format(invoice_id)

#         message = create_message(sender=elipo_email, to=emails, subject=mail_subject,
#                                  message_text=str(message_body), cc=mail_cc)

#         send_message(service=service, user_id="me", message=message)


# def find_vendor(mycursor, r_vendor, idate):
#     vendor_data = None
#     vendor = {}

#     if r_vendor['gstin']:
#         sqlQuery = "SELECT v.*, d.value2 FROM vendor_master v " \
#                    "left join dropdown d on v.gst_treatment = d.value1 where " \
#                    "(v.gstin_uin = ? and d.drop_key = 'vendor_gst_treatment')"
#         values = (r_vendor['gstin'],)
#         mycursor.execute(sqlQuery, values)
#         vendor = mycursor.fetchone()

#     if not vendor and r_vendor['vendor_name']:

#         mycursor.execute("SELECT v.*, d.value2 FROM vendor_master v left join dropdown d on v.gst_treatment = d.value1")
#         allVendors = mycursor.fetchall()

#         # fuzzScore = 0
    
#         for eachVendor in allVendors:

#             dist_sc = fuzz.ratio(eachVendor['vendor_name'].lower(), r_vendor['vendor_name'].lower())
#             if dist_sc > 75:
#                 # if dist_sc > 75 and fuzzScore < dist_sc:
#                 vendor = eachVendor
#                 # fuzzScore = dist_sc
#                 break

#     if vendor:

#         due = None

#         igst = 'n'

#         if idate and vendor['payment_terms']:

#             due = idate

#             if vendor['payment_terms'] == "On the day invoice raised":
#                 due = idate
#             elif vendor['payment_terms'] == "On the month end":
#                 last = calendar.monthrange(idate.year, idate.month)
#                 idate = datetime.datetime.strptime(idate, '%Y-%m-%d')
#                 due = idate.date() + datetime.timedelta(days=last[1] - idate.day)
#             else:
#                 idate = datetime.datetime.strptime(idate, '%Y-%m-%d')
#                 due = idate.date() + datetime.timedelta(days=int(vendor['payment_terms']))

#         if vendor['gst_per'] == "igst":
#             igst = 'y'
#         else:
#             igst = 'n'

#         vendor_data = {
#             'currency': vendor['currency'],
#             'payment_terms': vendor['payment_terms'],
#             'due_date': due,
#             'vendor_code': vendor['vendor_no'],
#             'vendor_name': vendor['vendor_name'],
#             'is_igst': igst,
#             'tds': vendor['tds'],
#             'gst_treatment': vendor['gst_treatment'],
#             'gstin': vendor['gstin_uin']
#         }

#     return vendor_data


# def fetch_default_vendor(mycursor, idate=None):
#     vendor_data = None

#     mycursor.execute("SELECT * FROM dropdown where drop_key = 'default-master-detail'")
#     d_master = mycursor.fetchall()

#     defaults = {}
#     vendor = {}

#     if d_master:

#         for each in d_master:
#             defaults[each['value1']] = each['value2']

#         if defaults['supplier_id']:
#             values = (defaults['supplier_id'],)
#             mycursor.execute(
#                 "SELECT v.*, d.value2 FROM vendor_master v left join dropdown d "
#                 "on v.gst_treatment = d.value1 where v.vendor_no = ?", values)
#             vendor = mycursor.fetchone()

#         due = None

#         igst = 'n'

#         if vendor:
#             if idate and vendor['payment_terms']:

#                 due = idate

#                 if vendor['payment_terms'] == "On the day invoice raised":
#                     due = idate
#                 elif vendor['payment_terms'] == "On the month end":
#                     last = calendar.monthrange(idate.year, idate.month)
#                     idate = datetime.datetime.strptime(idate, '%Y-%m-%d')
#                     due = idate.date() + datetime.timedelta(days=last[1] - idate.day)
#                 else:
#                     idate = datetime.datetime.strptime(idate, '%Y-%m-%d')
#                     due = idate.date() + datetime.timedelta(days=int(vendor['payment_terms']))

#             if vendor and vendor['gst_per'] == "igst":
#                 igst = 'y'
#             else:
#                 igst = 'n'

#             vendor_data = {
#                 'currency': vendor['currency'],
#                 'payment_terms': vendor['payment_terms'],
#                 'due_date': due,
#                 'vendor_code': vendor['vendor_no'],
#                 'vendor_name': vendor['vendor_name'],
#                 'is_igst': igst,
#                 'tds': vendor['tds'],
#                 'gst_treatment': vendor['gst_treatment'],
#                 'gstin': vendor['gstin_uin'],
#                 'company_code': defaults['company_code'],

#             }

#     return vendor_data


# def clearDate(rawDate):
    
#     if rawDate != '' and rawDate[2] != '.' : #changed
#         if rawDate.index('-') == 4:
#             date = rawDate.split('-')
#             fdate = date[2]+ '.'+date[1]+'.'+date[0]
#             rawDate = fdate
    
#     dateF = None

#     for index in range(6):  
#         try:
#             date_time_strtt = str(rawDate)
#             date_time_strtt = date_time_strtt.strip()
#             date_time_str = ""

#             for c in date_time_strtt:
#                 if c.isalnum():
#                     date_time_str += c

#             if index == 0:
#                 date_time_obj = datetime.datetime.strptime(date_time_str, '%d%m%Y')

#             elif index == 1:
#                 date_time_obj = datetime.datetime.strptime(date_time_str, '%d%B%Y')

#             elif index == 2:
#                 date_time_obj = datetime.datetime.strptime(date_time_str, '%d%b%Y')

#             elif index == 3:
#                 date_time_obj = datetime.datetime.strptime(date_time_str, '%d%b%y')

#             elif index == 4:
#                 date_time_obj = datetime.datetime.strptime(date_time_str, '%d%B%y')

#             elif index == 5:
#                 date_time_str = date_time_str[0:1] + date_time_str[3:]
#                 date_time_obj = datetime.datetime.strptime(date_time_str, '%d%B%Y')

#             dateF = str(date_time_obj.date())

#             return dateF

#         except ValueError as e:
#             pass


# def fetchSAP_PoDetails(poNumber):
#     item_category = []
#     try:

#         s = requests.Session()
#         s.headers.update({'Connection': 'keep-alive'})

#         url = "http://182.72.219.94:8000/zgetpo/GetPo"
#         params = {'sap-client': '800'}

#         headersFetch = {'X-CSRF-TOKEN': 'Fetch'}
#         y = s.get(url, auth=HTTPBasicAuth('developer31', 'peol@123'), headers=headersFetch, params=params, timeout=10)
#         token = y.headers["X-CSRF-TOKEN"]

#         headers = {"X-CSRF-TOKEN": token, 'Content-type': 'application/json'}
#         records = {
#             "ebeln": poNumber
#         }

#         x = s.post(url, json=records, auth=HTTPBasicAuth('developer31', 'peol@123'), headers=headers, params=params,
#                    timeout=10)

#         if x.status_code != 500:
#             payload = x.json()

#             # item_category = []
#             for each in payload[0]['POITEM']:
#                 item_category.append(each['ITEM_CAT'])

#     except requests.exceptions.RequestException as msg:
#         pass

#     except requests.exceptions.ConnectionError as msg:
#         pass

#     return item_category


# def create_approvals(mycursor, invoice_id, decider, working_person):
#     try:

#         mycursor.execute(
#             "SELECT a.* FROM rule a inner join rule_snro b on a.rule_id = b.rule_id where b.is_approval = 'y' and a.is_on = 'y'")
#         all_rules = mycursor.fetchall()

#         rule_ids = [sub['rule_id'] for sub in all_rules]
#         rule_ids = set(rule_ids)
#         rule_ids = list(rule_ids)

#         rule = []

#         default = []
#         for ruleID in rule_ids:
#             rules = []

#             for row in all_rules:
#                 if not default and row[
#                     'decider'] == "default":  # ruleID == row['rule_id'] and row['decider'] != "default":
#                     default.append(row)

#                 elif row['decider'] == "default_assignment":
#                     pass

#                 elif ruleID == row['rule_id']:
#                     rules.append(row)

#             noOfRules = len(rules)
#             countMatches = 0

#             for row in rules:

#                 if row['decider_type'] == "number":

#                     if row['decider'] == "amount" or row["decider"] == "discount":
#                         d_value = float(decider[row['decider']])
#                     else:
#                         d_value = int(decider[row['decider']])

#                     if row['operator'] == "=" and d_value == int(row['d_value']):
#                         countMatches += 1
#                     elif row['operator'] == ">" and d_value > int(row['d_value']):
#                         countMatches += 1
#                     elif row['operator'] == "<" and d_value < int(row['d_value']):
#                         countMatches += 1
#                     elif row['operator'] == "between" and int(row['d_value']) <= d_value <= int(row['d_value2']):
#                         countMatches += 1

#                 elif row['decider_type'] == "string":
#                     if row["decider"] == "item_category":
#                         for each in decider["item_category"]:
#                             if each == str(row['d_value']):
#                                 countMatches += 1
#                                 break

#                     elif decider[row['decider']] == str(row['d_value']):
#                         countMatches += 1

#             if noOfRules == countMatches and noOfRules != 0:
#                 rule.append(row)

#         if not rule and default:
#             rule.append(default[0])

#         if rule:

#             values = [sub['rule_id'] for sub in rule]
#             values = set(values)
#             values = list(values)

#             format_strings = ','.join(['?'] * len(values))
#             sqlQuery = "select distinct r.*, ru.approval_type, ru.ifnot_withindays from rule_approver r " \
#                        "left join rule ru on r.rule_key = ru.rule_id " \
#                        "where r.rule_key in (%s) " \
#                        "order by field(approval_type, 'series', 'parallel', 'single'), " \
#                        "r.level desc, r.rule_key" % format_strings
#             mycursor.execute(sqlQuery, tuple(values))
#             all_approvers = mycursor.fetchall()

#             multiple_app = []
#             allrules = []

#             main_rule = None
#             main_rule = all_approvers[0]

#             for row in all_approvers:

#                 if row["approver"] == 999999999:
#                     return False

#                 allrules.append(row['rule_key'])

#                 if all_approvers[0]['rule_key'] == row['rule_key']:
#                     data = {
#                         "isgroup": row["isgroup"],
#                         "approver": row["approver"],
#                         'level': row['level'],
#                         'approval_type': main_rule['approval_type'],
#                         'rule_id': row['rule_key']
#                     }
#                     multiple_app.append(data)

#             allrules = set(allrules)
#             allrules = list(allrules)
#             allrules.remove(all_approvers[0]['rule_key'])

#             add_level = all_approvers[0]['level']

#             for rule in allrules:

#                 level_s = 0

#                 for row in all_approvers:

#                     if rule == row['rule_key']:

#                         dupl_app = False

#                         for ex in multiple_app:
#                             if ex['isgroup'] == row['isgroup'] and ex['approver'] == row['approver']:
#                                 dupl_app = True
#                                 break

#                         if dupl_app:
#                             continue

#                         if level_s < row['level']:
#                             level_s = row['level']

#                         data = {
#                             "isgroup": row["isgroup"],
#                             "approver": row["approver"],
#                             'level': row['level'] + add_level,
#                             'approval_type': row['approval_type'],
#                             'rule_id': row['rule_key']
#                         }
#                         multiple_app.append(data)

#                 if level_s > 0:
#                     add_level += level_s

#             values = []
#             exc_days = int(main_rule['ifnot_withindays'])

#             escalate_when = datetime.date.today() + datetime.timedelta(days=exc_days)

#             groups = []
#             members = []

#             for row in multiple_app:

#                 if row['isgroup'] == 'y' and (
#                         (row['approval_type'] == "single" or row['approval_type'] == "parallel") or row['level'] == 1):
#                     groups.append(row['approver'])

#                 elif (row['approval_type'] == 'single' or row['approval_type'] == 'parallel') or row['level'] == 1:
#                     members.append(row['approver'])

#                 value = (
#                     row['isgroup'], row['approver'], invoice_id, "n", row['level'], row['approval_type'], escalate_when,
#                     row['rule_id'])
#                 values.append(value)

#             format_strings_grp = ','.join(['%s'] * len(groups))
#             format_strings_mem = ','.join(['%s'] * len(members))
#             emails = None

#             if members and groups:
#                 mix = members + groups
#                 mycursor.execute(
#                     "select email from member where member_id in ({}) or group_id in ({})".format(
#                         format_strings_mem, format_strings_grp), tuple(mix))
#                 emails = mycursor.fetchall()

#             elif groups:
#                 mycursor.execute(
#                     "select email from member where group_id in ({})".format(format_strings_grp),
#                     tuple(groups))
#                 emails = mycursor.fetchall()

#             else:
#                 mycursor.execute(
#                     "select email from member where member_id in ({})".format(format_strings_mem),
#                     tuple(members))
#                 emails = mycursor.fetchall()

#             delrec = (invoice_id,)
#             mycursor.execute("delete from approval where invoice_no = %s", delrec)
#             del delrec

#             if values:
#                 mycursor.executemany(
#                     "INSERT INTO approval (isgroup, approver, invoice_no, isapproved,"
#                     " approval_level, approval_type, escalate_date, rule_id) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)",
#                     values)

#                 if emails:

#                     email_Add = None
#                     for each in emails:
#                         if not email_Add:
#                             email_Add = each['email']
#                         else:
#                             email_Add += "," + each['email']

#                     # sendMailNotifications(invoice_id=invoice_id, mycursor=mycursor, emails=emails, user=working_person)
#                     sendMailNotifications(invoice_id=invoice_id, emails=email_Add, user=working_person)

#             return True

#         else:
#             return False

#     finally:
#         pass


# # invoice_id = 856
# # decider = {
# #                 'discount': 0,
# #                 'amount': 150001.24,
# #                 'cost_center': '1000',
# #                 'currency': 'INR',
# #                 'gl_account': '113310',
# #                 'npo': 'n',
# #                 'vendor_no': '2000000075',
# #                 'department_id': '13',
# #                 'item_category': ['0']
# #             }

# # with mydb.cursor() as mycursor:
# #     print(create_approvals(mycursor, invoice_id, decider))


# def assign_approcessor(mycursor, invoice_id, decider):

#     try:

#         del_rec = (invoice_id,)
#         mycursor.execute("delete from assignment where invoice_no = %s", del_rec)
#         del del_rec

#         default = None
#         email_str = ""

#         mycursor.execute("SELECT * FROM elipo_setting where key_name = 'app_assignment'")
#         appdet = mycursor.fetchone()

#         if appdet:

#             email_str = ''

#             if appdet['value1'] == "on":

#                 mycursor.execute(
#                     "SELECT a.* FROM rule a inner join rule_snro b"
#                     " on a.rule_id = b.rule_id "
#                     "where b.is_approval = 'n' and a.is_on = 'y'")
#                 all_rules = mycursor.fetchall()

#                 rule_ids = []
#                 email_str = ''
#                 rule = None

#                 if all_rules:
#                     rule_ids = [sub['rule_id'] for sub in all_rules]
#                     rule_ids = set(rule_ids)
#                     rule_ids = list(rule_ids)

#                     rule = []

#                     rules = {}

#                     for ruleId in rule_ids:
#                         rules[ruleId] = []

#                     default = None

#                     for row in all_rules:
#                         if row['decider'] == 'default_assignment':
#                             default = row
#                         else:
#                             rules[row['rule_id']].append(row)

#                     if default:
#                         rule_ids.remove(default['rule_id'])
#                         del rules[default['rule_id']]

#                 if rule_ids:
#                     # noOfRules = len(rules)

#                     for eachRule in rules:

#                         countMatches = 0
#                         noOfCondn = len(rules[eachRule])

#                         for row in rules[eachRule]:

#                             if row['decider_type'] == "number":

#                                 if row['decider'] == "invoice_value":
#                                     d_value = float(decider[row['decider']])
#                                 else:
#                                     d_value = int(decider[row['decider']])

#                                 if row['operator'] == "=" and d_value == int(row['d_value']):
#                                     countMatches += 1
#                                 elif row['operator'] == ">" and d_value > int(row['d_value']):
#                                     countMatches += 1
#                                 elif row['operator'] == "<" and d_value < int(row['d_value']):
#                                     countMatches += 1
#                                 elif row['operator'] == "between" and int(row['d_value']) <= d_value <= int(
#                                         row['d_value2']):
#                                     countMatches += 1

#                             elif row['decider_type'] == "string":
#                                 if row["decider"] == "invoice_type":
#                                     for each in decider["invoice_type"]:
#                                         if each == str(row['d_value']):
#                                             countMatches += 1
#                                             break

#                                 elif decider[row['decider']] == str(row['d_value']):
#                                     countMatches += 1

#                         if noOfCondn == countMatches:
#                             rule.append(row)

#                 # print(default)
#                 if not rule and default:
#                     rule.append(default)

#                 if rule:
#                     # print(rule)

#                     values = [sub['rule_id'] for sub in rule]
#                     values = set(values)
#                     values = list(values)

#                     format_strings = ','.join(['%s'] * len(values))

#                     sqlQuery = "select isgroup, approver from rule_approver where rule_key in (%s) " % format_strings
#                     # print(sqlQuery, values)
#                     mycursor.execute(sqlQuery, tuple(values))
#                     all_app = mycursor.fetchall()

#                     all_approvers = [dict(t) for t in {tuple(d.items()) for d in all_app}]

#                     groups = []
#                     members = []
#                     values = []

#                     for row in all_approvers:

#                         value = (
#                             row['isgroup'], row['approver'], invoice_id)
#                         values.append(value)

#                         if row['isgroup'] == 'y':
#                             groups.append(row['approver'])
#                         else:
#                             members.append(row['approver'])

#                     format_strings_grp = ','.join(['%s'] * len(groups))
#                     format_strings_mem = ','.join(['%s'] * len(members))
#                     emails = None

#                     audit_trail = 'Invoice ' + str(invoice_id) + ' assigned to '
#                     trail_grp = ''

#                     if members and groups:
#                         mix = members + groups
#                         mycursor.execute(
#                             "select concat(fs_name, ' ', ls_name) as name, email, group_id from member "
#                             "where member_id in ({}) or group_id in ({})".format(
#                                 format_strings_mem, format_strings_grp), tuple(mix))
#                         emails = mycursor.fetchall()

#                         # mycursor.execute(
#                         #     "select group_id, name from group where group_id in ({})".format(
#                         #         format_strings_grp), tuple(groups))
#                         # grp_details = mycursor.fetchall()

#                         sqlQueryt = "select group_id, name from " + dbScehma + ".group where group_id in ({})".format(
#                             format_strings_grp)
#                         mycursor.execute(sqlQueryt, tuple(groups))
#                         grp_details = mycursor.fetchall()

#                         if grp_details:
#                             for each in grp_details:
#                                 if not trail_grp:
#                                     trail_grp += each['name']
#                                 else:
#                                     trail_grp += ', ' + each['name']

#                     elif groups:
#                         mycursor.execute(
#                             "select concat(fs_name, ' ', ls_name) as name, email, group_id from member "
#                             "where group_id in ({})".format(format_strings_grp),
#                             tuple(groups))
#                         emails = mycursor.fetchall()

#                         # mycursor.execute(
#                         #     "select group_id, name from group where group_id in ({})".format(
#                         #         format_strings_grp), tuple(groups))
#                         # grp_details = mycursor.fetchall()

#                         sqlQuery = "select group_id, name from " + dbScehma + ".group where group_id in ({})".format(
#                             format_strings_grp)

#                         mycursor.execute(sqlQuery, tuple(groups))
#                         grp_details = mycursor.fetchall()

#                         if grp_details:
#                             for each in grp_details:
#                                 if not trail_grp:
#                                     trail_grp += each['name']
#                                 else:
#                                     trail_grp += ', ' + each['name']

#                     else:
#                         mycursor.execute(
#                             "select concat(fs_name, ' ', ls_name) as name, email, group_id from member "
#                             "where member_id in ({})".format(format_strings_mem),
#                             tuple(members))
#                         emails = mycursor.fetchall()

#                     if emails:

#                         for each in emails:
#                             if not email_str:
#                                 email_str = each['email']
#                             else:
#                                 email_str += ',' + each['email']
#                             if not each['group_id'] in groups:
#                                 if not trail_grp:
#                                     trail_grp += each['name']
#                                 else:
#                                     trail_grp += ', ' + each['name']

#                         audit_trail += trail_grp

#                     if values:

#                         mycursor.executemany(
#                             "INSERT INTO assignment (isgroup, app, invoice_no) VALUES (%s, %s, %s)",
#                             values)

#                         values = (invoice_id, '', 'new', audit_trail)
#                         sqlQuery = "insert into invoice_audit (invoice_no, prev_status, " \
#                                    "new_status, msg) values (%s, %s, %s, %s)"
#                         mycursor.execute(sqlQuery, values)

#                         return True, email_str


#             else:
#                 values = ("y", 6, invoice_id)
#                 mycursor.execute(
#                     "INSERT INTO assignment (isgroup, app, invoice_no) VALUES (%s, %s, %s)", values)

#                 mycursor.execute(
#                     "select concat(fs_name, ' ', ls_name) as name, email, group_id from member "
#                     "where group_id = '6'")
#                 emails = mycursor.fetchall()

#                 if emails:
#                     for each in emails:
#                         if email_str:
#                             email_str += "," + each['email']
#                         else:
#                             email_str = each['email']

#                 return False, email_str

#         return False, email_str

#     except Exception as e:
#         print(e)
#         pass

#     finally:
#         pass

# #statement working fine for event passed not all statements are tested might get error
# def patchPaperAIResponce(event=None, context=None):
#     print(event)     

#     pdfTextExtractionJobId = event['params']['querystring']['task_id']

#     pdfTextExtractionStatus = "processed"

#     pdfTextExtractionS3ObjectName = ""

#     # client = boto3.client(
#     # 'secretsmanager',
#     # region_name='eu-central-1',
#     # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
#     # aws_secret_access_key='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' )

#     # secret = "test/einvoice/secret"
#     # secret = event["stage-variables"]["secreat"]

#     # secret = os.environ.get('secret')

#     global elipo_bucket
#     elipo_bucket = 'file-bucket-emp'
#     # elipo_bucket = os.environ.get('user_cred_bucket')

#     global elipo_email
#     elipo_email = 'elipotest@gmail.com'
#     # elipo_email = os.environ.get('email_notification_mail')

#     global dbScehma
#     dbScehma = ' DBADMIN '

#     global pdfTextExtractionS3Bucket
#     pdfTextExtractionS3Bucket = event["stage-variables"]["ocr_bucket"]

#     # resp = client.get_secret_value(
#     #     SecretId=secret
#     # )  

#     # secretDict = json.loads(resp['SecretString'])

#     mydb = hdbcliConnect()
    
#     print(event)

#     if pdfTextExtractionStatus == 'processed':

#         try:
#             with mydb.cursor() as mycursor:
#                 defSchemaQuery = "set schema " + dbScehma
#                 mycursor.execute(defSchemaQuery)
                
#                 mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
#                 on = mycursor.fetchone()
#                 if on['value1'] == 'on':
#                     chk = enable_xray(event)
#                     if chk['Enable'] == True:
#                         patch_all() 
#                         print(event)

#                 values = (pdfTextExtractionJobId,)
#                 mycursor.execute("SELECT * FROM mail_message where job_id = ?", values)
#                 job_details = mycursor.fetchone()

#                 if job_details:
#                     pdfTextExtractionS3ObjectName = job_details['filename']

#                     if job_details['invoice_no']:
#                         values = (job_details['invoice_no'],) 
#                         mycursor.execute("select invoice_no, in_status FROM invoice_header where invoice_no = ?", values)
#                         old_inv_header = mycursor.fetchone()

#                         if old_inv_header and old_inv_header['in_status'] != "new":
#                             return {
#                                 'statuscode': 200,
#                                 'body': json.dumps("Not in new stage")
#                             }


#                 faulty_invoice = False

#                 header = {
#                     "status": "new",
#                     "ref_po_num": None,
#                     "user_invoice_no": None,
#                     "company_code": None,
#                     "invoice_date": None,
#                     "posting_date": "",
#                     "baseline_date": "",
#                     "payment_terms": None,
#                     "payment_method": None,
#                     "amount": 0.00,
#                     "currency": None,
#                     "gl_account": None,
#                     "business_area": "",
#                     "supplier_id": None,
#                     "approver_id": "",
#                     "supplier_name": None,
#                     "discount": "",
#                     "cost_center": None,
#                     "tds": None,
#                     "npo": None,
#                     "is_igst": '',
#                     "tax_per": None,
#                     "doc_type": '',
#                     "gstin": '',
#                     'customer_name': '',
#                     'tcs': 0
#                 }

#                 headerKeyValues = {
#                     'Document Title': "",
#                     'Invoice Number': "",
#                     'Invoice Date': "",
#                     'PO Number': "",
#                     'PO Date': "",
#                     'Customer Name': "",
#                     'Vendor Name': "",
#                     'Vendor Tax ID': "",

#                     'Sub Total': "",
#                     'Total Amount': "",
#                     'Discount': "",
#                     'CGST': "",
#                     'SGST': "",
#                     'IGST': "",
#                     'TCS': "",
#                     'Taxable Value': "",

#                     'Bill of Lading Number': "",
#                     'Due Date': "",
#                     'Tax Amount': "",
#                     'Amount Paid': "",
#                     'Amount Due': "",
#                     'Currency': "",
#                     'Payment Terms': "",
#                 }

#                 for each in event['body-json']['key_value_pairs']:
                    
#                     if each['display_name'] == 'Supplier Name':   #changed
#                            each['display_name'] = 'Vendor Name'
                           
#                     headerKeyValues[each['display_name']] = each['value']
                    
#                 if headerKeyValues['Vendor Tax ID'] == None:
#                     headerKeyValues['Vendor Tax ID'] = ''

#                 if headerKeyValues['Taxable Value'] and headerKeyValues['Total Amount']:

#                     if type(headerKeyValues['Total Amount']) == str:
#                         headerKeyValues['Total Amount'] = headerKeyValues['Total Amount'].replace(',', '')
#                         if headerKeyValues['Total Amount'].count('.') <= 1:
#                             pass
#                         else:
#                             li = headerKeyValues['Total Amount'].split('.')
#                             headerKeyValues['Total Amount'] = ''.join(li[0:-1]) + '.' + str(li[-1])
#                             del li

#                     if type(headerKeyValues['Taxable Value']) == str:
#                         headerKeyValues['Taxable Value'] = headerKeyValues['Taxable Value'].replace(',', '')
#                         if headerKeyValues['Taxable Value'].count('.') <= 1:
#                             pass
#                         else:
#                             li = headerKeyValues['Taxable Value'].split('.')
#                             headerKeyValues['Taxable Value'] = ''.join(li[0:-1]) + '.' + str(li[-1])
#                             del li

#                     try:
#                         rat = float(headerKeyValues['Total Amount']) / float(headerKeyValues['Taxable Value'])
#                     except:
#                         rat = 1.18

#                     rat = float("{:.2f}".format(rat)) - 1
#                     header['tax_per'] = round(rat * 100)

#                     del rat

#                 if headerKeyValues['IGST']:
#                     header['is_igst'] = 'y'

#                 header['invoice_date'] = clearDate(rawDate=headerKeyValues['Invoice Date'].strip())
#                 header["user_invoice_no"] = headerKeyValues['Invoice Number'].strip().replace(' ', '')
#                 header["gstin"] = headerKeyValues['Vendor Tax ID'].strip().replace(' ', '')
#                 header["ref_po_num"] = headerKeyValues['PO Number'].strip().replace(' ', '')
#                 header['customer_name'] = headerKeyValues['Customer Name']
#                 header['tcs'] = headerKeyValues['TCS']
#                 # header['doc_type'] =

#                 header_flags = {'usr_invoice': False,
#                                 'gstin': False,
#                                 'pan': False,
#                                 'invoice_date': False,
#                                 'posting_date': False,
#                                 'po': False
#                                 }

#                 vendor = {}

#                 if headerKeyValues['Vendor Name'] or headerKeyValues['Vendor Tax ID']:
#                     vendor = find_vendor(mycursor=mycursor,
#                                          r_vendor={
#                                              'vendor_name': headerKeyValues['Vendor Name'],
#                                              'gstin': headerKeyValues['Vendor Tax ID']
#                                          },
#                                          idate=header['invoice_date']
#                                          )

#                 if not vendor:
#                     vendor = fetch_default_vendor(mycursor=mycursor,
#                                                   idate=header['invoice_date'])

#                 if vendor:
#                     header['currency'] = str(vendor['currency'])
#                     header['supplier_name'] = str(vendor['vendor_name'])
#                     header['baseline_date'] = str(vendor['due_date'])
#                     header["payment_terms"] = str(vendor['payment_terms'])
#                     header['supplier_id'] = str(vendor['vendor_code'])

#                     if not header['is_igst']:
#                         header['is_igst'] = str(vendor['is_igst'])

#                     header['tds'] = vendor['tds']
#                     header['gstin'] = vendor['gstin']

#                 mycursor.execute(
#                     "select value1, value2 from dropdown where drop_key = 'default-master-detail' ")
#                 default_data = mycursor.fetchall()

#                 d_currency = None
#                 d_glaccountItem = None
#                 d_paymentTerms = None
#                 d_taxPer = None
#                 d_tdsPer = None

#                 for each in default_data:
#                     if each['value1'] == 'company_code':
#                         header["company_code"] = each['value2']
#                     elif each['value1'] == 'cost_center':
#                         header["cost_center"] = each['value2']
#                     elif each['value1'] == 'currency':
#                         d_currency = each['value2']
#                     if each['value1'] == 'gl_account_header':
#                         header["gl_account"] = each['value2']
#                     elif each['value1'] == 'gl_account_item':
#                         d_glaccountItem = each['value2']
#                     elif each['value1'] == 'payment_method':
#                         header["payment_method"] = each['value2']
#                     if each['value1'] == 'payment_terms':
#                         d_paymentTerms = each['value2']
#                     elif each['value1'] == 'plant':
#                         header["plant"] = each['value2']
#                     elif each['value1'] == 'tax_per' and not header["tax_per"]:
#                         header["tax_per"] = each['value2']
#                     elif each['value1'] == 'tds_per':
#                         d_tdsPer = each['value2']

#                 if not header['supplier_id']:
#                     header["currency"] = d_currency
#                     header["payment_terms"] = d_paymentTerms
#                     header['tds'] = d_tdsPer

#                     if header['invoice_date'] and d_paymentTerms:
#                         if d_paymentTerms == 'On the month end':
#                             noofday = str(
#                                 calendar.monthrange(header['invoice_date'].year, header['invoice_date'].month)[1])
#                             header["baseline_date"] = str(
#                                 (header['invoice_date'] + datetime.timedelta(
#                                     int(noofday) - int(header['invoice_date'].day))).date())
#                         else:
#                             header["baseline_date"] = str(
#                                 (header['invoice_date'] + datetime.timedelta(int(d_paymentTerms))).date())

#                 npo = None

#                 if header['ref_po_num']:
#                     npo = 'n'
#                 else:
#                     npo = 'y'

#                 sup_status = ""
#                 from_supplier = ""

#                 tename = pdfTextExtractionS3ObjectName.split("/")

#                 if len(tename) > 1 and tename[1][0] == "S":
#                     header["status"] = ""
#                     sup_status = "draft"
#                     from_supplier = "y"

#                 sqlQuery = "update invoice_header set in_status = ?, sup_status = ?, from_supplier = ?," \
#                            " user_invoice_id = ?, ref_po_num = ?, company_code = ?, invoice_date = ?," \
#                            " posting_date = ?, baseline_date = ?, amount = ?, currency = ?, payment_method = ?," \
#                            " gl_account = ?, business_area = ?, supplier_id = ?, supplier_name = ?," \
#                            " cost_center = ?, tcs = ?, is_igst = ?, tax_per = ?, tds_per = ?, payment_terms = ?," \
#                            " npo = ?, document_type = ?, gstin = ?, customer_name = ? where invoice_no = ?"

#                 # header["posting_date"] = str(datetime.date.today())

#                 values = (header["status"], sup_status, from_supplier, header["user_invoice_no"], header["ref_po_num"],
#                           header["company_code"],
#                           header["invoice_date"], header["posting_date"], header["baseline_date"], header["amount"],
#                           header["currency"], header["payment_method"], header["gl_account"], header["business_area"],
#                           header["supplier_id"], header["supplier_name"], header["cost_center"], header['tcs'],
#                           header['is_igst'], header['tax_per'], header['tds'], header["payment_terms"],
#                           npo, header['doc_type'], header['gstin'], header['customer_name'], old_inv_header['invoice_no'])

#                 # print(sqlQuery)
#                 # print(values)
#                 mycursor.execute(sqlQuery, values)

#                 invoice_no = old_inv_header['invoice_no']

#                 if not header["user_invoice_no"] or not header["ref_po_num"] or not header["invoice_date"] or not \
#                         header["supplier_id"]:
#                     faulty_invoice = True

#                 item = {
#                     "invoice_no": "",
#                     "item_no": "",
#                     "material": "",
#                     "quantity": "",
#                     "amount": "",
#                     "payment_method": "",
#                     "tax_amount": "",
#                     "tax_code": "",
#                     "ref_po_no": "",
#                     "plant": ""
#                 }

#                 # paper-entry format

#                 rowItemsByPaperAi = []

#                 for eachItem in event['body-json']['line_items']:

#                     d_ItemPaperAi = {
#                         'hsn_code': "",
#                         'material': "",
#                         'material_desc': "",
#                         'quantity': "",
#                         'unit': "",
#                         'amount': "",
#                         'currency': "",
#                         'amt_per_unit': "",
#                         'gst_per': "",
#                         'gl_account': ""
#                     }

#                     for each in eachItem:
#                         if each == "Product Description":
#                             d_ItemPaperAi['material_desc'] = eachItem[each]
#                         elif each == "Rate":
#                             d_ItemPaperAi['amt_per_unit'] = eachItem[each]
#                         elif each == "Unit of Measure":
#                             d_ItemPaperAi['unit'] = eachItem[each]
#                         elif each == "Quantity":
#                             d_ItemPaperAi['quantity'] = eachItem[each]
#                         elif each == "Currency":
#                             d_ItemPaperAi['currency'] = eachItem[each]
#                         elif each == "Product Code":
#                             d_ItemPaperAi['hsn_code'] = eachItem[each]
#                         elif each == "Line Total":
#                             d_ItemPaperAi['amount'] = eachItem[each]
#                         elif each == "HSN Code":
#                             d_ItemPaperAi['hsn_code'] = eachItem[each]
#                         # elif each == "":
#                         #     d_ItemPaperAi[''] = eachItem[each]
#                         # elif each == "":
#                         #     d_ItemPaperAi[''] = eachItem[each]

#                     if not d_ItemPaperAi['gst_per']:
#                         d_ItemPaperAi['gst_per'] = header['tax_per']

#                     rowItemsByPaperAi.append(d_ItemPaperAi)

#                 if rowItemsByPaperAi:

#                     # print(rowItemsByPaperAi)

#                     mycursor.execute("SELECT * FROM material_master")
#                     materials = mycursor.fetchall()

#                     mycursor.execute("SELECT * FROM master where master_id = 6")
#                     db_units = mycursor.fetchall()
#                     units = []
#                     for cur in db_units:
#                         units.append(cur['code'])
#                     del db_units

#                     exclude_lines = ['net price', 'CGST', 'CGST %', 'CGST @ %',
#                                      'SGST', 'SGST %', 'SGST @ %',
#                                      'IGST', 'IGST %', 'IGST @ %',
#                                      'TOTAL', 'UTGST/SGST', 'Conditions',
#                                      'Exchange Rate USD to EUR', 'Q 10-14898 RECEIVED 19 AUG 2020 Facilities DA']

#                     exclude_no = []

#                     # for row in rowItemsByPaperAi:
#                     for index, row in enumerate(rowItemsByPaperAi):

#                         if "amt_per_unit" in row and row['amt_per_unit'] and type(row['amt_per_unit']) == str:
#                             row['amt_per_unit'] = row['amt_per_unit'].replace(',', '')
#                         if "amount" in row and row['amount'] and type(row['amount']) == str:
#                             row['amount'] = row['amount'].replace(',', '')
#                         if "quantity" in row and row['quantity'] and type(row['quantity']) == str:
#                             row['quantity'] = row['quantity'].replace(',', '')

#                         flag1 = None

#                         for exclude in exclude_lines:

#                             fuz_dist22 = fuzz.partial_ratio(exclude.lower(), row['material_desc'].lower())

#                             if fuz_dist22 > 70 and not len(exclude) * 4 < len(row['material_desc']):
#                                 flag1 = True
#                                 exclude_no.append(index)
#                                 break

#                         if flag1:
#                             continue

#                         match_per = 0
#                         db_matnr = {}

#                         row['currency'] = row['currency'].strip()

#                         row['unit'] = row['unit'].strip()
#                         if row['unit'] and not row['unit'] in units:
#                             row['unit'] = None

#                         if not row['amt_per_unit']:
#                             row['amt_per_unit'] = None

#                         for mater in materials:

#                             value = row['material_desc'][0:48]

#                             # print(fuzz.ratio(row_name.lower(), mater['name'].lower()), "ratio")
#                             # print(fuzz.token_set_ratio(row_name, mater['name']), "token_set_ratio")
#                             # fuz_dist = fuzz.token_set_ratio(value.lower(), mater['material_name'].lower())
#                             # fuz_dist = fuzz.ratio(value.lower(), mater['material_name'].lower())

#                             fuz_dist = fuzz.WRatio(value.lower(), mater['material_name'].lower())

#                             if fuz_dist >= 70 and fuz_dist > match_per:
#                                 match_per = fuz_dist
#                                 db_matnr = mater

#                         if db_matnr:

#                             row['material'] = db_matnr['material_no']
#                             row['material_desc'] = db_matnr['material_name']

#                             if not row['amt_per_unit']:
#                                 row['amt_per_unit'] = db_matnr['unit_price']

#                             if not row['hsn_code']:
#                                 row['hsn_code'] = db_matnr['hsn_code']

#                             if not row['unit']:
#                                 row['unit'] = db_matnr['uom']

#                             if not row['gst_per']:
#                                 row['gst_per'] = db_matnr['gst_per']

#                             row['gl_account'] = db_matnr['gl_account']
#                             row['ocr_matched'] = 'y'
#                             # row[''] = db_matnr['']

#                             # if no rate, quantity and amount there rate = amount
#                             # if not quantity then make as 1

#                             # df.loc[index, 'gross_amount'] = amoty + (
#                             #         amoty * (int(db_matnr['gst_per']) / 100))

#                         else:
#                             row['ocr_matched'] = 'n'

#                     if exclude_no:
#                         temp_rowItems = rowItemsByPaperAi
#                         rowItemsByPaperAi = []

#                         for index, eachItm in enumerate(temp_rowItems):
#                             if index not in exclude_no:
#                                 rowItemsByPaperAi.append(eachItm)

#                         del temp_rowItems

#                     del exclude_no
#                     del exclude_lines

#                     sqlFields = "invoice_no, item_no"
#                     sqlPer = "?, ?"


#                     row = rowItemsByPaperAi[0]

#                     for each in row:
#                         sqlFields = sqlFields + ", " + str(each)
#                         sqlPer = sqlPer + ", ?"


#                     try:

#                         sqlQuery = "INSERT INTO invoice_item ( " + sqlFields + ") " \
#                                                                                "VALUES ( " + sqlPer + " )"
                                                                               
                        

#                         final_values = []
                        
#                         if rowItemsByPaperAi != '': #changed
#                             for det in rowItemsByPaperAi:
#                                 mycursor.execute("SELECT gst_per FROM einvoice_db_portal.material_master where material_no = ?" , det['material'] )
#                                 val_gst = mycursor.fetchone()
#                                 if val_gst != '':
#                                     if str(val_gst['gst_per']).isnumeric() :
#                                         det['gst_per'] = val_gst['gst_per']
#                                     else:
#                                         if str(val_gst['gst_per']) == 'VA':
#                                             det['gst_per'] = 19
#                                         if str(val_gst['gst_per']) == '0I':
#                                             det['gst_per'] = 0
#                                 # if det['material_desc'] == 'Our charges for services rendered to ArcelorMittal Liberia Holdings Limited' or det['material_desc'] ==  'Communication, printing, stationery and sundry expenses':
#                                 if det['material_desc'] == 'Our charges for services rendered to ArcelorMittal Liberia Holdings Limited' or det['material_desc'] ==  'Communication, printing, stationery and sundry expenses' or det['material_desc'] == 'Service for – July 2022' or det['material_desc'] == 'Service charges for May 2019 as per agreement' or det['material_desc'] == '10.113,78':
#                                     det['material'] = ' '
                                    
                        
#                         for index, row in enumerate(rowItemsByPaperAi):

#                             raw_list = [invoice_no, index + 1]

#                             for value in row.values():
#                                 raw_list.append(value)

#                             final_values.append(tuple(raw_list))

#                         # print(sqlQuery)
#                         # print(final_values)

#                         dle_itms = (old_inv_header['invoice_no'],)
#                         mycursor.execute("delete FROM invoice_item where invoice_no = ?", dle_itms)
#                         del dle_itms

#                         mycursor.executemany(sqlQuery, final_values)

#                     except Exception as e:
#                         print(e, "ened")

#                 else:
#                     faulty_invoice = True

#                 # item_category = fetchSAP_PoDetails(header['ref_po_num'])

#                 item_category = []

#                 supplier_type = ''
#                 vendor_no = ''
#                 vendor_currency = ''

#                 if vendor:
#                     if vendor['gst_treatment'] == 'overseas':
#                         supplier_type = 'export'
#                     else:
#                         supplier_type = 'domestic'

#                     vendor_no = header['supplier_id']
#                     vendor_currency = header['currency']

#                 d_decider = {
#                     'supplier_type': supplier_type,
#                     # 'invoice_value': headerAmount,
#                     'invoice_value': 0,
#                     'invoice_type': item_category,
#                     'vendor_no': vendor_no,
#                     'currency': vendor_currency,
#                     'document_type': header['doc_type']
#                 }

#                 success, emails = assign_approcessor(mycursor=mycursor, invoice_id=invoice_no, decider=d_decider)

#                 flagg = 'n'
#                 if faulty_invoice:
#                     flagg = 'y'

#                 mycursor.execute("SELECT * FROM elipo_setting where key_name = 'approval_auto_trigger'")
#                 detgb = mycursor.fetchone()

#                 res = False
#                 instatus = "new"

#                 if detgb:
#                     if detgb['value1'] == "on":

#                         if flagg != "y":

#                             npo = ""

#                             if header['ref_po_num']:
#                                 npo = "y"
#                             else:
#                                 npo = "n"

#                             r_decider = {
#                                 'discount': 0,
#                                 # 'amount': headerAmount,
#                                 'amount': 0,
#                                 'cost_center': "",
#                                 'currency': header['currency'],
#                                 'gl_account': str(header["gl_account"]),
#                                 'npo': header["npo"],
#                                 'vendor_no': str(header["supplier_id"]),
#                                 'department_id': "",
#                                 'item_category': item_category,
#                                 'document_type': header['doc_type']
#                             }

#                             res = create_approvals(mycursor=mycursor, invoice_id=invoice_no, decider=r_decider,
#                                                    working_person="ocr")

#                 if res == False:
#                     # if emails:
#                     #     sendMailNotifications(invoice_id=invoice_no, emails=emails)
#                     pass
#                 else:
#                     instatus = "inapproval"

#                 sqlQuery = "update invoice_header set in_status = ?, amount = ?, faulty_invoice= ? " \
#                            "where invoice_no = ?"
#                 # values = (instatus, str(headerAmount), flagg, invoice_no)
#                 values = (instatus, str(0), flagg, invoice_no)

#                 mycursor.execute(sqlQuery, values)

#                 mydb.commit()

#         # except Exception as e:  
#         #     print(e)
#         #     mydb.rollback()

#         #     try:
#         #         with mydb.cursor() as mycursor:

#         #             values = (pdfTextExtractionS3ObjectName,)
#         #             # mycursor.execute("DELETE FROM mail_message WHERE filename = ?", values)
#         #             mycursor.execute(
#         #                 "UPDATE mail_message SET is_processed = 'n' WHERE filename = ?",
#         #                 values)

#         #             mydb.commit()

#         #     finally:
#         #         pass

#         finally:
#             mydb.close()


#     if 'Authorization' in event['params']['header'] :
#        atoken =  event['params']['header']['Authorization']
    
#     if atoken != '':
#         flg = requests.get("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/getemail", headers={"Content-Type":"application/json", "Authorization":atoken})

#     return json.loads(flg.text)['body']

# # event = {'body-json': {'version': '1.1', 'doc_type': 'ap_invoice', 'input_filename': '1662630794526_D1662630783.8....2348001381onetimevendor.pdf', 'encoding': 'UTF-8', 'language 639.1': '', 'metadata': '', 'normalized_resolution': [2550, 3300], 'tables_info': {'1': [{'table_pos': [193.15530359745026, 1244.180166721344], 'height': 786.514002084732, 'width': 2120.680806040764, 'columns': [{'pos': [193.15530359745026, 1244.180166721344], 'height': 786.514002084732, 'width': 303.02488803863525}, {'pos': [558.890300989151, 1244.180166721344], 'height': 786.514002084732, 'width': 221.76365554332733}, {'pos': [910.1102650165558, 1244.180166721344], 'height': 786.514002084732, 'width': 250.48933625221252}, {'pos': [1251.2804746627808, 1244.180166721344], 'height': 786.514002084732, 'width': 236.86208724975586}, {'pos': [1648.7088918685913, 1244.180166721344], 'height': 786.514002084732, 'width': 175.53051710128784}, {'pos': [1934.3030333518982, 1244.180166721344], 'height': 786.514002084732, 'width': 168.33736896514893}, {'pos': [2132.921254634857, 1244.180166721344], 'height': 786.514002084732, 'width': 155.58207035064697}], 'rows': [{'pos': [193.15530359745026, 1259.097245335579], 'height': 51.2961745262146, 'width': 2120.680806040764}, {'pos': [193.15530359745026, 1327.7380138635635], 'height': 44.450390338897705, 'width': 2120.680806040764}], 'data': [[' Declared Value', ' Details', ' Premium', ' Extra Premium', ' IPT', ' FEE', ' Total'], ['', '', ' 10.113,78', ' 0,00', ' 23,98', ' 0,00', ' 10.137,76']]}, {'table_pos': [213.12548518180847, 2027.472299337387], 'height': 360.3710174560547, 'width': 2078.627246618271, 'columns': [{'pos': [213.12548518180847, 2027.472299337387], 'height': 360.3710174560547, 'width': 1236.768490076065}, {'pos': [1666.3980960845947, 2027.472299337387], 'height': 360.3710174560547, 'width': 100.69699287414551}, {'pos': [2095.4820692539215, 2027.472299337387], 'height': 360.3710174560547, 'width': 178.19652557373047}], 'rows': [{'pos': [213.12548518180847, 2038.3074581623077], 'height': 42.23127365112305, 'width': 2078.627246618271}, {'pos': [213.12548518180847, 2084.201592206955], 'height': 46.45589590072632, 'width': 2078.627246618271}, {'pos': [213.12548518180847, 2134.5022916793823], 'height': 47.841811180114746, 'width': 2078.627246618271}, {'pos': [213.12548518180847, 2180.6198716163635], 'height': 45.80483436584473, 'width': 2078.627246618271}, {'pos': [213.12548518180847, 2273.5605776309967], 'height': 40.41420221328735, 'width': 2078.627246618271}, {'pos': [213.12548518180847, 2319.056797027588], 'height': 43.21238994598389, 'width': 2078.627246618271}], 'data': [[' Total Premium', ' USD', ' 10.113,78'], [' Total Extra Premium', ' USD', ' 0,00'], [' Total IPT', ' USD', ' 23,98'], [' Total Fee', ' USD', ' 0,00'], [' Total Invoice Amount', ' USD', ' 10.137,76'], [' Total Amount Due', ' USD', ' 0,00']]}]}, 'key_value_pairs': [{'display_name': 'Reference ID', 'data_type': 'str', 'key': '-', 'value': '1662630794.5269346', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Supplier Name', 'data_type': 'str', 'key': '-', 'value': 'ArcelorMittal Insurance Consultants S.A.', 'value_bbox': '(260.75850427150726, 2912.0747208595276, 1982.0791482925415, 3118.9576864242554)', 'prob': '0.9991120696067809'}, {'display_name': 'Supplier Code', 'data_type': 'str', 'key': '-', 'value': 'AMIC', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Invoice Number', 'data_type': 'str', 'key': '-', 'value': '200510637', 'value_bbox': '(656.99970703125, 53.000126953125005, 869.999560546875, 92.000068359375)', 'prob': '0.0001'}, {'display_name': 'Invoice Date', 'data_type': 'str', 'key': ' Date', 'value': '2022-05-19', 'value_bbox': '(657.267764210701, 100.55473912507296, 873.9825457334518, 139.78664875030518)', 'prob': '0.999919891357422'}, {'display_name': 'Due Date', 'data_type': 'str', 'key': ' Payment due in', 'value': 'irect debit 3 weeks from the invoic', 'value_bbox': '(553.4620016813278, 2442.4054205417633, 1259.8948448896408, 2479.414826631546)', 'prob': '0.9903126955032348'}, {'display_name': 'Invoice Total', 'data_type': 'str', 'key': '-', 'value': '10137.76', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Amount Due', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Currency', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Payment Terms', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'PO Number', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}], 'status': 'validated', 'extra_data': {}, 'line_items': [{'Charge Code': '', 'Product Description': '10.113,78', 'Quantity': '', 'Unit Price': '', 'Exchange Rate': '', 'Tax Percentage': '', 'Line Total': '10137.76', 'Line Total Foreign Currency': '', 'Invoice Currency Name': '', 'Currency Code': ''}], 'validator_url': 'http://deepcognition3.ydns.eu:13342/validate?task_id=1662630794526', 'checks': {'status': 'success', 'message': "<h6 style='font-size: small;''> Valid Number Check:</h6><div class='alert alert-success' style='padding: 0.25rem 0.25rem;font-size: small;' role='alert'>Checks passed</div>"}}, 'params': {'path': {}, 'querystring': {'task_id': '1662630794526'}, 'header': {'Accept': '*/*', 'Accept-Encoding': 'gzip, deflate', 'Content-type': 'application/json', 'Host': '7firau5x7b.execute-api.eu-central-1.amazonaws.com', 'User-Agent': 'python-requests/2.28.1', 'X-Amzn-Trace-Id': 'Root=1-6319bd52-47a42ea03cb7004f5a35a955', 'X-Forwarded-For': '162.19.72.15', 'X-Forwarded-Port': '443', 'X-Forwarded-Proto': 'https'}}, 'stage-variables': {'schema': 'einvoice_db_portal', 'non_ocr_attachment': 'einvoice-attachments', 'lambda_alias': 'dev', 'aws_mail_bucket': 'application-email', 'notification_email': 'elipotest@gmail.com', 'ocr_bucket': 'textract-console-ap-southeast-1-b8779ae1-dd77-4d3c-a56d-443a5db', 'ocr_bucket_folder': 'old-dev/', 'oauth_ret': 'https://7firau5x7b.execute-api.eu-central-1.amazonaws.com/einvoice-v1/gmail-s3', 'bucket_gmail_credential': 'file-bucket-emp', 'clientsec_location': 'client_secret.json', 'secreat': 'test/einvoice/secret', 'attach_stage': 'dev'}, 'context': {'account-id': '', 'api-id': '7firau5x7b', 'api-key': '', 'authorizer-principal-id': '', 'caller': '', 'cognito-authentication-provider': '', 'cognito-authentication-type': '', 'cognito-identity-id': '', 'cognito-identity-pool-id': '', 'http-method': 'PATCH', 'stage': 'einvoice-v1', 'source-ip': '162.19.72.15', 'user': '', 'user-agent': 'python-requests/2.28.1', 'user-arn': '', 'request-id': '15fa4839-6c2f-4030-9a98-a36ff0475fc2', 'resource-id': '5pzpnl', 'resource-path': '/paper-entry'}}
# # print(patchPaperAIResponce(event, ' '))

# def find_accuracy(header_accuracy , item_accuracy , mycursor):

#     header_fields = []
#     item_fields = []
#     accurate_header_fields = 0
#     header_acc = 0.0
#     accurate_item_fields = 0
#     item_acc = 0.0
#     individual_item_acc = []

#     # print(header_accuracy , item_accuracy[0])
#     ocr_accurcy_feilds = {}
#     ocr_accurcy_feilds_item = {}
#     total_accurcy_fields = 0
#     total_accurcy_fields_item = 0

#     try :
#         mycursor.execute("select * from elipo_setting where key_name = 'ocr_accuracy'")
#         ocr_field_accurcy = mycursor.fetchall()

#         for each in ocr_field_accurcy:
#             if each['value2'] == "on":
#                 total_accurcy_fields += 1
#                 ocr_accurcy_feilds[each["value1"]] = each["value2"]
#                 header_fields.append(each["value1"])
#         del ocr_field_accurcy

#         for hf in header_fields:
#             if hf == 'document_type':
#                 hf = 'doc_type'
#             if(header_accuracy[hf] != NULL and header_accuracy[hf] != '' and header_accuracy[hf] != 0.0 and header_accuracy[hf] != None ):
#                 accurate_header_fields += 1
#         header_acc =  ( accurate_header_fields / total_accurcy_fields ) * 100
#         # print(header_acc)





#         mycursor.execute("select * from elipo_setting where key_name = 'ocr_accuracy_item'")
#         ocr_field_accurcy_item = mycursor.fetchall()

#         for each in ocr_field_accurcy_item:
#             if each['value2'] == "on":
#                 total_accurcy_fields_item += 1
#                 ocr_accurcy_feilds_item[each["value1"]] = each["value2"]
#                 item_fields.append(each["value1"])
#         del ocr_field_accurcy_item

#         for each in item_accuracy :
#             for it_f in item_fields :
#                 if it_f == 'gross_amount':
#                     it_f = 'amount'
#                 if ( each[it_f] != NULL and each[it_f] != ''  and each[it_f] != 0.0 and each[it_f] != None ):
#                     accurate_item_fields += 1
#             item_acc = (accurate_item_fields / total_accurcy_fields_item) * 100
#             individual_item_acc.append(item_acc)
#             accurate_item_fields = 0 
#             item_acc = 0.0 
#         final_item_accr = sum(individual_item_acc)/len(item_accuracy)
#         # print(final_item_accr)

#         overall = ( header_acc + final_item_accr ) / 2 

#         return header_acc ,final_item_accr, round(overall)

#     except :
#         return 0,0,0

           



# def get_stored_credentials(user_id):
#     try:
#         s3 = boto3.client("s3")
#         encoded_file = s3.get_object(Bucket=elipo_bucket, Key=user_id)
#         creds = pickle.loads(encoded_file["Body"].read())
#         return creds
#     except Exception as excep:
#         creds = None
#         # print(str(excep))
#         # raise NoUserIdException(excep)


# def create_message(sender, to, subject, message_text, cc):
#     message = email.mime.text.MIMEText(message_text, 'html')

#     message['to'] = to
#     message['from'] = sender
#     message['subject'] = subject
#     message['cc'] = cc

#     encoded = base64.urlsafe_b64encode(message.as_string().encode("utf-8"))
#     return {'raw': encoded.decode("utf-8")}


# def send_message(service, user_id, message):
#     try:
#         message = (service.users().messages().send(userId=user_id, body=message).execute())
#         # print("Message Id: ", message['id'])
#         return message
#     # except errors.HttpError as error:
#     except Exception as error:
#         print("An error occurred: ", error)


# def build_service(credentials):
#     http = httplib2.Http()
#     http = credentials.authorize(http)
#     return build('gmail', 'v1', http=http)


# def sendMailNotifications(invoice_id, emails, body1=None, user=None):
#     # user_id = "mosbyted116@gmail.com"
#     user_id = elipo_email

#     if not body1:
#         body1 = ''

#     credentials = get_stored_credentials(user_id)

#     if credentials and credentials.refresh_token is not None:
#         service = build_service(credentials=credentials)

#         mail_subject = 'ELIPO Notification'
#         mail_cc = ''

#         message_body = '''<html>
#                 <body  >
#             <div style="  max-width: 500px; margin: auto; padding: 10px; ">
#                     <div style=" width:100%; align-content: center;text-align: center;">
#                         <img src="https://einvoice-public-images.s3.ap-south-1.amazonaws.com/ELIPO+logo.png" alt="Italian Trulli" style="vertical-align:middle; width: 140px;height:50px;text-align: center;"  >
#                     </div>

#                     <div style=" width:100%; align-content:left;text-align:left;">
#                             <hr style="width:100%; text-align: center; border: 2px solid #0000001A;opacity: 0.5; border-radius: 2px;" >
#                         </div>
#                     <b>

#                 <span style="vertical-align: middle;text-align: left;font: 600  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;" >
#                     Dear User,
#                 </span> 
#                 <br><br>
#                 <span style="vertical-align: middle;text-align: left;font: 600  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;" >
#                     Invoice No: <span style="font: 500  15px/22px ;">{},</span>
#                 </span> 

#                 <br>
#                 <span style="vertical-align: middle;text-align: left;font: 600  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;" >
#                    Is generated by OCR and assigned for approval to you.
#                 </span> 
#                 </b> 
#                 <br>
#                 <br>
#                 <div style=" width:100%;align-content: center;text-align: center; ">
#                     <a href="https://ywi7o0pxhc.execute-api.eu-central-1.amazonaws.com/production/login" target="_blank">
#                         <button style="border: none;box-shadow: 1px 1px 5px 1px #5a9e9b; background:rgb(80, 219, 212) 0% 0% no-repeat padding-box; border-radius: 7px;opacity: 1;width:180px; height: 35px;outline: none;border: none;" > 
#                             <span style="vertical-align: middle; text-align: left;font: 600 16px/23px Open Sans;letter-spacing: 0px;color: whitesmoke;white-space: nowrap;opacity: 1;">Login to ELIPO</span>
#                         </button>
#                     </a>
#                 </div>

#                 <br><br>
#                 <div style="width:100%;">
#                 <span style="vertical-align: middle; text-align: left;font: 500  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;">Regards,</span>
#                 <br>
#                 <span style="vertical-align: middle;text-align: left;font: 500  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;">Team ELIPO</span>
#                 </div>
#             <div style=" width:100%; align-content:left;text-align:left;">
#                         <hr style="width:100%; text-align: center; border: 2px solid #0000001A;opacity: 0.5; border-radius: 2px;" >
#                     </div>


#                 <div style="width:100%;align-content: center;text-align: center;">
#                     <span style=" text-align: center;font: 600 16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 0.7;">This message was sent to you by ELIPO</span>
#                 </div>
#                 <div style="width:100%;align-content: center;text-align: center;">
#                     <img src="https://einvoice-public-images.s3.ap-south-1.amazonaws.com/elipo+logo_2.png" alt="Italian Trulli" style="text-align: center;width: 80px;height: 30px;" >
#                 </div>

#                 <br>
#             </div>
#                 </body></html>'''.format(invoice_id)

#         message = create_message(sender=elipo_email, to=emails, subject=mail_subject,
#                                  message_text=str(message_body), cc=mail_cc)

#         send_message(service=service, user_id="me", message=message)


# def find_vendor(mycursor, r_vendor, idate):
    
#     if idate:
#         idate = str(idate.date())  
        
#     vendor_data = None
#     vendor = {}

#     if r_vendor['gstin']:
#         sqlQuery = "SELECT v.*, d.value2 FROM vendor_master v " \
#                    "left join dropdown d on v.gst_treatment = d.value1 where " \
#                    "(v.gstin_uin = ? and d.drop_key = 'vendor_gst_treatment')"
#         values = (r_vendor['gstin'],)
#         mycursor.execute(sqlQuery, values)
#         vendor = mycursor.fetchone()

#     if not vendor and r_vendor['vendor_name']:

#         mycursor.execute("SELECT v.*, d.value2 FROM vendor_master v left join dropdown d on v.gst_treatment = d.value1")
#         allVendors = mycursor.fetchall()

#         # fuzzScore = 0

#         for eachVendor in allVendors:

#             dist_sc = fuzz.ratio(eachVendor['vendor_name'].lower(), r_vendor['vendor_name'].lower())
#             if dist_sc > 81 or r_vendor['vendor_name'].lower() in eachVendor['vendor_name'].lower():
#                 # if dist_sc > 75 and fuzzScore < dist_sc:
#                 vendor = eachVendor
#                 # fuzzScore = dist_sc
#                 break

#     if vendor:

#         due = None

#         igst = 'n'

#         if idate and vendor['payment_terms']:

#             due = idate

#             if vendor['payment_terms'] == "On the day invoice raised":
#                 due = idate
#             elif vendor['payment_terms'] == "On the month end":
#                 last = calendar.monthrange(idate.year, idate.month)
#                 idate = datetime.datetime.strptime(idate, '%Y-%m-%d')
#                 due = idate.date() + datetime.timedelta(days=last[1] - idate.day)
#             else:
#                 idate = datetime.datetime.strptime(idate, '%Y-%m-%d')
#                 due = idate.date() + datetime.timedelta(days=int(vendor['payment_terms']))

#         if vendor['gst_per'] == "igst":
#             igst = 'y'
#         else:
#             igst = 'n'

#         vendor_data = {
#             'currency': vendor['currency'],
#             'payment_terms': vendor['payment_terms'],
#             'due_date': due,
#             'vendor_code': vendor['vendor_no'],
#             'vendor_name': vendor['vendor_name'],
#             'is_igst': igst,
#             'tds': vendor['tds'],
#             'gst_treatment': vendor['gst_treatment'],
#             'gstin': vendor['gstin_uin']
#         }

#     return vendor_data


# def fetch_default_vendor(mycursor, idate=None):
#     # vendor_data = None
    
#     vendor_data = {
#             'currency': "",
#             'payment_terms': "",
#             'due_date': "",
#             'vendor_code': "",
#             'vendor_name': "",
#             'is_igst': "",
#             'tds': "",
#             'gst_treatment': "",
#             'gstin': "",
#             'company_code': "",

#         }

#     mycursor.execute("SELECT * FROM dropdown where drop_key = 'default-master-detail'")
#     d_master = mycursor.fetchall()

#     defaults = {}
#     vendor = {}

#     if d_master:

#         for each in d_master:
#             defaults[each['value1']] = each['value2']

#         if defaults['supplier_id']:
#             values = (defaults['supplier_id'],)
#             mycursor.execute(
#                 "SELECT v.*, d.value2 FROM vendor_master v left join dropdown d "
#                 "on v.gst_treatment = d.value1 where v.vendor_no = %s", values)
#             vendor = mycursor.fetchone()

#         due = None

#         igst = 'n'
        
#         print(idate, vendor)
        
#         if vendor:

#             if idate and ['payment_terms']:
    
#                 due = idate
    
#                 if vendor['payment_terms'] == "On the day invoice raised":
#                     due = idate
#                 elif vendor['payment_terms'] == "On the month end":
#                     last = calendar.monthrange(idate.year, idate.month)
#                     idate = datetime.datetime.strptime(idate, '%Y-%m-%d')
#                     due = idate.date() + datetime.timedelta(days=last[1] - idate.day)
#                 else:
#                     idate = datetime.datetime.strptime(str(idate.date()) , '%Y-%m-%d')
#                     due = idate.date() + datetime.timedelta(days=int(vendor['payment_terms']))
    
#             if vendor['gst_per'] == "igst":
#                 igst = 'y'
#             else:
#                 igst = 'n'

#             vendor_data = {
#                 'currency': vendor['currency'],
#                 'payment_terms': vendor['payment_terms'],
#                 'due_date': due,
#                 'vendor_code': vendor['vendor_no'],
#                 'vendor_name': vendor['vendor_name'],
#                 'is_igst': igst,
#                 'tds': vendor['tds'],
#                 'gst_treatment': vendor['gst_treatment'],
#                 'gstin': vendor['gstin_uin'],
#                 # 'company_code': defaults['company_code'],
    
#             }
        
#         if defaults:
#             vendor_data['company_code'] = defaults['company_code']

#     return vendor_data


# def clearDate(rawDate):
    
#     if rawDate != '' and rawDate[2] != '.' :
#         if rawDate.index('-') == 4:
#             date = rawDate.split('-')
#             fdate = date[2]+ '.'+date[1]+'.'+date[0]
#             rawDate = fdate
        
#     dateF = None

#     for index in range(7):
#         try:
#             date_time_strtt = str(rawDate)
#             date_time_strtt = date_time_strtt.strip()
#             date_time_str = ""

#             for c in date_time_strtt:
#                 if c.isalnum():
#                     date_time_str += c

#             if index == 0:
#                 date_time_obj = datetime.datetime.strptime(date_time_str, '%d%m%Y')

#             elif index == 1:
#                 date_time_obj = datetime.datetime.strptime(date_time_str, '%d%B%Y')

#             elif index == 2:
#                 date_time_obj = datetime.datetime.strptime(date_time_str, '%d%b%Y')

#             elif index == 3:
#                 date_time_obj = datetime.datetime.strptime(date_time_str, '%d%b%y')

#             elif index == 4:
#                 date_time_obj = datetime.datetime.strptime(date_time_str, '%d%B%y')

#             elif index == 5:
#                 date_time_str = date_time_str[0:1] + date_time_str[3:]
#                 date_time_obj = datetime.datetime.strptime(date_time_str, '%d%B%Y')
                
#             elif index == 6:
#                 date_time_obj = datetime.datetime.strptime(date_time_str, '%d%m%y')

#             # dateF = str(date_time_obj.date())
#             dateF = date_time_obj

#             return dateF

#         except ValueError as e:
#             pass


# def fetchSAP_PoDetails(poNumber):
#     item_category = []
#     try:

#         s = requests.Session()
#         s.headers.update({'Connection': 'keep-alive'})

#         url = "http://182.72.219.94:8000/zgetpo/GetPo"
#         params = {'sap-client': '800'}

#         headersFetch = {'X-CSRF-TOKEN': 'Fetch'}
#         y = s.get(url, auth=HTTPBasicAuth('developer31', 'peol@123'), headers=headersFetch, params=params, timeout=10)
#         token = y.headers["X-CSRF-TOKEN"]

#         headers = {"X-CSRF-TOKEN": token, 'Content-type': 'application/json'}
#         records = {
#             "ebeln": poNumber
#         }

#         x = s.post(url, json=records, auth=HTTPBasicAuth('developer31', 'peol@123'), headers=headers, params=params,
#                    timeout=10)

#         if x.status_code != 500:
#             payload = x.json()

#             # item_category = []
#             for each in payload[0]['POITEM']:
#                 item_category.append(each['ITEM_CAT'])

#     except requests.exceptions.RequestException as msg:
#         pass

#     except requests.exceptions.ConnectionError as msg:
#         pass

#     return item_category


# def create_approvals(mycursor, invoice_id, decider, working_person):
#     try:

#         mycursor.execute(
#             "SELECT a.* FROM rule a inner join rule_snro b on a.rule_id = b.rule_id where b.is_approval = 'y' and a.is_on = 'y'")
#         all_rules = mycursor.fetchall()

#         rule_ids = [sub['rule_id'] for sub in all_rules]
#         rule_ids = set(rule_ids)
#         rule_ids = list(rule_ids)

#         rule = []

#         default = []
#         for ruleID in rule_ids:
#             rules = []

#             for row in all_rules:
#                 if not default and row[
#                     'decider'] == "default":  # ruleID == row['rule_id'] and row['decider'] != "default":
#                     default.append(row)

#                 elif row['decider'] == "default_assignment":
#                     pass

#                 elif ruleID == row['rule_id']:
#                     rules.append(row)

#             noOfRules = len(rules)
#             countMatches = 0

#             for row in rules:

#                 if row['decider_type'] == "number":

#                     if row['decider'] == "amount" or row["decider"] == "discount":
#                         d_value = float(decider[row['decider']])
#                     else:
#                         d_value = int(decider[row['decider']])

#                     if row['operator'] == "=" and d_value == int(row['d_value']):
#                         countMatches += 1
#                     elif row['operator'] == ">" and d_value > int(row['d_value']):
#                         countMatches += 1
#                     elif row['operator'] == "<" and d_value < int(row['d_value']):
#                         countMatches += 1
#                     elif row['operator'] == "between" and int(row['d_value']) <= d_value <= int(row['d_value2']):
#                         countMatches += 1

#                 elif row['decider_type'] == "string":
#                     if row["decider"] == "item_category":
#                         for each in decider["item_category"]:
#                             if each == str(row['d_value']):
#                                 countMatches += 1
#                                 break

#                     elif decider[row['decider']] == str(row['d_value']):
#                         countMatches += 1

#             if noOfRules == countMatches and noOfRules != 0:
#                 rule.append(row)

#         if not rule and default:
#             rule.append(default[0])

#         if rule:

#             values = [sub['rule_id'] for sub in rule]
#             values = set(values)
#             values = list(values)

#             format_strings = ','.join(['%s'] * len(values))
#             sqlQuery = "select distinct r.*, ru.approval_type, ru.ifnot_withindays from rule_approver r " \
#                        "left join rule ru on r.rule_key = ru.rule_id " \
#                        "where r.rule_key in (%s) " \
#                        "order by field(approval_type, 'series', 'parallel', 'single'), " \
#                        "r.level desc, r.rule_key" % format_strings
#             mycursor.execute(sqlQuery, tuple(values))
#             all_approvers = mycursor.fetchall()

#             multiple_app = []
#             allrules = []

#             main_rule = None
#             main_rule = all_approvers[0]

#             for row in all_approvers:

#                 if row["approver"] == 999999999:
#                     return False

#                 allrules.append(row['rule_key'])

#                 if all_approvers[0]['rule_key'] == row['rule_key']:
#                     data = {
#                         "isgroup": row["isgroup"],
#                         "approver": row["approver"],
#                         'level': row['level'],
#                         'approval_type': main_rule['approval_type'],
#                         'rule_id': row['rule_key']
#                     }
#                     multiple_app.append(data)

#             allrules = set(allrules)
#             allrules = list(allrules)
#             allrules.remove(all_approvers[0]['rule_key'])

#             add_level = all_approvers[0]['level']

#             for rule in allrules:

#                 level_s = 0

#                 for row in all_approvers:

#                     if rule == row['rule_key']:

#                         dupl_app = False

#                         for ex in multiple_app:
#                             if ex['isgroup'] == row['isgroup'] and ex['approver'] == row['approver']:
#                                 dupl_app = True
#                                 break

#                         if dupl_app:
#                             continue

#                         if level_s < row['level']:
#                             level_s = row['level']

#                         data = {
#                             "isgroup": row["isgroup"],
#                             "approver": row["approver"],
#                             'level': row['level'] + add_level,
#                             'approval_type': row['approval_type'],
#                             'rule_id': row['rule_key']
#                         }
#                         multiple_app.append(data)

#                 if level_s > 0:
#                     add_level += level_s

#             values = []
#             exc_days = int(main_rule['ifnot_withindays'])

#             escalate_when = datetime.date.today() + datetime.timedelta(days=exc_days)

#             groups = []
#             members = []

#             for row in multiple_app:

#                 if row['isgroup'] == 'y' and (
#                         (row['approval_type'] == "single" or row['approval_type'] == "parallel") or row['level'] == 1):
#                     groups.append(row['approver'])

#                 elif (row['approval_type'] == 'single' or row['approval_type'] == 'parallel') or row['level'] == 1:
#                     members.append(row['approver'])

#                 value = (
#                     row['isgroup'], row['approver'], invoice_id, "n", row['level'], row['approval_type'], escalate_when,
#                     row['rule_id'])
#                 values.append(value)

#             format_strings_grp = ','.join(['%s'] * len(groups))
#             format_strings_mem = ','.join(['%s'] * len(members))
#             emails = None

#             if members and groups:
#                 mix = members + groups
#                 mycursor.execute(
#                     "select email from member where member_id in ({}) or group_id in ({})".format(
#                         format_strings_mem, format_strings_grp), tuple(mix))
#                 emails = mycursor.fetchall()

#             elif groups:
#                 mycursor.execute(
#                     "select email from member where group_id in ({})".format(format_strings_grp),
#                     tuple(groups))
#                 emails = mycursor.fetchall()

#             else:
#                 mycursor.execute(
#                     "select email from member where member_id in ({})".format(format_strings_mem),
#                     tuple(members))
#                 emails = mycursor.fetchall()

#             if values:
#                 mycursor.executemany(
#                     "INSERT INTO approval (isgroup, approver, invoice_no, isapproved,"
#                     " approval_level, approval_type, escalate_date, rule_id) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)",
#                     values)

#                 if emails:

#                     email_Add = None
#                     for each in emails:
#                         if not email_Add:
#                             email_Add = each['email']
#                         else:
#                             email_Add += "," + each['email']

#                     # sendMailNotifications(invoice_id=invoice_id, mycursor=mycursor, emails=emails, user=working_person)
#                     sendMailNotifications(invoice_id=invoice_id, emails=email_Add, user=working_person)

#             return True

#         else:
#             return False

#     finally:
#         pass


# # invoice_id = 856
# # decider = {
# #                 'discount': 0,
# #                 'amount': 150001.24,
# #                 'cost_center': '1000',
# #                 'currency': 'INR',
# #                 'gl_account': '113310',
# #                 'npo': 'n',
# #                 'vendor_no': '2000000075',
# #                 'department_id': '13',
# #                 'item_category': ['0']
# #             }

# # with mydb.cursor() as mycursor:
# #     print(create_approvals(mycursor, invoice_id, decider))


# def assign_approcessor(mycursor, invoice_id, decider):
    try:
        default = None
        email_str = ""

        mycursor.execute("SELECT * FROM elipo_setting where key_name = 'app_assignment'")
        appdet = mycursor.fetchone()

        if appdet:

            email_str = ''

            if appdet['value1'] == "on":

                mycursor.execute(
                    "SELECT a.* FROM rule a inner join rule_snro b"
                    " on a.rule_id = b.rule_id "
                    "where b.is_approval = 'n' and a.is_on = 'y'")
                all_rules = mycursor.fetchall()

                rule_ids = []
                email_str = ''
                rule = None

                if all_rules:
                    rule_ids = [sub['rule_id'] for sub in all_rules]
                    rule_ids = set(rule_ids)
                    rule_ids = list(rule_ids)

                    rule = []

                    rules = {}

                    for ruleId in rule_ids:
                        rules[ruleId] = []

                    default = None

                    for row in all_rules:
                        if row['decider'] == 'default_assignment':
                            default = row
                        else:
                            rules[row['rule_id']].append(row)

                    if default:
                        rule_ids.remove(default['rule_id'])
                        del rules[default['rule_id']]

                if rule_ids:
                    # noOfRules = len(rules)

                    for eachRule in rules:

                        countMatches = 0
                        noOfCondn = len(rules[eachRule])

                        for row in rules[eachRule]:

                            if row['decider_type'] == "number":

                                if row['decider'] == "invoice_value":
                                    d_value = float(decider[row['decider']])
                                else:
                                    d_value = int(decider[row['decider']])

                                if row['operator'] == "=" and d_value == int(row['d_value']):
                                    countMatches += 1
                                elif row['operator'] == ">" and d_value > int(row['d_value']):
                                    countMatches += 1
                                elif row['operator'] == "<" and d_value < int(row['d_value']):
                                    countMatches += 1
                                elif row['operator'] == "between" and int(row['d_value']) <= d_value <= int(
                                        row['d_value2']):
                                    countMatches += 1

                            elif row['decider_type'] == "string":
                                if row["decider"] == "invoice_type":
                                    for each in decider["invoice_type"]:
                                        if each == str(row['d_value']):
                                            countMatches += 1
                                            break

                                elif decider[row['decider']] == str(row['d_value']):
                                    countMatches += 1

                        if countMatches > 0 :
                            rule.append(row)

                # print(default)
                if not rule and default:
                    rule.append(default)

                if rule:
                    # print(rule)

                    values = [sub['rule_id'] for sub in rule]
                    values = set(values)
                    values = list(values)

                    format_strings = ','.join(['%s'] * len(values))

                    sqlQuery = "select isgroup, approver from rule_approver where rule_key in (%s) " % format_strings
                    # print(sqlQuery, values)
                    mycursor.execute(sqlQuery, tuple(values))
                    all_app = mycursor.fetchall()

                    all_approvers = [dict(t) for t in {tuple(d.items()) for d in all_app}]

                    groups = []
                    members = []
                    values = []

                    for row in all_approvers:

                        value = (
                            row['isgroup'], row['approver'], invoice_id)
                        values.append(value)

                        if row['isgroup'] == 'y':
                            groups.append(row['approver'])
                        else:
                            members.append(row['approver'])

                    format_strings_grp = ','.join(['%s'] * len(groups))
                    format_strings_mem = ','.join(['%s'] * len(members))
                    emails = None

                    audit_trail = 'Invoice ' + str(invoice_id) + ' assigned to '
                    trail_grp = ''

                    if members and groups:
                        mix = members + groups
                        mycursor.execute(
                            "select concat(fs_name, ' ', ls_name) as name, email, group_id from member "
                            "where member_id in ({}) or group_id in ({})".format(
                                format_strings_mem, format_strings_grp), tuple(mix))
                        emails = mycursor.fetchall()

                        # mycursor.execute(
                        #     "select group_id, name from group where group_id in ({})".format(
                        #         format_strings_grp), tuple(groups))
                        # grp_details = mycursor.fetchall()

                        sqlQueryt = "select group_id, name from " + dbScehma + ".group where group_id in ({})".format(
                            format_strings_grp)
                        mycursor.execute(sqlQueryt, tuple(groups))
                        grp_details = mycursor.fetchall()

                        if grp_details:
                            for each in grp_details:
                                if not trail_grp:
                                    trail_grp += each['name']
                                else:
                                    trail_grp += ', ' + each['name']

                    elif groups:
                        mycursor.execute(
                            "select concat(fs_name, ' ', ls_name) as name, email, group_id from member "
                            "where group_id in ({})".format(format_strings_grp),
                            tuple(groups))
                        emails = mycursor.fetchall()

                        # mycursor.execute(
                        #     "select group_id, name from group where group_id in ({})".format(
                        #         format_strings_grp), tuple(groups))
                        # grp_details = mycursor.fetchall()

                        sqlQuery = "select group_id, name from " + dbScehma + ".group where group_id in ({})".format(
                            format_strings_grp)

                        mycursor.execute(sqlQuery, tuple(groups))
                        grp_details = mycursor.fetchall()

                        if grp_details:
                            for each in grp_details:
                                if not trail_grp:
                                    trail_grp += each['name']
                                else:
                                    trail_grp += ', ' + each['name']

                    else:
                        mycursor.execute(
                            "select concat(fs_name, ' ', ls_name) as name, email, group_id from member "
                            "where member_id in ({})".format(format_strings_mem),
                            tuple(members))
                        emails = mycursor.fetchall()

                    if emails:

                        for each in emails:
                            if not email_str:
                                email_str = each['email']
                            else:
                                email_str += ',' + each['email']
                            if not each['group_id'] in groups:
                                if not trail_grp:
                                    trail_grp += each['name']
                                else:
                                    trail_grp += ', ' + each['name']

                        audit_trail += trail_grp

                    if values:
                        mycursor.executemany(
                            "INSERT INTO assignment (isgroup, app, invoice_no) VALUES (%s, %s, %s)",
                            values)

                        values = (invoice_id, '', 'new', audit_trail)
                        sqlQuery = "insert into invoice_audit (invoice_no, prev_status, " \
                                   "new_status, msg) values (%s, %s, %s, %s)"
                        mycursor.execute(sqlQuery, values)

                        return True, email_str


            else:
                values = ("y", 6, invoice_id)
                mycursor.execute(
                    "INSERT INTO assignment (isgroup, app, invoice_no) VALUES (%s, %s, %s)", values)

                mycursor.execute(
                    "select concat(fs_name, ' ', ls_name) as name, email, group_id from member "
                    "where group_id = '6'")
                emails = mycursor.fetchall()

                if emails:
                    for each in emails:
                        if email_str:
                            email_str += "," + each['email']
                        else:
                            email_str = each['email']

                return False, email_str

        return False, email_str

    except Exception as e:
        print(e)
        pass

    finally:
        pass


# def postPaperAiResponse(event=None, context=None):
#     print(event)

#     header_accuracy = {}
#     item_accuracy = []


#     pdfTextExtractionJobId = event['params']['querystring']['task_id']

#     pdfTextExtractionStatus = "processed"

#     pdfTextExtractionS3ObjectName = ""

#     client = boto3.client(
#     'secretsmanager',
#     region_name='eu-central-1',
#     aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
#     aws_secret_access_key='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' )

#     secret = "test/einvoice/secret"

#     global elipo_bucket
#     # elipo_bucket = 'file-bucket-emp'
#     elipo_bucket = event["stage-variables"]["bucket_gmail_credential"]

#     global pdfTextExtractionS3Bucket
#     pdfTextExtractionS3Bucket = event["stage-variables"]["ocr_bucket"]

#     global elipo_email
#     # elipo_email = 'elipotest@gmail.com'
#     elipo_email = event["stage-variables"]["notification_email"]

#     global dbScehma
#     dbScehma = event["stage-variables"]["schema"]

#     resp = client.get_secret_value(
#         SecretId=secret
#     )

#     secretDict = json.loads(resp['SecretString'])

#     mydb = pymysql.connect(
#         host=secretDict['host'],
#         user=secretDict['username'],
#         passwd=secretDict['password'],
#         database=secretDict['dbname'],
#         charset='utf8mb4',
#         cursorclass=pymysql.cursors.DictCursor
#     )

#     if pdfTextExtractionStatus == 'processed':

#         try:
#             with mydb.cursor() as mycursor:
#                 defSchemaQuery = "use " + dbScehma
#                 mycursor.execute(defSchemaQuery)
                
#                 mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
#                 on = mycursor.fetchone()
#                 if on['value1'] == 'on':
#                     chk = enable_xray(event)
#                     if chk['Enable'] == True:
#                         patch_all() 
#                         print(event)

#                 values = (pdfTextExtractionJobId,)
#                 mycursor.execute("SELECT * FROM mail_message where job_id = %s", values)
#                 job_details = mycursor.fetchone()
                
#                 if job_details == '':
#                     mycursor.execute("SELECT * FROM aws_mail_message where job_id = %s", values)
#                     job_details = mycursor.fetchone()

#                 if job_details:
#                     pdfTextExtractionS3ObjectName = job_details['filename']

               

#                 faulty_invoice = False

#                 # # ocr_folder_name = pdfTextExtractionS3ObjectName.split('/')

#                 # # values = (ocr_folder_name[0],)
#                 # values = ("old-dev",)

#                 # mycursor.execute('select * from elipo_saas_seeting.schemas_confg where ocr_folder = %s', values)
#                 # ocr_folder = mycursor.fetchone()

#                 # # defSchemaQuery = "use " + ocr_folder['schema_name']
#                 # # mycursor.execute(defSchemaQuery)

#                 # dbScehma = ocr_folder['schema_name']
  
#                 header = {
#                     "invoice_id":None,
#                     "status": "new",
#                     "ref_po_num": None,
#                     "user_invoice_no": None,
#                     "user_invoice_id":None,
#                     "company_code": None,
#                     "invoice_date": None,
#                     "posting_date": "",
#                     "baseline_date": "",
#                     "payment_terms": None,
#                     "payment_method": None,
#                     "amount": 0.00,
#                     "currency": None,
#                     "gl_account": None,
#                     "business_area": "",
#                     "supplier_id": None,
#                     "approver_id": "",
#                     "supplier_name": None,
#                     "discount": "",
#                     "cost_center": None,
#                     "tds": None,
#                     "npo": None,
#                     "is_igst": '',
#                     "tax_per": None,
#                     "doc_type": '',
#                     "gstin": '',
#                     'customer_name':'',
#                     'tcs':0,
#                     'jurisdiction_code':''
#                 }

#                 headerKeyValues = {
#                     'Document Title': "",
#                     'Invoice Number': "",
#                     'Invoice Date': "",
#                     'PO Number': "",
#                     'PO Date': "",
#                     'Customer Name': "",
#                     'Vendor Name': "",
#                     'Vendor Tax ID': "",

#                     'Sub Total': "",
#                     'Total Amount': "",
#                     'Discount': "",
#                     'CGST': "",
#                     'SGST': "",
#                     'IGST': "",
#                     'TCS': "",
#                     'Taxable Value': "",

#                     'Bill of Lading Number': "",
#                     'Due Date': "",
#                     'Tax Amount': "",
#                     'Amount Paid': "",
#                     'Amount Due': "",
#                     'Currency': "",
#                     'Payment Terms': "",
#                 }

#                 for each in event['body-json']['key_value_pairs']:
                    
#                         if each['display_name'] == 'Supplier Name':   #changed
#                            each['display_name'] = 'Vendor Name'
                    
#                         headerKeyValues[each['display_name']] = each['value']
                

#                 # header['jurisdiction_code'] = ''
#                 vn = '' #change
#                 jurisdiction_code = ''
#                 for j in event['body-json']['key_value_pairs'] :
#                     if j['display_name'] == 'Vendor Name':
#                         vn = j['value']
#                         break
                
#                 if vn != '':
#                     mycursor.execute("select * from vendor_master ")
#                     valuevm = mycursor.fetchall()
#                     compare = vn
#                     for i in valuevm :
#                         per = fuzz.ratio(i['vendor_name'], compare )
#                         if per > 85 :
#                             jurisdiction_code = i['jurisdiction_code']
#                             header['jurisdiction_code'] = jurisdiction_code
#                             break  #change

#                 print(headerKeyValues['Vendor Name'])
#                 if(headerKeyValues['Vendor Name'] in 'Decor for Better Living ARCHIDPLY DÉCOR LTD'):   #changed
#                     headerKeyValues['Taxable Value'] = headerKeyValues['Taxable Value'].split(' ')[0]
                        
#                 headerKeyValues['Taxable Value'] = headerKeyValues['Taxable Value'].replace(',','')
#                 headerKeyValues['Total Amount'] = headerKeyValues['Total Amount'].replace(',','') 

#                 if headerKeyValues['Taxable Value'] and headerKeyValues['Total Amount']:
#                     rat = float(headerKeyValues['Total Amount']) / float(headerKeyValues['Taxable Value'])
#                     rat = float("{:.2f}".format(rat)) - 1
#                     header['tax_per'] = round(rat  * 100)

#                 if headerKeyValues['IGST']:
#                     header['is_igst'] = 'y'

#                 header['invoice_date'] = clearDate(rawDate=headerKeyValues['Invoice Date'].strip())
#                 header["user_invoice_no"] = headerKeyValues['Invoice Number'].strip().replace(' ', '')
#                 header["gstin"] = headerKeyValues['Vendor Tax ID'].strip().replace(' ', '')
#                 header["ref_po_num"] = headerKeyValues['PO Number'].strip().replace(' ', '')
#                 header['customer_name']= headerKeyValues['Customer Name']
#                 header['tcs'] = headerKeyValues['TCS']  

                 
                
#                 # header['doc_type'] =

#                 header_flags = {'usr_invoice': False,
#                                 'gstin': False,
#                                 'pan': False,
#                                 'invoice_date': False,
#                                 'posting_date': False,
#                                 'po': False
#                                 }

#                 vendor = {}

#                 if headerKeyValues['Vendor Name'] or headerKeyValues['Vendor Tax ID']:
#                     vendor = find_vendor(mycursor=mycursor,
#                                          r_vendor={
#                                              'vendor_name': headerKeyValues['Vendor Name'],
#                                              'gstin': headerKeyValues['Vendor Tax ID']
#                                          },
#                                          idate=header['invoice_date']
#                                          )

#                 if not vendor:
#                     vendor = fetch_default_vendor(mycursor=mycursor,
#                                                   idate=header['invoice_date'])

#                 if vendor:
#                     header['currency'] = str(vendor['currency']).upper()
#                     header['supplier_name'] = str(vendor['vendor_name'])
#                     header['baseline_date'] = str(vendor['due_date'])
#                     header["payment_terms"] = str(vendor['payment_terms'])
#                     header['supplier_id'] = str(vendor['vendor_code'])

#                     if not header['is_igst']:
#                         header['is_igst'] = str(vendor['is_igst'])

#                     header['tds'] = vendor['tds']
#                     header['gstin'] = vendor['gstin']

#                 mycursor.execute(
#                     "select value1, value2 from dropdown where drop_key = 'default-master-detail' ")
#                 default_data = mycursor.fetchall()

#                 d_currency = None
#                 d_glaccountItem = None
#                 d_paymentTerms = None
#                 d_taxPer = None
#                 d_tdsPer = None

#                 for each in default_data:
#                     if each['value1'] == 'company_code':
#                         header["company_code"] = each['value2']
#                     elif each['value1'] == 'cost_center':
#                         header["cost_center"] = each['value2']
#                     elif each['value1'] == 'currency':
#                         d_currency = each['value2']
#                     if each['value1'] == 'gl_account_header':
#                         header["gl_account"] = each['value2']
#                     elif each['value1'] == 'gl_account_item':
#                         d_glaccountItem = each['value2']
#                     elif each['value1'] == 'payment_method':
#                         header["payment_method"] = each['value2']
#                     if each['value1'] == 'payment_terms':
#                         d_paymentTerms = each['value2']
#                     elif each['value1'] == 'plant':
#                         header["plant"] = each['value2']
#                     elif each['value1'] == 'tax_per' and not header["tax_per"]:
#                         header["tax_per"] = each['value2']
#                     elif each['value1'] == 'tds_per':
#                         d_tdsPer = each['value2']

#                 if not header['supplier_id']:
#                     header["currency"] = d_currency
#                     header["payment_terms"] = d_paymentTerms
#                     header['tds'] = d_tdsPer
                    
#                     # print("lalallalallalalalala",header['invoice_date'], d_paymentTerms )

#                     if header['invoice_date'] and d_paymentTerms:
#                         if d_paymentTerms == 'On the month end':
#                             noofday = str(
#                                 calendar.monthrange(header['invoice_date'].year, header['invoice_date'].month)[1])
#                             header["baseline_date"] = str(
#                                 (header['invoice_date'] + datetime.timedelta(
#                                     int(noofday) - int(header['invoice_date'].day))).date())
#                         else:
#                             header["baseline_date"] = str(
#                                 (header['invoice_date'] + datetime.timedelta(int(d_paymentTerms))).date())

#                 npo = None

#                 #boc acu
#                 accuracy_header = header 
#                 # print(header)
#                 #eoc acu 

#                 if header['ref_po_num']:
#                     npo = 'n'
#                 else:
#                     npo = 'y'

#                 sup_status = ""
#                 from_supplier = ""

#                 tename = pdfTextExtractionS3ObjectName.split("/")

#                 if len(tename) > 1 and tename[1][0] == "S":
#                     header["status"] = ""
#                     sup_status = "draft"
#                     from_supplier = "y"

#                 sqlQuery = "select * from invoice_header where user_invoice_id = %s"
#                 mycursor.execute(sqlQuery,header["user_invoice_no"])
#                 values1 =  mycursor.fetchone()

#                 sqlQuery1 = "select count(*) from invoice_header_resent where invoice_id = %s"
#                 mycursor.execute(sqlQuery1,header["user_invoice_no"])
#                 values2 = mycursor.fetchall()
#                 values2 = values2[0]
#                 values2 = int(values2['count(*)'])
#                 # values2 = str(values2 + 1)  
                
#                 sqlQuery = "select * from invoice_header_resent where user_invoice_id = %s"
#                 mycursor.execute(sqlQuery,header["user_invoice_no"])
#                 values3 = mycursor.fetchone()
                
#                 sqlQuery = mycursor.execute("select * from elipo_setting where key_name = 'resent_invoice' ")
#                 values4 = mycursor.fetchone()
                
#                 mycursor.execute("select company_code from default_master where country = (select value1 from elipo_setting where key_name = 'country')")
#                 value5 = mycursor.fetchone()
                
#                 if values1 != None  and values3 == None and values4['value1'] == 'on':
#                     if header["user_invoice_no"] == values1["user_invoice_id"] and values1["in_status"] == "invoice_resent" :
#                         sqlQuery = "INSERT INTO invoice_header (in_status, sup_status, from_supplier, user_invoice_id, ref_po_num, " \
#                                 " company_code, invoice_date, posting_date, baseline_date, amount, currency, payment_method, gl_account," \
#                                 " business_area, supplier_id, supplier_name, cost_center, tcs, is_igst, tax_per, tds_per, payment_terms, npo, document_type, gstin, customer_name , jurisdiction_code) " \
#                                 "VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s)"

#                     # header["posting_date"] = str(datetime.date.today())
#                         values2 = str(values2 + 1)
#                         header["invoice_id"] = header["user_invoice_no"]
#                         header["user_invoice_no"] = "R" + values2 +"_"+header["user_invoice_no"]
#                         values = (header["status"], sup_status, from_supplier, header["user_invoice_no"], header["ref_po_num"],
#                                 value5["company_code"],
#                                 header["invoice_date"], header["posting_date"], header["baseline_date"], header["amount"],
#                                 header["currency"], header["payment_method"], header["gl_account"], header["business_area"],
#                                 header["supplier_id"], header["supplier_name"], header["cost_center"], header['tcs'], header['is_igst'],
#                                 header['tax_per'], header['tds'],
#                                 header["payment_terms"], npo, header['doc_type'], header['gstin'], header['customer_name'] , header['jurisdiction_code'])

#                         # print(sqlQuery)
#                         # print(values)
#                         # print(header) # acr
#                         header_accuracy = header # acr
#                         mycursor.execute(sqlQuery, values)

#                         invoice_no = mycursor.lastrowid
#                         header["user_invoice_id"] = header["user_invoice_no"]
#                         sqlQuery1 = "INSERT INTO invoice_header_resent (invoice_no,invoice_id,in_status, sup_status, from_supplier, user_invoice_id, ref_po_num, " \
#                                 " company_code, invoice_date, posting_date, baseline_date, amount, currency, payment_method, gl_account," \
#                                 " business_area, supplier_id, supplier_name, cost_center, tcs, is_igst, tax_per, tds_per, payment_terms, npo, document_type, gstin, customer_name) " \
#                                 "VALUES (%s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s)"

#                         values1= (invoice_no,header["invoice_id"],header["status"], sup_status, from_supplier,header["user_invoice_id"],  header["ref_po_num"],
#                                 value5["company_code"],
#                                 header["invoice_date"], header["posting_date"], header["baseline_date"], header["amount"],
#                                 header["currency"], header["payment_method"], header["gl_account"], header["business_area"],
#                                 header["supplier_id"], header["supplier_name"], header["cost_center"], header['tcs'], header['is_igst'],
#                                 header['tax_per'], header['tds'],
#                                 header["payment_terms"], npo, header['doc_type'], header['gstin'], header['customer_name'])
#                         # print(sqlQuery1)
#                         # print(values1)
#                         mycursor.execute(sqlQuery1, values1)

#                         if not header["user_invoice_no"] or not header["invoice_date"] or not \
#                                 header["supplier_id"]:
#                             faulty_invoice = True

#                         item = {
#                             "invoice_no": "",
#                             "item_no": "",
#                             "material": "",
#                             "quantity": "",
#                             "amount": "",
#                             "payment_method": "",
#                             "tax_amount": "",
#                             "tax_code": "",
#                             "ref_po_no": "",
#                             "plant": ""
#                         }

#                         # paper-entry format

#                         rowItemsByPaperAi = []

#                         for eachItem in event['body-json']['line_items']:

#                             d_ItemPaperAi = {
#                                 'hsn_code': "",
#                                 'material': "",
#                                 'material_desc': "",
#                                 'quantity': "",
#                                 'unit': "",
#                                 'amount': "",
#                                 'currency': "",
#                                 'amt_per_unit': "",
#                                 'gst_per': "",
#                                 'gl_account': "",
#                             }

#                             for each in eachItem:
#                                 # if each == "Product Description":
#                                 #     d_ItemPaperAi['material_desc'] = eachItem[each]
#                                 # elif each == "Rate":
#                                 #     d_ItemPaperAi['amt_per_unit'] = eachItem[each].replace(',','')  
#                                 # elif each == "Unit of Measure":
#                                 #     d_ItemPaperAi['unit'] = eachItem[each]
#                                 # elif each == "Quantity":
#                                 #     d_ItemPaperAi['quantity'] = eachItem[each]
#                                 # elif each == "Currency":
#                                 #     d_ItemPaperAi['currency'] = eachItem[each]
#                                 # elif each == "Product Code":
#                                 #     d_ItemPaperAi['hsn_code'] = eachItem[each]
#                                 # elif each == "Line Total":
#                                 #     d_ItemPaperAi['amount'] = eachItem[each]
#                                 # elif each == "HSN Code":
#                                 #     d_ItemPaperAi['hsn_code'] = eachItem[each]
#                                 # # elif each == "":
#                                 # #     d_ItemPaperAi[''] = eachItem[each]
#                                 # # elif each == "":
#                                 # #     d_ItemPaperAi[''] = eachItem[each]
                                
#                                 if each == "Product Description":
#                                     d_ItemPaperAi['material_desc'] = eachItem[each]
#                                 elif each == "Rate" or each == "Unit Price":
#                                 # elif each == "Unit Price":
#                                     d_ItemPaperAi['amt_per_unit'] = eachItem[each].replace(',','')  
#                                 elif each == "Unit of Measure":
#                                     d_ItemPaperAi['unit'] = eachItem[each]
#                                 elif each == "Quantity":
#                                     d_ItemPaperAi['quantity'] = eachItem[each]
#                                 elif each == "Currency":
#                                     d_ItemPaperAi['currency'] = eachItem[each]
#                                 elif each == "Product Code":
#                                     d_ItemPaperAi['hsn_code'] = eachItem[each]
#                                 # elif each == "Line Total":
#                                 elif each == "Line Amount":
#                                     d_ItemPaperAi['amount'] = eachItem[each]
#                                 # elif each == "HSN Code":
#                                 elif each == "HS Code":
#                                     d_ItemPaperAi['hsn_code'] = eachItem[each]    

#                             if not d_ItemPaperAi['gst_per']:
#                                 d_ItemPaperAi['gst_per'] = header['tax_per']

#                             rowItemsByPaperAi.append(d_ItemPaperAi)

#                         if rowItemsByPaperAi:

#                             # print(rowItemsByPaperAi)

#                             mycursor.execute("SELECT * FROM material_master")
#                             materials = mycursor.fetchall()

#                             mycursor.execute("SELECT * FROM master where master_id = 6")
#                             db_units = mycursor.fetchall()
#                             units = []
#                             for cur in db_units:
#                                 units.append(cur['code'])
#                             del db_units

#                             exclude_lines = ['net price', 'CGST', 'CGST %', 'CGST @ %',
#                                             'SGST', 'SGST %', 'SGST @ %',
#                                             'IGST', 'IGST %', 'IGST @ %',
#                                             'TOTAL', 'UTGST/SGST', 'Conditions',
#                                             'Exchange Rate USD to EUR', 'Q 10-14898 RECEIVED 19 AUG 2020 Facilities DA']

#                             exclude_no = []

#                             # for row in rowItemsByPaperAi:
#                             for index, row in enumerate(rowItemsByPaperAi):
                                
#                                 if not row['material_desc']:
#                                     continue   

#                                 flag1 = None

#                                 for exclude in exclude_lines:

#                                     fuz_dist22 = fuzz.partial_ratio(exclude.lower(), row['material_desc'].lower())

#                                     if fuz_dist22 > 70 and not len(exclude) * 4 < len(row['material_desc']):
#                                         flag1 = True
#                                         exclude_no.append(index)
#                                         break

#                                 if flag1:
#                                     continue

#                                 match_per = 0
#                                 db_matnr = {}   

#                                 row['currency'] = row['currency'].strip()
                                
#                                 if row['currency']:
#                                     try:
#                                         row['currency'] = str(row['currency']).upper()
#                                     except:
#                                         pass

#                                 row['unit'] = row['unit'].strip()
#                                 if row['unit'] and not row['unit'] in units:
#                                     row['unit'] = None

#                                 if not row['amt_per_unit']:
#                                     row['amt_per_unit'] = None

#                                 for mater in materials:

#                                     value = row['material_desc'][0:48]

#                                     # print(fuzz.ratio(row_name.lower(), mater['name'].lower()), "ratio")
#                                     # print(fuzz.token_set_ratio(row_name, mater['name']), "token_set_ratio")
#                                     # fuz_dist = fuzz.token_set_ratio(value.lower(), mater['material_name'].lower())
#                                     # fuz_dist = fuzz.ratio(value.lower(), mater['material_name'].lower())

#                                     fuz_dist = fuzz.WRatio(value.lower(), mater['material_name'].lower())

#                                     if fuz_dist >= 70 and fuz_dist > match_per:
#                                         match_per = fuz_dist
#                                         db_matnr = mater

#                                 if db_matnr:
                                    
#                                     print(match_per, "-----", value, "-------",  db_matnr['material_name'])

#                                     row['material'] = db_matnr['material_no']
#                                     row['material_desc'] = db_matnr['material_name']

#                                     if not row['amt_per_unit']:
#                                         row['amt_per_unit'] = db_matnr['unit_price']

#                                     if not row['hsn_code']:
#                                         row['hsn_code'] = db_matnr['hsn_code']

#                                     if not row['unit']:
#                                         row['unit'] = db_matnr['uom']

#                                     if not row['gst_per']:
#                                         row['gst_per'] = db_matnr['gst_per']
                                        
#                                     if not row['currency'] and header['currency']:
#                                         row['currency'] = header['currency']    

#                                     row['gl_account'] = db_matnr['gl_account']
#                                     row['ocr_matched'] = 'y'
#                                     # row[''] = db_matnr['']

#                                     # if no rate, quantity and amount there rate = amount
#                                     # if not quantity then make as 1

#                                     # df.loc[index, 'gross_amount'] = amoty + (
#                                     #         amoty * (int(db_matnr['gst_per']) / 100))
                                    


#                                 else:
#                                     row['ocr_matched'] = 'n'

#                                 #BOC ACU
#                                 # print(row)
#                                 #EOC ACU

#                             if exclude_no:
#                                 temp_rowItems = rowItemsByPaperAi
#                                 rowItemsByPaperAi = []

#                                 for index, eachItm in enumerate(temp_rowItems):
#                                     if index not in exclude_no:
#                                         rowItemsByPaperAi.append(eachItm)

#                                 del temp_rowItems

#                             del exclude_no
#                             del exclude_lines

#                             sqlFields = "invoice_no, item_no"
#                             sqlPer = "%s, %s"

#                             # item_category = fetchSAP_PoDetails(header['ref_po_num'])

#                             # supplier_type = ''
#                             # vendor_no = ''
#                             # vendor_currency = ''

#                             # if vendor:
#                             #     if vendor['gst_treatment'] == 'overseas':
#                             #         supplier_type = 'export'
#                             #     else:
#                             #         supplier_type = 'domestic'

#                             #     vendor_no = header['supplier_id']
#                             #     vendor_currency = header['currency']

#                             # d_decider = {
#                             #     'supplier_type': supplier_type,
#                             #     'invoice_value': headerAmount,
#                             #     'invoice_type': item_category,
#                             #     'vendor_no': vendor_no,
#                             #     'currency': vendor_currency,
#                             #     'document_type': header['doc_type']
#                             # }

#                             # success, emails = assign_approcessor(mycursor=mycursor, invoice_id=invoice_no, decider=d_decider)

#                             if rowItemsByPaperAi:
#                                 #here
#                                 row = rowItemsByPaperAi[0]
            
#                                 for each in row:
#                                     sqlFields = sqlFields + ", " + str(each)
#                                     sqlPer = sqlPer + ", %s"


#                                 try:
#                                     sqlQuery = "INSERT INTO invoice_item ( " + sqlFields + ") " \
#                                                                                         "VALUES ( " + sqlPer + " )"
            
#                                     final_values = []
#                                     for index, row in enumerate(rowItemsByPaperAi):
            
#                                         raw_list = [invoice_no, index + 1]
            
#                                         for value in row.values():
#                                             raw_list.append(value)
            
#                                         final_values.append(tuple(raw_list))
            
#                                     # print(sqlQuery)
#                                     # print(final_values)
            
#                                     values = mycursor.executemany(sqlQuery, final_values)
#                                     # print(values)

#                                 except Exception as e:
#                                     print(e, "ened")

#                         # print(rowItemsByPaperAi) #accr
#                         item_accuracy = rowItemsByPaperAi

#                         item = {
#                             "invoice_no": "",
#                             "item_no": "",
#                             "material": "",
#                             "quantity": "",
#                             "amount": "",
#                             "payment_method": "",
#                             "tax_amount": "",
#                             "tax_code": "",
#                             "ref_po_no": "",
#                             "plant": ""
#                         }

#                         # paper-entry format

#                         rowItemsByPaperAi = []

#                         for eachItem in event['body-json']['line_items']:

#                             d_ItemPaperAi = {
#                                 "user_invoice_id":header['user_invoice_no'],
#                                 "invoice_id":header['invoice_id'],
#                                 'hsn_code': "",
#                                 'material': "",
#                                 'material_desc': "",
#                                 'quantity': "",
#                                 'unit': "",
#                                 'amount': "",
#                                 'currency': "",
#                                 'amt_per_unit': "",
#                                 'gst_per': "",
#                                 'gl_account': "",
#                             }

#                             for each in eachItem:
#                                 # if each == "Product Description":
#                                 #     d_ItemPaperAi['material_desc'] = eachItem[each]
#                                 # elif each == "Rate":
#                                 #     d_ItemPaperAi['amt_per_unit'] = eachItem[each].replace(',','')  
#                                 # elif each == "Unit of Measure":
#                                 #     d_ItemPaperAi['unit'] = eachItem[each]
#                                 # elif each == "Quantity":
#                                 #     d_ItemPaperAi['quantity'] = eachItem[each]
#                                 # elif each == "Currency":
#                                 #     d_ItemPaperAi['currency'] = eachItem[each]
#                                 # elif each == "Product Code":
#                                 #     d_ItemPaperAi['hsn_code'] = eachItem[each]
#                                 # elif each == "Line Total":
#                                 #     d_ItemPaperAi['amount'] = eachItem[each]
#                                 # elif each == "HSN Code":
#                                 #     d_ItemPaperAi['hsn_code'] = eachItem[each]
#                                 # # elif each == "":
#                                 # #     d_ItemPaperAi[''] = eachItem[each]
#                                 # # elif each == "":
#                                 # #     d_ItemPaperAi[''] = eachItem[each]
                                
#                                 if each == "Product Description":
#                                     d_ItemPaperAi['material_desc'] = eachItem[each]
#                                 elif each == "Rate" or each == "Unit Price":
#                                 # elif each == "Unit Price":
#                                     d_ItemPaperAi['amt_per_unit'] = eachItem[each].replace(',','')  
#                                 elif each == "Unit of Measure":
#                                     d_ItemPaperAi['unit'] = eachItem[each]
#                                 elif each == "Quantity":
#                                     d_ItemPaperAi['quantity'] = eachItem[each]
#                                 elif each == "Currency":
#                                     d_ItemPaperAi['currency'] = eachItem[each]
#                                 elif each == "Product Code":
#                                     d_ItemPaperAi['hsn_code'] = eachItem[each]
#                                 # elif each == "Line Total":
#                                 elif each == "Line Amount":
#                                     d_ItemPaperAi['amount'] = eachItem[each]
#                                 # elif each == "HSN Code":
#                                 elif each == "HS Code":
#                                     d_ItemPaperAi['hsn_code'] = eachItem[each]    

#                             if not d_ItemPaperAi['gst_per']:
#                                 d_ItemPaperAi['gst_per'] = header['tax_per']

#                             rowItemsByPaperAi.append(d_ItemPaperAi)

#                         if rowItemsByPaperAi:

#                             # print(rowItemsByPaperAi)

#                             mycursor.execute("SELECT * FROM material_master")
#                             materials = mycursor.fetchall()

#                             mycursor.execute("SELECT * FROM master where master_id = 6")
#                             db_units = mycursor.fetchall()
#                             units = []
#                             for cur in db_units:
#                                 units.append(cur['code'])
#                             del db_units

#                             exclude_lines = ['net price', 'CGST', 'CGST %', 'CGST @ %',
#                                             'SGST', 'SGST %', 'SGST @ %',
#                                             'IGST', 'IGST %', 'IGST @ %',
#                                             'TOTAL', 'UTGST/SGST', 'Conditions',
#                                             'Exchange Rate USD to EUR', 'Q 10-14898 RECEIVED 19 AUG 2020 Facilities DA']

#                             exclude_no = []

#                             # for row in rowItemsByPaperAi:
#                             for index, row in enumerate(rowItemsByPaperAi):
                                
#                                 if not row['material_desc']:
#                                     continue   

#                                 flag1 = None

#                                 for exclude in exclude_lines:

#                                     fuz_dist22 = fuzz.partial_ratio(exclude.lower(), row['material_desc'].lower())

#                                     if fuz_dist22 > 70 and not len(exclude) * 4 < len(row['material_desc']):
#                                         flag1 = True
#                                         exclude_no.append(index)
#                                         break

#                                 if flag1:
#                                     continue

#                                 match_per = 0
#                                 db_matnr = {}   

#                                 row['currency'] = row['currency'].strip()
                                
#                                 if row['currency']:
#                                     try:
#                                         row['currency'] = str(row['currency']).upper()
#                                     except:
#                                         pass

#                                 row['unit'] = row['unit'].strip()
#                                 if row['unit'] and not row['unit'] in units:
#                                     row['unit'] = None

#                                 if not row['amt_per_unit']:
#                                     row['amt_per_unit'] = None

#                                 for mater in materials:

#                                     value = row['material_desc'][0:48]

#                                     # print(fuzz.ratio(row_name.lower(), mater['name'].lower()), "ratio")
#                                     # print(fuzz.token_set_ratio(row_name, mater['name']), "token_set_ratio")
#                                     # fuz_dist = fuzz.token_set_ratio(value.lower(), mater['material_name'].lower())
#                                     # fuz_dist = fuzz.ratio(value.lower(), mater['material_name'].lower())

#                                     fuz_dist = fuzz.WRatio(value.lower(), mater['material_name'].lower())

#                                     if fuz_dist >= 70 and fuz_dist > match_per:
#                                         match_per = fuz_dist
#                                         db_matnr = mater

#                                 if db_matnr:
                                    
#                                     print(match_per, "-----", value, "-------",  db_matnr['material_name'])

#                                     row['material'] = db_matnr['material_no']
#                                     row['material_desc'] = db_matnr['material_name']

#                                     if not row['amt_per_unit']:
#                                         row['amt_per_unit'] = db_matnr['unit_price']

#                                     if not row['hsn_code']:
#                                         row['hsn_code'] = db_matnr['hsn_code']

#                                     if not row['unit']:
#                                         row['unit'] = db_matnr['uom']

#                                     if not row['gst_per']:
#                                         row['gst_per'] = db_matnr['gst_per']
                                        
#                                     if not row['currency'] and header['currency']:
#                                         row['currency'] = header['currency']    

#                                     row['gl_account'] = db_matnr['gl_account']
#                                     row['ocr_matched'] = 'y'
#                                     # row[''] = db_matnr['']

#                                     # if no rate, quantity and amount there rate = amount
#                                     # if not quantity then make as 1

#                                     # df.loc[index, 'gross_amount'] = amoty + (
#                                     #         amoty * (int(db_matnr['gst_per']) / 100))

#                                 else:
#                                     row['ocr_matched'] = 'n'

#                             if exclude_no:
#                                 temp_rowItems = rowItemsByPaperAi
#                                 rowItemsByPaperAi = []

#                                 for index, eachItm in enumerate(temp_rowItems):
#                                     if index not in exclude_no:
#                                         rowItemsByPaperAi.append(eachItm)

#                                 del temp_rowItems

#                             del exclude_no
#                             del exclude_lines

#                             sqlFields = "invoice_no, item_no"
#                             sqlPer = "%s, %s"

#                             # item_category = fetchSAP_PoDetails(header['ref_po_num'])

#                             # supplier_type = ''
#                             # vendor_no = ''
#                             # vendor_currency = ''

#                             # if vendor:
#                             #     if vendor['gst_treatment'] == 'overseas':
#                             #         supplier_type = 'export'
#                             #     else:
#                             #         supplier_type = 'domestic'

#                             #     vendor_no = header['supplier_id']
#                             #     vendor_currency = header['currency']

#                             # d_decider = {
#                             #     'supplier_type': supplier_type,
#                             #     'invoice_value': headerAmount,
#                             #     'invoice_type': item_category,
#                             #     'vendor_no': vendor_no,
#                             #     'currency': vendor_currency,
#                             #     'document_type': header['doc_type']
#                             # }

#                             # success, emails = assign_approcessor(mycursor=mycursor, invoice_id=invoice_no, decider=d_decider)

#                             if rowItemsByPaperAi:
#                                 row = rowItemsByPaperAi[0]
            
#                                 for each in row:
#                                     sqlFields = sqlFields + ", " + str(each)
#                                     sqlPer = sqlPer + ", %s"

        
#                                 try:
#                                     sqlQuery = "INSERT INTO invoice_item_resent ( " + sqlFields + ") " \
#                                                                                         "VALUES ( " + sqlPer + " )"
            
#                                     final_values = []
#                                     for index, row in enumerate(rowItemsByPaperAi):
            
#                                         raw_list = [invoice_no, index + 1]
            
#                                         for value in row.values():
#                                             raw_list.append(value)
            
#                                         final_values.append(tuple(raw_list))
            
#                                     # print(sqlQuery)
#                                     # print(final_values)
            
#                                     values = mycursor.executemany(sqlQuery, final_values)
#                                     print(values)
                                    

#                                 # print(file_extension)
                                    
#                                     mydb.commit() #acu

#                                 except Exception as e:
#                                     print(e, "ened")
#                 else:
                    
#                     if header['supplier_name'] == 'PricewaterhouseCoopers Ltd':   #hello
#                         header['tax_per'] = 19

#                     sqlQuery = "INSERT INTO invoice_header (in_status, sup_status, from_supplier, user_invoice_id, ref_po_num, " \
#                             " company_code, invoice_date, posting_date, baseline_date, amount, currency, payment_method, gl_account," \
#                             " business_area, supplier_id, supplier_name, cost_center, tcs, is_igst, tax_per, tds_per, payment_terms, npo, document_type, gstin, customer_name , jurisdiction_code) " \
#                             "VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s , %s)"

#                     # header["posting_date"] = str(datetime.date.today())

#                     values = (header["status"], sup_status, from_supplier, header["user_invoice_no"], header["ref_po_num"],
#                             value5["company_code"],
#                             header["invoice_date"], header["posting_date"], header["baseline_date"], header["amount"],
#                             header["currency"], header["payment_method"], header["gl_account"], header["business_area"],
#                             header["supplier_id"], header["supplier_name"], header["cost_center"], header['tcs'], header['is_igst'],
#                             header['tax_per'], header['tds'],
#                             header["payment_terms"], npo, header['doc_type'], header['gstin'], header['customer_name'],header['jurisdiction_code'])

#                     # print(sqlQuery)
#                     # print(values)
#                     mycursor.execute(sqlQuery, values)

#                     invoice_no = mycursor.lastrowid      

#                     # if not header["user_invoice_no"] or not header["ref_po_num"] or not header["invoice_date"] or not \
#                     if not header["user_invoice_no"] or not header["invoice_date"] or not \
#                             header["supplier_id"]:
#                         faulty_invoice = True

#                     # BOC ACR
#                     # print(header)
#                     header_accuracy = header 
#                     #EOC ACR

#                     item = {
#                         "invoice_no": "",
#                         "item_no": "",
#                         "material": "",
#                         "quantity": "",
#                         "amount": "",
#                         "payment_method": "",
#                         "tax_amount": "",
#                         "tax_code": "",
#                         "ref_po_no": "",
#                         "plant": ""
#                     }

#                     # paper-entry format

#                     rowItemsByPaperAi = []

#                     for eachItem in event['body-json']['line_items']:

#                         d_ItemPaperAi = {
#                             'hsn_code': "",
#                             'material': "",
#                             'material_desc': "",
#                             'quantity': "",
#                             'unit': "",
#                             'amount': "",
#                             'currency': "",
#                             'amt_per_unit': "",
#                             'gst_per': "",
#                             'gl_account': ""
#                         }

#                         for each in eachItem:
#                             # if each == "Product Description":
#                             #     d_ItemPaperAi['material_desc'] = eachItem[each]
#                             # elif each == "Rate":
#                             #     d_ItemPaperAi['amt_per_unit'] = eachItem[each].replace(',','')  
#                             # elif each == "Unit of Measure":
#                             #     d_ItemPaperAi['unit'] = eachItem[each]
#                             # elif each == "Quantity":
#                             #     d_ItemPaperAi['quantity'] = eachItem[each]
#                             # elif each == "Currency":
#                             #     d_ItemPaperAi['currency'] = eachItem[each]
#                             # elif each == "Product Code":
#                             #     d_ItemPaperAi['hsn_code'] = eachItem[each]
#                             # elif each == "Line Total":
#                             #     d_ItemPaperAi['amount'] = eachItem[each]
#                             # elif each == "HSN Code":
#                             #     d_ItemPaperAi['hsn_code'] = eachItem[each]
#                             # # elif each == "":
#                             # #     d_ItemPaperAi[''] = eachItem[each]
#                             # # elif each == "":
#                             # #     d_ItemPaperAi[''] = eachItem[each]
                            
#                             if each == "Product Description":
#                                 d_ItemPaperAi['material_desc'] = eachItem[each]
#                             elif each == "Rate" or each == "Unit Price":
#                             # elif each == "Unit Price":
#                                 d_ItemPaperAi['amt_per_unit'] = eachItem[each].replace(',','')  
#                             elif each == "Unit of Measure":
#                                 d_ItemPaperAi['unit'] = eachItem[each]
#                             elif each == "Quantity":
#                                 d_ItemPaperAi['quantity'] = eachItem[each]
#                             elif each == "Currency":
#                                 d_ItemPaperAi['currency'] = eachItem[each]
#                             elif each == "Product Code":
#                                 d_ItemPaperAi['hsn_code'] = eachItem[each]
#                             # elif each == "Line Total":
#                             elif each == "Line Amount":
#                                 d_ItemPaperAi['amount'] = eachItem[each]
#                             # elif each == "HSN Code":
#                             elif each == "HS Code":
#                                 d_ItemPaperAi['hsn_code'] = eachItem[each]    

#                         if not d_ItemPaperAi['gst_per']:
#                             d_ItemPaperAi['gst_per'] = header['tax_per']

#                         rowItemsByPaperAi.append(d_ItemPaperAi)

#                     if rowItemsByPaperAi:

#                         # print(rowItemsByPaperAi)

#                         mycursor.execute("SELECT * FROM material_master")
#                         materials = mycursor.fetchall()

#                         mycursor.execute("SELECT * FROM master where master_id = 6")
#                         db_units = mycursor.fetchall()
#                         units = []
#                         for cur in db_units:
#                             units.append(cur['code'])
#                         del db_units

#                         exclude_lines = ['net price', 'CGST', 'CGST %', 'CGST @ %',
#                                         'SGST', 'SGST %', 'SGST @ %',
#                                         'IGST', 'IGST %', 'IGST @ %',
#                                         'TOTAL', 'UTGST/SGST', 'Conditions',
#                                         'Exchange Rate USD to EUR', 'Q 10-14898 RECEIVED 19 AUG 2020 Facilities DA']

#                         exclude_no = []

#                         # for row in rowItemsByPaperAi:
#                         # item_accuracy = [] 
#                         # item_accuracy = rowItemsByPaperAi
#                         for index, row in enumerate(rowItemsByPaperAi):
                            
#                             if not row['material_desc']:
#                                 continue   

#                             flag1 = None

#                             for exclude in exclude_lines:

#                                 fuz_dist22 = fuzz.partial_ratio(exclude.lower(), row['material_desc'].lower())

#                                 if fuz_dist22 > 70 and not len(exclude) * 4 < len(row['material_desc']):
#                                     flag1 = True
#                                     exclude_no.append(index)
#                                     break

#                             if flag1:
#                                 continue

#                             match_per = 0
#                             db_matnr = {}   

#                             row['currency'] = row['currency'].strip()
                            
#                             if row['currency']:
#                                 try:
#                                     row['currency'] = str(row['currency']).upper()
#                                 except:
#                                     pass

#                             row['unit'] = row['unit'].strip()
#                             if row['unit'] and not row['unit'] in units:
#                                 row['unit'] = None

#                             if not row['amt_per_unit']:
#                                 row['amt_per_unit'] = None

#                             for mater in materials:

#                                 value = row['material_desc'][0:48]

#                                 # print(fuzz.ratio(row_name.lower(), mater['name'].lower()), "ratio")
#                                 # print(fuzz.token_set_ratio(row_name, mater['name']), "token_set_ratio")
#                                 # fuz_dist = fuzz.token_set_ratio(value.lower(), mater['material_name'].lower())
#                                 # fuz_dist = fuzz.ratio(value.lower(), mater['material_name'].lower())

#                                 fuz_dist = fuzz.WRatio(value.lower(), mater['material_name'].lower())

#                                 if fuz_dist >= 70 and fuz_dist > match_per:
#                                     match_per = fuz_dist
#                                     db_matnr = mater

#                             if db_matnr:
                                
#                                 print(match_per, "-----", value, "-------",  db_matnr['material_name'])

#                                 row['material'] = db_matnr['material_no']
#                                 row['material_desc'] = db_matnr['material_name']

#                                 if not row['amt_per_unit']:
#                                     row['amt_per_unit'] = db_matnr['unit_price']

#                                 if not row['hsn_code']:
#                                     row['hsn_code'] = db_matnr['hsn_code']

#                                 if not row['unit']:
#                                     row['unit'] = db_matnr['uom']

#                                 if not row['gst_per']:
#                                     row['gst_per'] = db_matnr['gst_per']
                                    
#                                 if not row['currency'] and header['currency']:
#                                     row['currency'] = header['currency']    

#                                 row['gl_account'] = db_matnr['gl_account']
#                                 row['ocr_matched'] = 'y'
#                                 # row[''] = db_matnr['']

#                                 # if no rate, quantity and amount there rate = amount
#                                 # if not quantity then make as 1

#                                 # df.loc[index, 'gross_amount'] = amoty + (
#                                 #         amoty * (int(db_matnr['gst_per']) / 100))

#                             else:
#                                 row['ocr_matched'] = 'n'
                            
#                             # BOC ACR
#                             # item_accuracy = []
#                             item_accuracy.append(row)
#                             # print(item_accuracy)
#                             #EOC ACR

#                         if exclude_no:
#                             temp_rowItems = rowItemsByPaperAi
#                             rowItemsByPaperAi = []

#                             for index, eachItm in enumerate(temp_rowItems):
#                                 if index not in exclude_no:
#                                     rowItemsByPaperAi.append(eachItm)

#                             del temp_rowItems

#                         del exclude_no
#                         del exclude_lines

#                         sqlFields = "invoice_no, item_no"
#                         sqlPer = "%s, %s"

#                         # item_category = fetchSAP_PoDetails(header['ref_po_num'])

#                         # supplier_type = ''
#                         # vendor_no = ''
#                         # vendor_currency = ''

#                         # if vendor:
#                         #     if vendor['gst_treatment'] == 'overseas':
#                         #         supplier_type = 'export'
#                         #     else:
#                         #         supplier_type = 'domestic'

#                         #     vendor_no = header['supplier_id']
#                         #     vendor_currency = header['currency']

#                         # d_decider = {
#                         #     'supplier_type': supplier_type,
#                         #     'invoice_value': headerAmount,
#                         #     'invoice_type': item_category,
#                         #     'vendor_no': vendor_no,
#                         #     'currency': vendor_currency,
#                         #     'document_type': header['doc_type']
#                         # }

#                         # success, emails = assign_approcessor(mycursor=mycursor, invoice_id=invoice_no, decider=d_decider)
#                         #here
#                         item_accuracy = rowItemsByPaperAi
                        
#                         for v in rowItemsByPaperAi:
#                             if(v['quantity']):
#                                 v['quantity'] = str(v['quantity']).replace(",","")
                                
                                
#                         if rowItemsByPaperAi:
#                             row = rowItemsByPaperAi[0]
        
#                             for each in row:
#                                 sqlFields = sqlFields + ", " + str(each)
#                                 sqlPer = sqlPer + ", %s"

    
#                             try:
#                                 sqlQuery = "INSERT INTO invoice_item ( " + sqlFields + ") " \
#                                                                                     "VALUES ( " + sqlPer + " )"
        
#                                 final_values = []
                                
#                                 # if rowItemsByPaperAi != '': #changed
                                
#                                     # for det in rowItemsByPaperAi:
#                                     #     mycursor.execute("SELECT gst_per FROM einvoice_db_portal.material_master where material_no = %s" , det['material'] )
#                                     #     val_gst = mycursor.fetchone()
#                                     #     if val_gst != '':
#                                     #         if str(val_gst['gst_per']).isnumeric() :
#                                     #             det['gst_per'] = val_gst['gst_per']
#                                     #         else:
#                                     #             if str(val_gst['gst_per']) == 'VA':
#                                     #                 det['gst_per'] = 19
#                                     #             if str(val_gst['gst_per']) == '0I':
#                                     #                 det['gst_per'] = 0
#                                     #     # if det['material_desc'] == 'Our charges for services rendered to ArcelorMittal Liberia Holdings Limited' or det['material_desc'] ==  'Communication, printing, stationery and sundry expenses':
#                                     #     if det['material_desc'] == 'Our charges for services rendered to ArcelorMittal Liberia Holdings Limited' or det['material_desc'] ==  'Communication, printing, stationery and sundry expenses' or det['material_desc'] == 'Service for – July 2022' or det['material_desc'] == 'Service charges for May 2019 as per agreement' or det['material_desc'] == '10.113,78':
#                                     #         det['material'] = ' '
                                
#                                 for index, row in enumerate(rowItemsByPaperAi):
        
#                                     raw_list = [invoice_no, index + 1]
        
#                                     for value in row.values():
#                                         raw_list.append(value)
        
#                                     final_values.append(tuple(raw_list))
        
#                                 # print(sqlQuery)
#                                 # print(final_values)
        
#                                 mycursor.executemany(sqlQuery, final_values)
#                                 mydb.commit() #acu
                                
        
#                             except Exception as e:
#                                 print(e, "ened")

#                     else:
#                         faulty_invoice = True

#                     # item_category = fetchSAP_PoDetails(header['ref_po_num'])

#                 item_category = []
#                 supplier_type = ''
#                 vendor_no = ''
#                 vendor_currency = ''

#                 if vendor:
#                     if vendor['gst_treatment'] == 'overseas':
#                         supplier_type = 'export'
#                     else:
#                         supplier_type = 'domestic'

#                     vendor_no = header['supplier_id']
#                     vendor_currency = header['currency']

#                 d_decider = {
#                     'supplier_type': supplier_type,
#                     # 'invoice_value': headerAmount,
#                     'invoice_value': 0,
#                     'invoice_type': item_category,
#                     'vendor_no': vendor_no,
#                     'currency': vendor_currency,
#                     'document_type': header['doc_type']
#                 }

#                 success, emails = assign_approcessor(mycursor=mycursor, invoice_id=invoice_no, decider=d_decider)
#                 flagg = 'n'
#                 if faulty_invoice:
#                     flagg = 'y'

#                 link = "https://l8m6p8a76e.execute-api.eu-central-1.amazonaws.com/dev/attachment?file_name=" \
#                         + pdfTextExtractionS3ObjectName + "&bucket=" + pdfTextExtractionS3Bucket

#                 filenamett, file_extension = os.path.splitext(pdfTextExtractionS3ObjectName)

#                     # print(file_extension)
#                 content_type = ''

#                 if file_extension == ".pdf":
#                     content_type = "application/pdf"
#                 elif file_extension == ".png":
#                     content_type == "image/png"
#                 elif file_extension == ".jpg":
#                     content_type == "image/jpg"
#                 elif file_extension == ".jpeg":
#                     content_type == "image/jpg"

#                 values = (invoice_no, pdfTextExtractionS3ObjectName, content_type, pdfTextExtractionS3Bucket, link)
#                 sqlQuery = "INSERT INTO file_storage (file_id, name, mime_type, file_path, file_link) VALUES ( %s, %s, %s, %s, %s)"

#                 mycursor.execute(sqlQuery, values)

#                 values = (invoice_no, pdfTextExtractionS3ObjectName)
#                 mycursor.execute(
#                         "UPDATE mail_message SET invoice_no = %s WHERE filename = %s", values)
#                 mycursor.execute(
#                         "UPDATE aws_mail_message SET invoice_no = %s WHERE filename = %s", values)
#                 # print(values)

#                 mycursor.execute("SELECT * FROM elipo_setting where key_name = 'approval_auto_trigger'")
#                 detgb = mycursor.fetchone()

#                 res = False
#                 instatus = "new"

#                 if detgb:
#                     if detgb['value1'] == "on":

#                         if flagg != "y":

#                             npo = ""

#                             if header['ref_po_num']:
#                                 npo = "y"
#                             else:
#                                 npo = "n"

#                             r_decider = {
#                                 'discount': 0,
#                                     # 'amount': headerAmount,
#                                 'amount': 0,
#                                 'cost_center': "",
#                                 'currency': header['currency'],
#                                 'gl_account': str(header["gl_account"]),
#                                 'npo': header["npo"],
#                                 'vendor_no': str(header["supplier_id"]),
#                                 'department_id': "",
#                                 'item_category': item_category,
#                                 'document_type': header['doc_type']
#                             }

#                             res = create_approvals(mycursor=mycursor, invoice_id=invoice_no, decider=r_decider,
#                                                     working_person="ocr")

#                 if res == False:
#                         # if emails:
#                         #     sendMailNotifications(invoice_id=invoice_no, emails=emails)
#                     pass
#                 else:
#                     instatus = "inapproval"

#                 sqlQuery = "update invoice_header set in_status = %s, amount = %s, faulty_invoice= %s " \
#                             "where invoice_no = %s"
#                     # values = (instatus, str(headerAmount), flagg, invoice_no)
#                 values = (instatus, str(0), flagg, invoice_no)

#                 mycursor.execute(sqlQuery, values)

#                 # print(header_accuracy , item_accuracy[0]) #acu
#                 mycursor.execute("select * from elipo_setting where key_name = 'accuracy_parameter'")
#                 ocr_accurcy_on = mycursor.fetchone()
#                 if ocr_accurcy_on and ocr_accurcy_on['value1'] == "on":
#                     h_acr , i_acr ,overall = find_accuracy(header_accuracy ,item_accuracy ,mycursor)
#                     if overall != 0:
#                         sqlQuery = "UPDATE invoice_header SET head_accuracy = %s, item_accuracy =%s , ocr_inv = 'y', ocr_accuracy = %s WHERE invoice_no = %s "
#                         values = (  str(h_acr ), str(i_acr),str(overall), invoice_no)
#                         mycursor.execute(sqlQuery, values)

                

#                 mydb.commit()  #acu

#         # except Exception as e:
#         #     print(e)
#         #     mydb.rollback()

#         #     try:
#         #         with mydb.cursor() as mycursor:

#         #             values = (pdfTextExtractionS3ObjectName,)
#         #             # mycursor.execute("DELETE FROM mail_message WHERE filename = %s", values)
#         #             mycursor.execute(
#         #                 "UPDATE mail_message SET is_processed = 'n' WHERE filename = %s",
#         #                 values)

#         #             mydb.commit()

#         #     finally:
#         #         pass

#         finally:
#             mydb.close()

#     else:

#         try:
#             with mydb.cursor() as mycursor:

#                 values = ("new",)

#                 mycursor.execute("INSERT INTO invoice_header (in_status) VALUES (%s)", values)

#                 invoice_no = mycursor.lastrowid

#                 link = "https://l8m6p8a76e.execute-api.eu-central-1.amazonaws.com/dev/attachment?file_name=" \
#                        + pdfTextExtractionS3ObjectName + "&bucket=" + pdfTextExtractionS3Bucket

#                 filenamett, file_extension = os.path.splitext(pdfTextExtractionS3ObjectName)

#                 # print(file_extension)
#                 content_type = ''

#                 if file_extension == ".pdf":
#                     content_type = "application/pdf"
#                 elif file_extension == ".png":
#                     content_type == "image/png"
#                 elif file_extension == ".jpg":
#                     content_type == "image/jpg"
#                 elif file_extension == ".jpeg":
#                     content_type == "image/jpg"

#                 values = (invoice_no, pdfTextExtractionS3ObjectName, content_type, pdfTextExtractionS3Bucket, link)
#                 sqlQuery = "INSERT INTO file_storage (file_id, name, mime_type, file_path, file_link) VALUES ( %s, %s, %s, %s, %s)"

#                 mycursor.execute(sqlQuery, values)

#                 values = (invoice_no, pdfTextExtractionS3ObjectName)
#                 mycursor.execute(
#                     "UPDATE mail_message SET invoice_no = %s WHERE filename = %s", values)
#                 mycursor.execute(
#                     "UPDATE aws_mail_message SET invoice_no = %s WHERE filename = %s", values)

#                 # values = (pdfTextExtractionS3ObjectName,)
#                 # # mycursor.execute("DELETE FROM mail_message WHERE filename = %s", values)
#                 # mycursor.execute("UPDATE mail_message SET is_processed = 'n' WHERE filename = %s",
#                 #                  values)
                
#                 mydb.commit() #acu

#         except Exception as e:
#             print(e)
#             mydb.rollback()

#         finally:
#             mydb.close()

# # event = {'body-json': {'version': '1.1', 'input_filename': '1643366101633_D1643366089.645919___testpayment2801.pdf', 'encoding': 'UTF-8', 'language 639.1': '', 'metadata': '', 'normalized_resolution': [2550, 3300], 'key_value_pairs': [{'display_name': 'Document Title', 'data_type': 'str', 'key': 'DocumentTitle_name', 'value': 'TAX INVOICE', 'value_bbox': '(1098.184534907341, 425.5138546228409, 1369.876053929329, 466.5935754776001)', 'prob': '0.994674801826477'}, {'display_name': 'Invoice Number', 'data_type': 'str', 'key': ' Invoice No .:', 'value': '280122', 'value_bbox': '(1269.453451037407, 506.6417768597603, 1400.2277165651321, 537.6752838492393)', 'prob': '1.0'}, {'display_name': 'Invoice Date', 'data_type': 'str', 'key': ' Invoice Date', 'value': '28.01.2022', 'value_bbox': '(1730.8740377426147, 580.868250131607, 1928.5253047943115, 615.0075763463974)', 'prob': '0.9999607801437378'}, {'display_name': 'PO Number', 'data_type': 'str', 'key': ' Ref PO No .:', 'value': '4500020305', 'value_bbox': '(1721.6423392295837, 498.1787145137787, 1953.7656426429749, 535.2844029664993)', 'prob': '0.9999911785125732'}, {'display_name': 'PO Date', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Customer Name', 'data_type': 'str', 'key': '-', 'value': 'PEOL Technologies Pvt . Ltd', 'value_bbox': '(417.8685039281845, 1031.799566745758, 1998.414695262909, 1382.514613866806)', 'prob': '0.9971240162849426'}, {'display_name': 'Vendor Name', 'data_type': 'str', 'key': '-', 'value': 'SAP LABS', 'value_bbox': '(413.2237896323204, 496.0290804505348, 1035.0324511528015, 864.272090792656)', 'prob': '0.9994171857833862'}, {'display_name': 'Vendor Tax ID', 'data_type': 'str', 'key': ' GSTIN :', 'value': '29AAFCS3649P1ZJ', 'value_bbox': '(591.8838769197464, 873.8898038864136, 960.2423965930939, 905.7296633720398)', 'prob': '0.9999998807907104'}, {'display_name': 'Sub Total', 'data_type': 'str', 'key': ' Sub Total', 'value': '35400', 'value_bbox': '(1880.0922274589539, 1994.246131181717, 1984.585440158844, 2023.6678183078766)', 'prob': '0.9999984502792358'}, {'display_name': 'Total Amount', 'data_type': 'str', 'key': ' Grand Total', 'value': '35400', 'value_bbox': '(1875.7192969322205, 2243.595814704895, 1988.130283355713, 2276.569426059723)', 'prob': '0.9999489784240724'}, {'display_name': 'Discount', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'CGST', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'SGST', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'IGST', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'TCS', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Discount', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Taxable Value', 'data_type': 'str', 'key': '-', 'value': '35400', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}], 'line_items': [{'Product Description': 'Gold', 'HSN Code': '', 'Quantity': '10kg', 'Unit of Measure': '', 'Rate': '1000', 'Line Total': '11800', 'VAT Amount': ''}, {'Product Description': 'Silver', 'HSN Code': '', 'Quantity': '10kg', 'Unit of Measure': '', 'Rate': '1000', 'Line Total': '11800', 'VAT Amount': ''}, {'Product Description': 'Brass', 'HSN Code': '', 'Quantity': '10kg', 'Unit of Measure': '', 'Rate': '1000', 'Line Total': '11800', 'VAT Amount': ''}], 'validator_url': 'http://deepcognition.ydns.eu:13202/validate?task_id=1643366101633'}, 'params': {'path': {}, 'querystring': {'task_id': '1643366101633'}, 'header': {'Accept': '*/*', 'Accept-Encoding': 'gzip, deflate', 'Content-type': 'application/json', 'Host': '7firau5x7b.execute-api.eu-central-1.amazonaws.com', 'User-Agent': 'python-requests/2.25.1', 'X-Amzn-Trace-Id': 'Root=1-61f3c6f4-29e7d4aa2214e2c4756cae8c', 'X-Forwarded-For': '69.216.18.116', 'X-Forwarded-Port': '443', 'X-Forwarded-Proto': 'https'}}, 'stage-variables': {'schema': 'einvoice_db_portal', 'lambda_alias': 'dev', 'non_ocr_attachment': 'einvoice-attachments', 'notification_email': 'elipotest@gmail.com', 'ocr_bucket': 'textract-console-ap-southeast-1-b8779ae1-dd77-4d3c-a56d-443a5db', 'oauth_ret': 'https://7firau5x7b.execute-api.eu-central-1.amazonaws.com/einvoice-v1/gmail-s3', 'ocr_bucket_folder': 'old-dev/', 'bucket_gmail_credential': 'file-bucket-emp', 'secreat': 'test/einvoice/secret', 'clientsec_location': 'client_secret.json', 'attach_stage': 'dev'}, 'context': {'account-id': '', 'api-id': '7firau5x7b', 'api-key': '', 'authorizer-principal-id': '', 'caller': '', 'cognito-authentication-provider': '', 'cognito-authentication-type': '', 'cognito-identity-id': '', 'cognito-identity-pool-id': '', 'http-method': 'POST', 'stage': 'einvoice-v1', 'source-ip': '69.216.18.116', 'user': '', 'user-agent': 'python-requests/2.25.1', 'user-arn': '', 'request-id': '9ecf40ad-d3d5-40b7-823f-a23aaf32912a', 'resource-id': '5pzpnl', 'resource-path': '/paper-entry'}}
# # event = {'body-json': {'version': '1.1', 'input_filename': '1643605692480_D1643605687.186461___t8.pdf', 'encoding': 'UTF-8', 'language 639.1': '', 'metadata': '', 'normalized_resolution': [2550, 3300], 'key_value_pairs': [{'display_name': 'Document Title', 'data_type': 'str', 'key': 'DocumentTitle_name', 'value': 'TAX INVOICE', 'value_bbox': '(1095.2661663293839, 430.3769499063492, 1368.4388011693954, 469.5665270090103)', 'prob': '0.9969594478607178'}, {'display_name': 'Invoice Number', 'data_type': 'str', 'key': ' Invoice No .:', 'value': 'INV20 / 40', 'value_bbox': '(1278.6938041448593, 525.2340584993362, 1439.7798031568527, 558.9035779237747)', 'prob': '0.9999996423721312'}, {'display_name': 'Invoice Date', 'data_type': 'str', 'key': ' Invoice Date :', 'value': '23.10.2020', 'value_bbox': '(1743.4711933135986, 613.2200583815575, 1930.9033513069153, 642.1619072556496)', 'prob': '0.9999639987945556'}, {'display_name': 'PO Number', 'data_type': 'str', 'key': ' Ref PO No', 'value': '4500020020', 'value_bbox': '(1723.8024473190308, 521.4528366923332, 1956.989085674286, 553.9488717913628)', 'prob': '0.9999923706054688'}, {'display_name': 'PO Date', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Customer Name', 'data_type': 'str', 'key': '-', 'value': 'PEOL Technologies Pvt . Ltd', 'value_bbox': '(403.74169796705246, 1133.2609176635742, 2001.8021821975708, 1497.599869966507)', 'prob': '0.9967361092567444'}, {'display_name': 'Vendor Name', 'data_type': 'str', 'key': '-', 'value': 'SAP LABS', 'value_bbox': '(413.1036087870598, 507.7669233083725, 1033.6601078510284, 939.3307328224182)', 'prob': '0.99936181306839'}, {'display_name': 'Vendor Tax ID', 'data_type': 'str', 'key': ' GSTIN :', 'value': '29 AAFCS3649P1ZJ', 'value_bbox': '(608.8542580604553, 953.3710420131683, 960.5026245117188, 985.6180608272552)', 'prob': '0.9999998807907104'}, {'display_name': 'Sub Total', 'data_type': 'str', 'key': ' Sub Total', 'value': '35400', 'value_bbox': '(1879.8223614692688, 2178.4395039081573, 1987.5221014022827, 2209.9701583385468)', 'prob': '0.9999984502792358'}, {'display_name': 'Total Amount', 'data_type': 'str', 'key': ' Grand Total', 'value': '35400', 'value_bbox': '(1876.8249213695526, 2456.551158428192, 1989.3322885036469, 2485.94491481781)', 'prob': '0.9999489784240724'}, {'display_name': 'Discount', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'CGST', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'SGST', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'IGST', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'TCS', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Discount', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Taxable Value', 'data_type': 'str', 'key': '-', 'value': '35400', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}], 'line_items': [{'Product Description': 'Gold', 'HSN Code': '', 'Quantity': '9kg', 'Unit of Measure': '', 'Rate': '10009', 'Line Total': '11800', 'VAT Amount': ''}, {'Product Description': 'Silver', 'HSN Code': '', 'Quantity': '10kg', 'Unit of Measure': '', 'Rate': '1000', 'Line Total': '11800', 'VAT Amount': ''}, {'Product Description': 'Brass', 'HSN Code': '', 'Quantity': '10kg', 'Unit of Measure': '', 'Rate': '1000', 'Line Total': '11800', 'VAT Amount': ''}], 'validator_url': 'http://deepcognition.ydns.eu:13202/validate?task_id=1643605692480'}, 'params': {'path': {}, 'querystring': {'task_id': '1643605692480'}, 'header': {'Accept': '*/*', 'Accept-Encoding': 'gzip, deflate', 'Content-type': 'application/json', 'Host': '7firau5x7b.execute-api.eu-central-1.amazonaws.com', 'User-Agent': 'python-requests/2.25.1', 'X-Amzn-Trace-Id': 'Root=1-61f76edd-0b2123e74178879e476ee1ef', 'X-Forwarded-For': '69.216.18.116', 'X-Forwarded-Port': '443', 'X-Forwarded-Proto': 'https'}}, 'stage-variables': {'schema': 'einvoice_db_portal', 'lambda_alias': 'dev', 'non_ocr_attachment': 'einvoice-attachments', 'notification_email': 'elipotest@gmail.com', 'ocr_bucket': 'textract-console-ap-southeast-1-b8779ae1-dd77-4d3c-a56d-443a5db', 'oauth_ret': 'https://7firau5x7b.execute-api.eu-central-1.amazonaws.com/einvoice-v1/gmail-s3', 'ocr_bucket_folder': 'old-dev/', 'bucket_gmail_credential': 'file-bucket-emp', 'secreat': 'test/einvoice/secret', 'clientsec_location': 'client_secret.json', 'attach_stage': 'dev'}, 'context': {'account-id': '', 'api-id': '7firau5x7b', 'api-key': '', 'authorizer-principal-id': '', 'caller': '', 'cognito-authentication-provider': '', 'cognito-authentication-type': '', 'cognito-identity-id': '', 'cognito-identity-pool-id': '', 'http-method': 'POST', 'stage': 'einvoice-v1', 'source-ip': '69.216.18.116', 'user': '', 'user-agent': 'python-requests/2.25.1', 'user-arn': '', 'request-id': '48dd6012-cda0-4fb2-baa5-b766e123c042', 'resource-id': '5pzpnl', 'resource-path': '/paper-entry'}}
# # event = {'body-json': {'version': '1.1', 'input_filename': '1643630580689_I1643630568.583068___t11.pdf', 'encoding': 'UTF-8', 'language 639.1': '', 'metadata': '', 'normalized_resolution': [2550, 3300], 'key_value_pairs': [{'display_name': 'Document Type', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Vendor Name', 'data_type': 'str', 'key': '-', 'value': 'AMWIN SYSTEMS PRIVATE LIMITED', 'value_bbox': '(150.15394315123558, 256.3565120100975, 846.2918758392334, 547.9378134012222)', 'prob': '0.999372661113739'}, {'display_name': 'Vendor Tax ID', 'data_type': 'str', 'key': ' GSTIN / UIN :', 'value': 'UIN : 29AAPCA1129E1ZR', 'value_bbox': '(294.7503827512264, 424.31745529174805, 718.9538776874542, 449.40319061279297)', 'prob': '0.9999359846115112'}, {'display_name': 'Invoice Number', 'data_type': 'str', 'key': ' Invoice No.', 'value': '42212288', 'value_bbox': '(1204.5593351125717, 307.4212498962879, 1372.7051228284836, 340.0199107825756)', 'prob': '1.0'}, {'display_name': 'Invoice Date', 'data_type': 'str', 'key': ' Dated', 'value': '13 - May - 2021', 'value_bbox': '(1714.6869957447052, 306.5836228430271, 1943.4869349002838, 343.60109344124794)', 'prob': '0.999998927116394'}, {'display_name': 'PO Number', 'data_type': 'str', 'key': " Buyer's Order No.", 'value': 'PEOL / PO / 2020-21 / 352', 'value_bbox': '(1208.2355707883835, 607.7844813466072, 1601.2609630823135, 643.21678429842)', 'prob': '0.999997854232788'}, {'display_name': 'Total Amount', 'data_type': 'str', 'key': '-', 'value': '39240.00', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}], 'line_items': [{'Charge Code': '', 'HS Code': '997315', 'Product Description': '', 'Quantity': '3Nos', 'Unit Price': '3,000.00', 'Line Amount': '9,000.00', 'Currency': '', 'VAT Amount': ''}, {'Charge Code': '', 'HS Code': '997315', 'Product Description': '', 'Quantity': '3Nos', 'Unit Price': '3,000.00', 'Line Amount': '9,000.00', 'Currency': '', 'VAT Amount': ''}], 'validator_url': 'http://deepcognition.ydns.eu:13202/validate?task_id=1643630580689'}, 'params': {'path': {}, 'querystring': {'task_id': '1643630580689'}, 'header': {'Accept': '*/*', 'Accept-Encoding': 'gzip, deflate', 'Content-type': 'application/json', 'Host': '7firau5x7b.execute-api.eu-central-1.amazonaws.com', 'User-Agent': 'python-requests/2.25.1', 'X-Amzn-Trace-Id': 'Root=1-61f7d04f-167bc514322244fb3a8d837b', 'X-Forwarded-For': '69.216.18.116', 'X-Forwarded-Port': '443', 'X-Forwarded-Proto': 'https'}}, 'stage-variables': {'schema': 'einvoice_db_portal', 'lambda_alias': 'dev', 'non_ocr_attachment': 'einvoice-attachments', 'notification_email': 'elipotest@gmail.com', 'ocr_bucket': 'textract-console-ap-southeast-1-b8779ae1-dd77-4d3c-a56d-443a5db', 'oauth_ret': 'https://7firau5x7b.execute-api.eu-central-1.amazonaws.com/einvoice-v1/gmail-s3', 'ocr_bucket_folder': 'old-dev/', 'bucket_gmail_credential': 'file-bucket-emp', 'secreat': 'test/einvoice/secret', 'clientsec_location': 'client_secret.json', 'attach_stage': 'dev'}, 'context': {'account-id': '', 'api-id': '7firau5x7b', 'api-key': '', 'authorizer-principal-id': '', 'caller': '', 'cognito-authentication-provider': '', 'cognito-authentication-type': '', 'cognito-identity-id': '', 'cognito-identity-pool-id': '', 'http-method': 'POST', 'stage': 'einvoice-v1', 'source-ip': '69.216.18.116', 'user': '', 'user-agent': 'python-requests/2.25.1', 'user-arn': '', 'request-id': 'aad5e3b8-d646-4d76-b98a-a1cec1b8e0b9', 'resource-id': '5pzpnl', 'resource-path': '/paper-entry'}}
# event = {'body-json': {'version': '1.1', 'input_filename': '1648619293613_ss2.pdf2.pdf', 'encoding': 'UTF-8', 'language 639.1': '', 'metadata': '', 'normalized_resolution': [2550, 3300], 'key_value_pairs': [{'display_name': 'Document Type', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Vendor Name', 'data_type': 'str', 'key': '-', 'value': 'ARABYADS FZ LLC', 'value_bbox': '(1709.5528542995453, 415.59155881404877, 2120.0379073619843, 681.6122531890869)', 'prob': '0.9988859295845032'}, {'display_name': 'Vendor Tax ID', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Invoice Number', 'data_type': 'str', 'key': ' Invoice Number', 'value': 'INV - 1739', 'value_bbox': '(1226.0354161262512, 595.530116558075, 1363.177102804184, 625.3655523061752)', 'prob': '0.9999998807907104'}, {'display_name': 'Invoice Date', 'data_type': 'str', 'key': ' Invoice Date', 'value': '10 Jun 2021', 'value_bbox': '(1227.5852769613266, 463.99478763341904, 1397.5007325410843, 492.83691197633743)', 'prob': '0.999979853630066'}, {'display_name': 'PO Number', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Total Amount', 'data_type': 'str', 'key': ' Invoice Total USD', 'value': '1,536.00', 'value_bbox': '(2145.4070806503296, 1210.6752812862396, 2272.9702949523926, 1243.995863199234)', 'prob': '0.9999498128890992'}], 'line_items': [{'Charge Code': '', 'HS Code': '', 'Product Description': 'Xcite - KSA - CPS - May revenue', 'Quantity': '1.00', 'Unit Price': '88.00', 'Line Amount': '88.00', 'Currency': '', 'VAT Amount': '0.00'}, {'Charge Code': '', 'HS Code': '', 'Product Description': 'Xcite - Kuwait - CPS - May revenue', 'Quantity': '1.00', 'Unit Price': '1,448.00', 'Line Amount': '1,448.00', 'Currency': '', 'VAT Amount': '0.00'}], 'validator_url': 'http://deepcognition.ydns.eu:13202/validate?task_id=1648619293613'}, 'params': {'path': {}, 'querystring': {'task_id': '1648619293613'}, 'header': {'Accept': '*/*', 'Accept-Encoding': 'gzip, deflate', 'Content-type': 'application/json', 'Host': '7firau5x7b.execute-api.eu-central-1.amazonaws.com', 'User-Agent': 'python-requests/2.25.1', 'X-Amzn-Trace-Id': 'Root=1-6243ef52-6900d0f37729c8b93e3c629a', 'X-Forwarded-For': '69.216.18.116', 'X-Forwarded-Port': '443', 'X-Forwarded-Proto': 'https'}}, 'stage-variables': {'schema': 'einvoice_db_portal', 'lambda_alias': 'dev', 'non_ocr_attachment': 'einvoice-attachments', 'notification_email': 'elipotest@gmail.com', 'ocr_bucket': 'textract-console-ap-southeast-1-b8779ae1-dd77-4d3c-a56d-443a5db', 'oauth_ret': 'https://7firau5x7b.execute-api.eu-central-1.amazonaws.com/einvoice-v1/gmail-s3', 'ocr_bucket_folder': 'old-dev/', 'bucket_gmail_credential': 'file-bucket-emp', 'secreat': 'test/einvoice/secret', 'clientsec_location': 'client_secret.json', 'attach_stage': 'dev'}, 'context': {'account-id': '', 'api-id': '7firau5x7b', 'api-key': '', 'authorizer-principal-id': '', 'caller': '', 'cognito-authentication-provider': '', 'cognito-authentication-type': '', 'cognito-identity-id': '', 'cognito-identity-pool-id': '', 'http-method': 'POST', 'stage': 'einvoice-v1', 'source-ip': '69.216.18.116', 'user': '', 'user-agent': 'python-requests/2.25.1', 'user-arn': '', 'request-id': '700edef7-e2b0-418f-8b4a-551bfacf32c3', 'resource-id': '5pzpnl', 'resource-path': '/paper-entry'}}
# event = {'body-json': {'version': '1.1', 'input_filename': '1651119619513_D1651119606.715771___testusinvoice.pdf', 'encoding': 'UTF-8', 'language 639.1': '', 'metadata': '', 'normalized_resolution': [2550, 3300], 'key_value_pairs': [{'display_name': 'Document Title', 'data_type': 'str', 'key': 'DocumentTitle_name', 'value': 'TAX INVOICE', 'value_bbox': '(1091.7107999324799, 426.52585208415985, 1371.2608873844147, 462.01047599315643)', 'prob': '0.9920478463172911'}, {'display_name': 'Invoice Number', 'data_type': 'str', 'key': ' Invoice No .:', 'value': '01280422', 'value_bbox': '(1270.8617895841599, 508.9106574654579, 1439.0079706907272, 535.6902346014977)', 'prob': '1.0'}, {'display_name': 'Invoice Date', 'data_type': 'str', 'key': ' Invoice Date :', 'value': '28-04-2022', 'value_bbox': '(1733.933436870575, 582.9716116189957, 1935.070538520813, 612.4842703342438)', 'prob': '0.9999983310699464'}, {'display_name': 'PO Number', 'data_type': 'str', 'key': ' Ref PO No .:', 'value': '4500020488', 'value_bbox': '(1726.1136174201965, 508.9416369795799, 1928.2530784606934, 534.9322691559792)', 'prob': '0.9999908208847046'}, {'display_name': 'PO Date', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Customer Name', 'data_type': 'str', 'key': '-', 'value': 'PEOL Technologies Pvt . Ltd', 'value_bbox': '(420.0091391801834, 1029.8925071954727, 2002.44380235672, 1386.6169899702072)', 'prob': '0.996918797492981'}, {'display_name': 'Vendor Name', 'data_type': 'str', 'key': '-', 'value': 'C.E.B. New York', 'value_bbox': '(414.50889855623245, 488.64262998104095, 1040.5619502067566, 901.9610792398453)', 'prob': '0.9983652234077454'}, {'display_name': 'Vendor Tax ID', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Sub Total', 'data_type': 'str', 'key': ' Sub Total', 'value': '2000', 'value_bbox': '(1841.6489124298096, 1784.3051433563232, 1929.6275854110718, 1809.7834825515747)', 'prob': '0.9999992847442628'}, {'display_name': 'Total Amount', 'data_type': 'str', 'key': ' Grand Total', 'value': '2000', 'value_bbox': '(1841.7675197124481, 1906.6364586353302, 1930.1285684108734, 1933.800083398819)', 'prob': '0.9999423027038574'}, {'display_name': 'Discount', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'CGST', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'SGST', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'IGST', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'TCS', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Discount', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Taxable Value', 'data_type': 'str', 'key': '-', 'value': '2000', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}], 'line_items': [{'Product Description': '1500-500 ( 10W30 MOTOR OIL QT . )', 'HSN Code': '', 'Quantity': '2 QT', 'Unit of Measure': '', 'Rate': '1000', 'Line Total': '2000', 'VAT Amount': ''}], 'validator_url': 'http://deepcognition.ydns.eu:13202/validate?task_id=1651119619513'}, 'params': {'path': {}, 'querystring': {'task_id': '1651119619513'}, 'header': {'Accept': '*/*', 'Accept-Encoding': 'gzip, deflate', 'Content-type': 'application/json', 'Host': '7firau5x7b.execute-api.eu-central-1.amazonaws.com', 'User-Agent': 'python-requests/2.25.1', 'X-Amzn-Trace-Id': 'Root=1-626a1623-3adad43c4e1032a36a9a6534', 'X-Forwarded-For': '69.216.18.116', 'X-Forwarded-Port': '443', 'X-Forwarded-Proto': 'https'}}, 'stage-variables': {'schema': 'einvoice_db_portal', 'non_ocr_attachment': 'einvoice-attachments', 'lambda_alias': 'dev', 'aws_mail_bucket': 'application-email', 'notification_email': 'elipotest@gmail.com', 'ocr_bucket': 'textract-console-ap-southeast-1-b8779ae1-dd77-4d3c-a56d-443a5db', 'ocr_bucket_folder': 'old-dev/', 'oauth_ret': 'https://7firau5x7b.execute-api.eu-central-1.amazonaws.com/einvoice-v1/gmail-s3', 'bucket_gmail_credential': 'file-bucket-emp', 'clientsec_location': 'client_secret.json', 'secreat': 'test/einvoice/secret', 'attach_stage': 'dev'}, 'context': {'account-id': '', 'api-id': '7firau5x7b', 'api-key': '', 'authorizer-principal-id': '', 'caller': '', 'cognito-authentication-provider': '', 'cognito-authentication-type': '', 'cognito-identity-id': '', 'cognito-identity-pool-id': '', 'http-method': 'POST', 'stage': 'einvoice-v1', 'source-ip': '69.216.18.116', 'user': '', 'user-agent': 'python-requests/2.25.1', 'user-arn': '', 'request-id': '1d1128fb-99f2-4e2f-a0a2-8adb2c27ef00', 'resource-id': '5pzpnl', 'resource-path': '/paper-entry'}}
# event = {'body-json': {'version': '1.1', 'input_filename': '1651119619513_D1651119606.715771___testusinvoice.pdf', 'encoding': 'UTF-8', 'language 639.1': '', 'metadata': '', 'normalized_resolution': [2550, 3300], 'key_value_pairs': [{'display_name': 'Document Title', 'data_type': 'str', 'key': 'DocumentTitle_name', 'value': 'TAX INVOICE', 'value_bbox': '(1091.7107999324799, 426.52585208415985, 1371.2608873844147, 462.01047599315643)', 'prob': '0.9920478463172911'}, {'display_name': 'Invoice Number', 'data_type': 'str', 'key': ' Invoice No .:', 'value': '01280422', 'value_bbox': '(1270.8617895841599, 508.9106574654579, 1439.0079706907272, 535.6902346014977)', 'prob': '1.0'}, {'display_name': 'Invoice Date', 'data_type': 'str', 'key': ' Invoice Date :', 'value': '28-04-2022', 'value_bbox': '(1733.933436870575, 582.9716116189957, 1935.070538520813, 612.4842703342438)', 'prob': '0.9999983310699464'}, {'display_name': 'PO Number', 'data_type': 'str', 'key': ' Ref PO No .:', 'value': '4500020488', 'value_bbox': '(1726.1136174201965, 508.9416369795799, 1928.2530784606934, 534.9322691559792)', 'prob': '0.9999908208847046'}, {'display_name': 'PO Date', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Customer Name', 'data_type': 'str', 'key': '-', 'value': 'PEOL Technologies Pvt . Ltd', 'value_bbox': '(420.0091391801834, 1029.8925071954727, 2002.44380235672, 1386.6169899702072)', 'prob': '0.996918797492981'}, {'display_name': 'Vendor Name', 'data_type': 'str', 'key': '-', 'value': 'C.E.B. New York', 'value_bbox': '(414.50889855623245, 488.64262998104095, 1040.5619502067566, 901.9610792398453)', 'prob': '0.9983652234077454'}, {'display_name': 'Vendor Tax ID', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Sub Total', 'data_type': 'str', 'key': ' Sub Total', 'value': '2000', 'value_bbox': '(1841.6489124298096, 1784.3051433563232, 1929.6275854110718, 1809.7834825515747)', 'prob': '0.9999992847442628'}, {'display_name': 'Total Amount', 'data_type': 'str', 'key': ' Grand Total', 'value': '2000', 'value_bbox': '(1841.7675197124481, 1906.6364586353302, 1930.1285684108734, 1933.800083398819)', 'prob': '0.9999423027038574'}, {'display_name': 'Discount', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'CGST', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'SGST', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'IGST', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'TCS', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Discount', 'data_type': 'str', 'key': '-', 'value': '', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}, {'display_name': 'Taxable Value', 'data_type': 'str', 'key': '-', 'value': '2000', 'value_bbox': '(0,50,120,90)', 'prob': '0.0001'}], 'line_items': [{'Product Description': '1500-500 ( 10W30 MOTOR OIL QT . )', 'HSN Code': '', 'Quantity': '2 QT', 'Unit of Measure': '', 'Rate': '1000', 'Line Total': '2000', 'VAT Amount': ''}], 'validator_url': 'http://deepcognition.ydns.eu:13202/validate?task_id=1651119619513'}, 'params': {'path': {}, 'querystring': {'task_id': '1651119619513'}, 'header': {'Accept': '*/*', 'Accept-Encoding': 'gzip, deflate', 'Content-type': 'application/json', 'Host': '7firau5x7b.execute-api.eu-central-1.amazonaws.com', 'User-Agent': 'python-requests/2.25.1', 'X-Amzn-Trace-Id': 'Root=1-626a1623-3adad43c4e1032a36a9a6534', 'X-Forwarded-For': '69.216.18.116', 'X-Forwarded-Port': '443', 'X-Forwarded-Proto': 'https'}}, 'stage-variables': {'schema': 'einvoice_db_portal', 'non_ocr_attachment': 'einvoice-attachments', 'lambda_alias': 'dev', 'aws_mail_bucket': 'application-email', 'notification_email': 'elipotest@gmail.com', 'ocr_bucket': 'textract-console-ap-southeast-1-b8779ae1-dd77-4d3c-a56d-443a5db', 'ocr_bucket_folder': 'old-dev/', 'oauth_ret': 'https://7firau5x7b.execute-api.eu-central-1.amazonaws.com/einvoice-v1/gmail-s3', 'bucket_gmail_credential': 'file-bucket-emp', 'clientsec_location': 'client_secret.json', 'secreat': 'test/einvoice/secret', 'attach_stage': 'dev'}, 'context': {'account-id': '', 'api-id': '7firau5x7b', 'api-key': '', 'authorizer-principal-id': '', 'caller': '', 'cognito-authentication-provider': '', 'cognito-authentication-type': '', 'cognito-identity-id': '', 'cognito-identity-pool-id': '', 'http-method': 'POST', 'stage': 'einvoice-v1', 'source-ip': '69.216.18.116', 'user': '', 'user-agent': 'python-requests/2.25.1', 'user-arn': '', 'request-id': '1d1128fb-99f2-4e2f-a0a2-8adb2c27ef00', 'resource-id': '5pzpnl', 'resource-path': '/paper-entry'}}

# print(lambda_handler(event,''))

#event not found
def postSapError(event, context):
    global dbScehma 
    dbScehma = 'DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='eu-central-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )

    # secret = event["stage-variables"]["secreat"]

    # resp = client.get_secret_value(
    #     SecretId= secret
    # ) 

    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()

    list_item = []

    try:
        for row in event["body-json"]:
            record = {
                "type": "", 
                "msg": ""
            }
            
            for value in row:
                if value in record:
                    record[value] = row[value]
            list_item.append(record)
            
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            if "invoice_no" in event["params"]["querystring"]:
                invoice_no = str(event["params"]["querystring"]["invoice_no"])
                # print(invoice_no)
                
                error_list = []
                for count, each in enumerate(list_item, 1):
                    if count == 1:
                        mycursor.execute("delete from sap_error_log where invoice_no = ?", invoice_no)
                        
                    error_dict = ( invoice_no, str(count), each["type"], each["msg"] )
                    error_list.append(error_dict)
                
                sqlQuery = "insert into sap_error_log (invoice_no, item, error_type, error_msg) values (?, ?, ?, ?)"
                # print(sqlQuery, error_list)
                mycursor.executemany(sqlQuery, error_list)
            
                mydb.commit()
    
    except Exception as e:  
        mydb.rollback()
        return {
            'statuscode': 500, 
            'body': json.dumps("Internal Failure")
        }
        
    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': json.dumps("Successful!"),
    }

def enable_xray(event):
    if 'Authorization' in event['params']['header'] :
       atoken =  event['params']['header']['Authorization']
    
    if atoken != '':
        flg = requests.get("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/getemail", headers={"Content-Type":"application/json", "Authorization":atoken})

    return json.loads(flg.text)['body']

#event not found
def getReportInvoices(event, context):
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='eu-central-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )

    # secret = event["stage-variables"]["secreat"]

    # resp = client.get_secret_value(
    #     SecretId= secret
    # )  

    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()
    
    records = {}
    # print(event)

    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
            on = mycursor.fetchone()
            if on['value1'] == 'on':
                chk = enable_xray(event)
                if chk['Enable'] == True:
                    patch_all() 	
            
            if "invoice_no" in event["params"]["querystring"]:
                
                items = []
                
                values = (event["params"]["querystring"]["invoice_no"],)
                mycursor.execute("select * from invoice_header where invoice_no = ?", values)
    
                invoice_header = mycursor.fetchone()
                
                records = {
                    
                    "invoice_no" :invoice_header["invoice_no"],
                    "in_status" : invoice_header["in_status"],
                    "ref_po_num" : invoice_header["ref_po_num"],
                    "company_code" : invoice_header["company_code"],
                    "invoice_date" : str(invoice_header["invoice_date"]),
                    "posting_date" : str(invoice_header["posting_date"]),
                    "amount" : invoice_header["amount"],
                    "currency" : invoice_header["currency"],
                    "gl_account" : invoice_header["gl_account"],
                    "business_area" : invoice_header["business_area"],
                    "supplier_id" : invoice_header["supplier_id"],
                    "supplier_name" : invoice_header["supplier_name"],
                    "approver_id" : invoice_header["approver_id"],
                    "approver_comments" : invoice_header["approver_comments"],
                    "items" : items
                }
                
                mycursor.execute("select * from invoice_item where invoice_no = ?", values)
                
                for row in mycursor:
                    record = {
                      "item_no":row["item_no"],
                      "material":row["material"],
                      "quantity":row["quantity"],
                      "amount":row["amount"],
                      "payment_method":row["payment_method"],
                      "tax_amount":row["tax_amount"],
                      "tax_code":row["tax_code"],
                      "ref_po_no":row["ref_po_no"],
                      "plant":row["plant"]
                      }
                    items.append(record)
                    
                records["items"] = items
                
            
            elif "condn" in event["body-json"]:
            
                val_list = []
                pos = 0
                condn = ""
                records = {}
    
                for row in event["body-json"]["condn"]:
                    if pos != 0:
                        condn = condn + " and "
                    elif pos == 0:
                        pos = pos + 1
    
                    if str(row["operator"]) == "like":
                        val_list.append("%" + row["value"] + "%")
                    else:
                        val_list.append(row["value"])
                    
                    condn = condn + row["field"] + " " + str(row["operator"]) + " " + "?"
                    
                sqlQuery = "SELECT invoice_no, in_status, invoice_date, posting_date, supplier_name, " \
                            "ref_po_num, amount FROM invoice_header" \
                            " where " + condn
        
                values = tuple(val_list,)
                # print(condn)
        
                mycursor.execute(sqlQuery, values)
        
                invoices = []
                invoice_files = [{"file_name":"dumb"}]
        
                for row in mycursor:
                    record = {
                          "invoice_no":row["invoice_no"],
                          "in_status":row["in_status"],
                          "invoice_date":str(row["invoice_date"]),
                          "due_date":str(row["posting_date"]),
                          "supplier_name":row["supplier_name"],
                          "ref_po_num": row["ref_po_num"],
                          "amount":row["amount"],
                          'invoice_files' : invoice_files
                    }
                    invoices.append(record)
                        
                records["invoices"] = invoices
            
            else:
                
                invoices = []
                invoice_files = [{"file_name":"dumb"}]
                
                records = {}
                # mycursor.execute("select * from invoice_header where date(invoice_date) > date(now() - interval 7 day)")
                
                mycursor.execute("select invoice_no, in_status, invoice_date, posting_date, supplier_name,"
                " ref_po_num, amount FROM invoice_header where date(invoice_date) > date(now() - interval 7 day)")
                     
                invoices = []
                    
                for row in mycursor:
                    record = {
                          "invoice_no":row["invoice_no"],
                          "in_status":row["in_status"],
                          "invoice_date":str(row["invoice_date"]),
                          "due_date":str(row["posting_date"]),
                          "supplier_name":row["supplier_name"],
                          "ref_po_num": row["ref_po_num"],
                          "amount":row["amount"],
                          'invoice_files' : invoice_files
                    }
                    invoices.append(record)
                records["invoices"] = invoices
                     
                
    except:
        return {
        'statuscode': 500,
        'body': json.dumps("error occured while fetching") 
    }
            
    finally:
        mydb.close()
        
    # if not records["invoice_no"]:
    #     return {
    #         'statuscode': 200,
    #         'body': json.dumps("no matching records check key")
    #     }
    return {
        'statuscode': 200,
        'body': records
    }

def enable_xray(event):
    if 'Authorization' in event['params']['header'] :
       atoken =  event['params']['header']['Authorization']
    
    if atoken != '':
        flg = requests.get("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/getemail", headers={"Content-Type":"application/json", "Authorization":atoken})

    return json.loads(flg.text)['body']

# def getReportInvoices(event, context):
#     global dbScehma 
#     dbScehma = event["stage-variables"]["schema"]
    
#     client = boto3.client(
#     'secretsmanager',
#     region_name='eu-central-1',
#     aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
#     aws_secret_access_key='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' )

#     secret = event["stage-variables"]["secreat"]

#     resp = client.get_secret_value(
#         SecretId= secret
#     )  

#     secretDict = json.loads(resp['SecretString'])

#     mydb = pymysql.connect(
#         host=secretDict['host'],
#         user=secretDict['username'],
#         passwd=secretDict['password'],
#         database=secretDict['dbname'],
#         charset='utf8mb4',
#         cursorclass=pymysql.cursors.DictCursor
#     )
    
#     records = {}
#     # print(event)

#     try:
#         with mydb.cursor() as mycursor:
#             defSchemaQuery = "use " + dbScehma
#             mycursor.execute(defSchemaQuery)
            
#             mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
#             on = mycursor.fetchone()
#             if on['value1'] == 'on':
#                 chk = enable_xray(event)
#                 if chk['Enable'] == True:
#                     patch_all() 	
            
#             if "invoice_no" in event["params"]["querystring"]:
                
#                 items = []
                
#                 values = (event["params"]["querystring"]["invoice_no"],)
#                 mycursor.execute("select * from invoice_header where invoice_no = ?", values)
    
#                 invoice_header = mycursor.fetchone()
                
#                 records = {
                    
#                     "invoice_no" :invoice_header["invoice_no"],
#                     "in_status" : invoice_header["in_status"],
#                     "ref_po_num" : invoice_header["ref_po_num"],
#                     "company_code" : invoice_header["company_code"],
#                     "invoice_date" : str(invoice_header["invoice_date"]),
#                     "posting_date" : str(invoice_header["posting_date"]),
#                     "amount" : invoice_header["amount"],
#                     "currency" : invoice_header["currency"],
#                     "gl_account" : invoice_header["gl_account"],
#                     "business_area" : invoice_header["business_area"],
#                     "supplier_id" : invoice_header["supplier_id"],
#                     "supplier_name" : invoice_header["supplier_name"],
#                     "approver_id" : invoice_header["approver_id"],
#                     "approver_comments" : invoice_header["approver_comments"],
#                     "items" : items
#                 }
                
#                 mycursor.execute("select * from invoice_item where invoice_no = ?", values)
                
#                 for row in mycursor:
#                     record = {
#                       "item_no":row["item_no"],
#                       "material":row["material"],
#                       "quantity":row["quantity"],
#                       "amount":row["amount"],
#                       "payment_method":row["payment_method"],
#                       "tax_amount":row["tax_amount"],
#                       "tax_code":row["tax_code"],
#                       "ref_po_no":row["ref_po_no"],
#                       "plant":row["plant"]
#                       }
#                     items.append(record)
                    
#                 records["items"] = items
                
            
#             elif "condn" in event["body-json"]:
            
#                 val_list = []
#                 pos = 0
#                 condn = ""
#                 records = {}
    
#                 for row in event["body-json"]["condn"]:
#                     if pos != 0:
#                         condn = condn + " and "
#                     elif pos == 0:
#                         pos = pos + 1
    
#                     if str(row["operator"]) == "like":
#                         val_list.append("%" + row["value"] + "%")
#                     else:
#                         val_list.append(row["value"])
                    
#                     condn = condn + row["field"] + " " + str(row["operator"]) + " " + "?"
                    
#                 sqlQuery = "SELECT invoice_no, in_status, invoice_date, posting_date, supplier_name, " \
#                             "ref_po_num, amount FROM invoice_header" \
#                             " where " + condn
        
#                 values = tuple(val_list,)
#                 # print(condn)
        
#                 mycursor.execute(sqlQuery, values)
        
#                 invoices = []
#                 invoice_files = [{"file_name":"dumb"}]
        
#                 for row in mycursor:
#                     record = {
#                           "invoice_no":row["invoice_no"],
#                           "in_status":row["in_status"],
#                           "invoice_date":str(row["invoice_date"]),
#                           "due_date":str(row["posting_date"]),
#                           "supplier_name":row["supplier_name"],
#                           "ref_po_num": row["ref_po_num"],
#                           "amount":row["amount"],
#                           'invoice_files' : invoice_files
#                     }
#                     invoices.append(record)
                        
#                 records["invoices"] = invoices
            
#             else:
                
#                 invoices = []
#                 invoice_files = [{"file_name":"dumb"}]
                
#                 records = {}
#                 # mycursor.execute("select * from invoice_header where date(invoice_date) > date(now() - interval 7 day)")
                
#                 mycursor.execute("select invoice_no, in_status, invoice_date, posting_date, supplier_name,"
#                 " ref_po_num, amount FROM invoice_header where date(invoice_date) > date(now() - interval 7 day)")
                     
#                 invoices = []
                    
#                 for row in mycursor:
#                     record = {
#                           "invoice_no":row["invoice_no"],
#                           "in_status":row["in_status"],
#                           "invoice_date":str(row["invoice_date"]),
#                           "due_date":str(row["posting_date"]),
#                           "supplier_name":row["supplier_name"],
#                           "ref_po_num": row["ref_po_num"],
#                           "amount":row["amount"],
#                           'invoice_files' : invoice_files
#                     }
#                     invoices.append(record)
#                 records["invoices"] = invoices
                     
                
#     except:
#         return {
#         'statuscode': 500,
#         'body': json.dumps("error occured while fetching") 
#     }
            
#     finally:
#         mydb.close()
        
#     # if not records["invoice_no"]:
#     #     return {
#     #         'statuscode': 200,
#     #         'body': json.dumps("no matching records check key")
#     #     }
#     return {
#         'statuscode': 200,
#         'body': records
#     }





#     if 'Authorization' in event['params']['header'] :
#        atoken =  event['params']['header']['Authorization']
    
#     if atoken != '':
#         flg = requests.get("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/getemail", headers={"Content-Type":"application/json", "Authorization":atoken})

#     return json.loads(flg.text)['body']

#event not found
def getSearchDetailsSup(event, context):
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='eu-central-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )

    # secret = event["stage-variables"]["secreat"]

    # resp = client.get_secret_value(
    #     SecretId= secret
    # )  

    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()

    records = {}

    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
            on = mycursor.fetchone()
            on = convertValuesTodict(mycursor.description, on)
            for row in on:
                if row['value1'] == 'on':
                    chk = enable_xray(event)
                    if chk['Enable'] == True:
                        patch_all() 
                        print(event)

            srch_field = []
            
            sqlQuery = "select s.operator, s.ui_element, s.search_id, s.is_multivalued, " \
            " s.help_required, d.value2 from serach_options s inner join" \
            " dropdown d on s.operator = d.value1 where s.search_field = ? and d.drop_key = 'operators'"
                
            values = (event["params"]["querystring"]["search_field"],)

            mycursor.execute(sqlQuery, values)
                    
            for row in mycursor:
                record = {
                    # 'search_field': row["search_field"],
                    'operator': row["operator"],
                    'operator_name' : row["value2"],
                    'ui_element': row["ui_element"],
                    'search_id': row["search_id"],
                    'is_multivalued': row["is_multivalued"],
                    'help_required': row["help_required"]
                }
                srch_field.append(record)

            records["srch_field"] = srch_field
            
    except:
        return {
        'statuscode': 500,
        'body': json.dumps("Internal Failure!") 
    }
                    
    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': records,
    }

def enable_xray(event):
    if 'Authorization' in event['params']['header'] :
       atoken =  event['params']['header']['Authorization']
    
    if atoken != '':
        flg = requests.get("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/getemail", headers={"Content-Type":"application/json", "Authorization":atoken})

    return json.loads(flg.text)['body']

#columns not yet converted
def getSearchHelp(event, context):
    print(event)
    global dbScehma 
    dbScehma = ' DBADMIN '

    # client = boto3.client(
    # 'secretsmanager',
    # region_name='eu-central-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )

    # secret = event["stage-variables"]["secreat"]

    # resp = client.get_secret_value(
    #     SecretId= secret
    # ) 

    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()

    records = {}
    
    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
            on = mycursor.fetchone()
            on = convertValuesTodict(mycursor.description,on)
            on = on[0]
            if on['value1'] == 'on':
                chk = enable_xray(event)
                if chk['Enable'] == True:
                    patch_all() 
                    print(event)
            
            search_help = []
            
            if "master_id" in event["params"]["querystring"] and "description" in event["params"]["querystring"]:
                
                sqlQuery = "select code, master_name, description from master where master_id = ? and description like ?"
                temp = event["params"]["querystring"]["description"] + "%%"
                values = (event["params"]["querystring"]["master_id"], temp)
                mycursor.execute(sqlQuery, values)
                
                for row in mycursor:
                    record = {
                        'code': row['code'],
                        'master_name': row['master_name'], 
                        'description': row['description']
                    }
                    search_help.append(record)
                records['search_help'] = search_help 
                
            elif "master_id" in event["params"]["querystring"] and event["params"]["querystring"]["master_id"] == "8":
                        
                mycursor.execute("select * from material_master")
                        
                for row in mycursor:
                    record = {
                        "master_id" : event["params"]["querystring"]["master_id"],
                        "material_no" : row["material_no"], 
                        "material_name" : row["material_name"], 
                        "gst_per" : row["gst_per"], 
                        "unit_price" : row["unit_price"], 
                        "gl_account" : row["gl_account"]
                    }
                    search_help.append(record)
                records['search_help'] = search_help
                
            elif "master_id" in event["params"]["querystring"] and "country" in event["params"]["querystring"]:
                
                sqlQuery = "select code, master_name, description from master where master_id = ? and tax_treatement = ?"
                values = (event["params"]["querystring"]["master_id"],event["params"]["querystring"]["country"])
                mycursor.execute(sqlQuery, values)
                
                for row in mycursor:
                    record = {
                        'code': row['code'],
                        'master_name': row['master_name'], 
                        'description': row['description']
                    }
                    search_help.append(record)
                records['search_help'] = search_help 
                
            elif "master_id" in event["params"]["querystring"] :
                
                sqlQuery = "select code, master_name, description from master where master_id = ? "
                values = (event["params"]["querystring"]["master_id"])
                mycursor.execute(sqlQuery, values)
                
                for row in mycursor:
                    record = {
                        'code': row['code'],
                        'master_name': row['master_name'], 
                        'description': row['description']
                    }
                    search_help.append(record)
                records['search_help'] = search_help 
    
    except:
        return {
        'statuscode': 500,
        'body': json.dumps("Internal Failure!") 
    }
    
    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': records
    }


    if 'Authorization' in event['params']['header'] :
       atoken =  event['params']['header']['Authorization']
    
    if atoken != '':
        flg = requests.get("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/getemail", headers={"Content-Type":"application/json", "Authorization":atoken})

    return json.loads(flg.text)['body']

# sql statements working fine
def getReportSearchHelp(event, context):
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='eu-central-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )

    # secret = event["stage-variables"]["secreat"]

    # resp = client.get_secret_value(
    #     SecretId= secret
    # )  

    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()

    records = {}
    print(event)
    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
            on = mycursor.fetchone()
            on = convertValuesTodict(mycursor.description, on)
            on = on[0]
            if on['value1'] == 'on':
                chk = enable_xray(event)
                if chk['Enable'] == True:
                    patch_all() 
                    print(event)
            
            search_help = []
            
            if "col_name" in event["params"]["querystring"]:
                colName = event["params"]["querystring"]["col_name"]
                mycursor.execute("select * from dropdown where drop_key = ?", colName)
                
                for row in mycursor:
                    record = {
                        'master_name': colName, 
                        'code': row['value1'],
                        'description': row['value2'] 
                    }
                    search_help.append(record)
                records['search_help'] = search_help   
            
            if "in_status" in event["params"]["querystring"]:
                mycursor.execute("select * from dropdown where drop_key = 'document_status' ")
                
                for row in mycursor:
                    record = {
                        'master_name': "Document Status", 
                        'code': row['value1'],
                        'description': row['value2'] 
                    }
                    search_help.append(record)
                records['search_help'] = search_help 
                
            if "payment_terms" in event["params"]["querystring"]:
                mycursor.execute("select * from dropdown where drop_key = 'payment_term' ")
                
                for row in mycursor:
                    record = {
                        'master_name': "Payment Terms", 
                        'code': row['value1'],
                        'description': row['value2'] 
                    }
                    search_help.append(record)
                records['search_help'] = search_help 
                
            if "roles" in event["params"]["querystring"]:
                mycursor.execute("select * from dropdown where drop_key = 'user_type' and value1 not in ('admin', 'superadmin','NULL', 'sup')")
                
                for row in mycursor:
                    record = {
                        'master_name': "Roles", 
                        'code': row['value1'],
                        'description': row['value2'] 
                    }
                    search_help.append(record)
                records['search_help'] = search_help 
                
            if "po_type" in event["params"]["querystring"]:
                mycursor.execute("select * from dropdown where drop_key = 'po_type' ")
                
                for row in mycursor:
                    record = {
                        'master_name': "PO Type", 
                        'code': row['value1'],
                        'description': row['value2'] 
                    }
                    search_help.append(record)
                records['search_help'] = search_help
                
            if "department" in event["params"]["querystring"]:
                mycursor.execute("select department_id, department_name from departmental_budget_master")
                
                for row in mycursor:
                    record = {
                        'master_name': "Department", 
                        'code': row['department_id'],
                        'description': row['department_name'] 
                    }
                    search_help.append(record)
                records['search_help'] = search_help
                
            if "document_type" in event["params"]["querystring"]:
                mycursor.execute("select * from dropdown where drop_key = 'document_type' order by value2 desc")
                
                for row in mycursor:
                    record = {
                        'master_name': "Document Type", 
                        'code': row['value1'],
                        'description': row['value2'] 
                    }
                    search_help.append(record)
                records['search_help'] = search_help
                
    except:
        return {
        'statuscode': 500,
        'body': json.dumps("Internal Failure!") 
    }
    
    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': records
    }

def enable_xray(event):
    if 'Authorization' in event['params']['header'] :
       atoken =  event['params']['header']['Authorization']
    
    if atoken != '':
        flg = requests.get("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/getemail", headers={"Content-Type":"application/json", "Authorization":atoken})

    return json.loads(flg.text)['body']

#event not found
def getVendorSearchHelp(event, context):
    global dbScehma 
    dbScehma = ' DBADMIN '
    # TODO implement
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='eu-central-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )

    # secret = event["stage-variables"]["secreat"]

    # resp = client.get_secret_value(
    #     SecretId= secret
    # ) 

    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()

    records = {}
    
    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
            on = mycursor.fetchone()
            on = convertValuesTodict(mycursor.description, on)
            for row in on:
                if row['value1'] == 'on':
                    chk = enable_xray(event)
                    if chk['Enable'] == True:
                        patch_all() 
                        print(event)
            
            mycursor.execute("SELECT vendor_no, vendor_name FROM vendor_master")
            
            search_help = []
            for vendor in mycursor:
                record = {
                    "code" : vendor["vendor_no"],
                    "description" : vendor["vendor_name"]
                }
                search_help.append(record)
                
            records["search_help"] = search_help
            
    except :
        
        return {
            'statusCode': 500,
            'body': json.dumps("Internal Failure")
        }
            
    finally:
        mydb.close()
        
    return {
        'statusCode': 200,
        'body': records
    }
    if 'Authorization' in event['params']['header'] :
       atoken =  event['params']['header']['Authorization']
    
    if atoken != '':
        flg = requests.get("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/getemail", headers={"Content-Type":"application/json", "Authorization":atoken})

    return json.loads(flg.text)['body']

# class FailedToCreateApprocalsException(Exception):
#     """"""

# def notify_approvers(members, body):
#     pass

# class ApprovalException(Exception):
#     pass

# def get_stored_credentials(user_id):
#     try:
#         s3 = boto3.client("s3")
#         encoded_file = s3.get_object(Bucket=elipo_cred, Key=user_id)   
#         creds = pickle.loads(encoded_file["Body"].read())
#         return creds
#     except Exception as excep:
#         creds = None

# def create_message(sender, to, cc, subject, message_text):
#     message = email.mime.text.MIMEText(message_text, 'html')
#     message['to'] = to
#     message['cc'] = cc
#     message['from'] = sender
#     message['subject'] = subject
#     encoded = base64.urlsafe_b64encode(message.as_string().encode("utf-8"))
#     return {'raw': encoded.decode("utf-8")}

# def send_message(service, user_id, message):
#     try:
#         message = (service.users().messages().send(userId=user_id, body=message).execute())
#         return message
#     except Exception as error:
#         print("An error occurred: ", error)

# def build_service(credentials):
#     http = httplib2.Http()
#     http = credentials.authorize(http)
#     return build('gmail', 'v1', http=http)

# def sendMailNotifications(invoice_id, mycursor, emails):
    
#     user_id = elipo_email
#     credentials = get_stored_credentials(user_id)

#     if credentials and credentials.refresh_token is not None:
#         service = build_service(credentials=credentials)

#         mycursor.execute("select * from rule_notification where invoice_status = 'sup-sendto-customer'")
#         notification = mycursor.fetchone()

#         mail_cc = ''
#         mail_subject = 'ELIPO Notification'
#         mail_body = ''

#         if notification:
#             if notification['subject']:
#                 mail_subject = notification['subject']
#             if notification['mail_cc']:
#                 mail_cc = notification['mail_cc']
#             if notification['body']:
#                 mail_body = notification['body']

#         body = '''<a href="https://ywi7o0pxhc.execute-api.eu-central-1.amazonaws.com/production/landing/invoice/my-inbox">My Inbox</a> '''

#         message_body = '''<html>
#             <body  >
#                 <div style=" width:30%;">
#                         <div style=" width:100%; align-content: center;text-align: center;">
#                             <img src="https://einvoice-public-images.s3.ap-south-1.amazonaws.com/ELIPO+logo.png" alt="Italian Trulli" style="vertical-align:middle; width: 140px;height:50px;text-align: center;"  >
#                         </div>
#                 	<div style=" width:100%; align-content:left;text-align:left;">
#                             <hr style="width:100%; text-align: center; border: 2px solid #0000001A;opacity: 0.5; border-radius: 2px;" >
#                         </div>
#                     <b>

#                     <span style="vertical-align: middle;text-align: left;font: 600 bold 16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;" >
#                         Dear User,  
#                     </span> 
#                     <br>            
#                     <br> {}
#                     <br>
#                     <span style="vertical-align: middle;text-align: left;font: 600 bold 16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;" >
#                         Invoice No: <span style="vertical-align: middle;text-align: left;font: 500  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;">{},</span>
#                     </span>
#                     </b> 
#                     <br>
#                     <br>
#                     <div style=" width:100%;align-content: center;text-align: center;">
#                         <a href="https://ywi7o0pxhc.execute-api.eu-central-1.amazonaws.com/production/login" target="_blank">
#                             <button style="border: none; background:rgb(80, 219, 212) 0% 0% no-repeat padding-box; border-radius: 7px;opacity: 1;width:180px; height: 35px;outline: none;border: none;" > 
#                                 <span style="vertical-align: middle; text-align: left;font: 600 bold 16px/23px Open Sans;letter-spacing: 0px;color: whitesmoke;white-space: nowrap;opacity: 1;">Login to ELIPO</span>
#                             </button>
#                         </a>
#                     </div>

#                     <br><br>
#                     <div style="width:100%;"> 
#                     <span style="vertical-align: middle; text-align: left;font: 500  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;">Regards,</span>
#                     <br>
#                     <span style="vertical-align: middle;text-align: left;font: 500  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;">Team ELIPO</span>
#                     </div>
#                 <div style=" width:100%; align-content:left;text-align:left;">
#                             <hr style="width:100%; text-align: center; border: 2px solid #0000001A;opacity: 0.5; border-radius: 2px;" >
#                         </div>


#                     <div style="width:100%;align-content: center;text-align: center;">
#                         <span style=" text-align: center;font: 600 bold 16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 0.7;">This message was sent to you by ELIPO</span>
#                     </div>
#                     <div style="width:100%;align-content: center;text-align: center;">
#                         <img src="https://einvoice-public-images.s3.ap-south-1.amazonaws.com/elipo+logo_2.png" alt="Italian Trulli" style="text-align: center;width: 90px;height: 50px;" >
#                     </div>

#                     <br>
#                 </div>
#             </body></html>'''.format(mail_body, invoice_id)

#         message = create_message(sender=user_id, to=emails, cc=mail_cc, subject=mail_subject, message_text=message_body)
#         send_message(service=service, user_id="me", message=message)


# def fetchSAP_PoDetails(poNumber):
#     s = requests.Session()
#     s.headers.update({'Connection': 'keep-alive'})

#     url = "http://182.72.219.94:8000/zgetpo/GetPo"
#     params = {'sap-client': '800'}

#     headersFetch = {'X-CSRF-TOKEN': 'Fetch'}
#     y = s.get(url, auth=HTTPBasicAuth('developer31', 'peol@123'), headers=headersFetch, params=params)
#     token = y.headers["X-CSRF-TOKEN"]

#     headers = {"X-CSRF-TOKEN": token, 'Content-type': 'application/json'}
#     records = {
#         "ebeln": poNumber
#     }

#     x = s.post(url, json=records, auth=HTTPBasicAuth('developer31', 'peol@123'), headers=headers, params=params)

#     payload = x.json()

#     item_category = []
#     for each in payload[0]['POITEM']:
#         item_category.append(each['ITEM_CAT'])

#     return item_category


def assign_approcessor(mycursor, invoice_id, decider):

    email_str = ''      

    try:
        mycursor.execute("select * from elipo_setting where key_name = 'app_assignment'")
        setting = mycursor.fetchone()
        print(setting)

        if setting["value1"] == 'on':
            mycursor.execute("SELECT a.* FROM rule a inner join rule_snro b"
                             " on a.rule_id = b.rule_id "
                             "where b.is_approval = 'n' and a.is_on = 'y'")
            all_rules = mycursor.fetchall()

            rule_ids = []
            email_str = ''

            if all_rules:
                rule_ids = [sub['rule_id'] for sub in all_rules]
                rule_ids = set(rule_ids)
                rule_ids = list(rule_ids)

                rule = []
                rules = {}

                for ruleId in rule_ids:
                    rules[ruleId] = []

                default = None

                for row in all_rules:
                    if row['decider'] == 'default_assignment':
                        default = row
                    else:
                        rules[row['rule_id']].append(row)

                if default:
                    rule_ids.remove(default['rule_id'])
                    del rules[default['rule_id']]

            if rule_ids:
                for eachRule in rules:

                    countMatches = 0
                    noOfCondn = len(rules[eachRule])

                    for row in rules[eachRule]:

                        if row['decider_type'] == "number":

                            if row['decider'] == "invoice_value":
                                d_value = float(decider[row['decider']])
                            else:
                                d_value = int(decider[row['decider']])

                            if row['operator'] == "=" and d_value == int(row['d_value']):
                                countMatches += 1
                            elif row['operator'] == ">" and d_value > int(row['d_value']):
                                countMatches += 1
                            elif row['operator'] == "<" and d_value < int(row['d_value']):
                                countMatches += 1
                            elif row['operator'] == "between" and int(row['d_value']) <= d_value <= int(
                                    row['d_value2']):
                                countMatches += 1

                        elif row['decider_type'] == "string":
                            if row["decider"] == "invoice_type":
                                for each in decider["invoice_type"]:
                                    if each == str(row['d_value']):
                                        countMatches += 1
                                        break

                            elif decider[row['decider']] == str(row['d_value']):
                                countMatches += 1

                    if noOfCondn == countMatches:
                        rule.append(row)

            if not rule and default:
                rule.append(default)

            if rule:

                values = [sub['rule_id'] for sub in rule]
                values = set(values)
                values = list(values)

                format_strings = ','.join(['?'] * len(values))

                sqlQuery = "select isgroup, approver from rule_approver where rule_key in (%s) " % format_strings
                mycursor.execute(sqlQuery, tuple(values))
                all_app = mycursor.fetchall()

                all_approvers = [dict(t) for t in {tuple(d.items()) for d in all_app}]

                groups = []
                members = []
                values = []

                for row in all_approvers:
                    value = (row['isgroup'], row['approver'], invoice_id)
                    values.append(value)

                    if row['isgroup'] == 'y':
                        groups.append(row['approver'])
                    else:
                        members.append(row['approver'])

                format_strings_grp = ','.join(['%s'] * len(groups)) 
                format_strings_mem = ','.join(['%s'] * len(members))
                emails = None

                audit_trail = 'Invoice No ' + str(invoice_id) + ' assigned to '
                trail_grp = ''

            else:
                groups = []
                print("dbScehma", dbScehma)
                mycursor.execute("select group_id from " + dbScehma + ".group where name = 'Shared Service User'")
                grp_det = mycursor.fetchone()

                if grp_det:
                    groups.append(grp_det["group_id"])

            if members and groups:
                mix = members + groups
                mycursor.execute(
                    "select concat(fs_name, ' ', ls_name) as name, email, group_id from member "
                    "where member_id in ({}) or group_id in ({})".format(format_strings_mem, format_strings_grp),
                    tuple(mix))
                emails = mycursor.fetchall()
                
                print("dbScehma", dbScehma)
                mycursor.execute("select group_id, name from " + dbScehma + ".group where group_id in ({})".format(
                    format_strings_grp), tuple(groups))
                grp_details = mycursor.fetchall()

                if grp_details:
                    for each in grp_details:
                        if not trail_grp:
                            trail_grp += each['name']

                        else:
                            trail_grp += ', ' + each['name']

            elif groups:
                mycursor.execute(
                    "select concat(fs_name, ' ', ls_name) as name, email, group_id from member "
                    "where group_id in ({})".format(format_strings_grp), tuple(groups))
                emails = mycursor.fetchall()

                print("dbScehma", dbScehma)
                mycursor.execute("select group_id, name from " + dbScehma + ".group where group_id in ({})".format(
                    format_strings_grp), tuple(groups))
                grp_details = mycursor.fetchall()

                if grp_details:
                    for each in grp_details:
                        if not trail_grp:
                            trail_grp += each['name']
                        else:
                            trail_grp += ', ' + each['name']

            else:
                mycursor.execute(
                    "select concat(fs_name, ' ', ls_name) as name, email, group_id from member "
                    "where member_id in ({})".format(format_strings_mem), tuple(members))
                emails = mycursor.fetchall()

            if emails:
                for each in emails:
                    if not email_str:
                        email_str = each['email']

                    else:
                        email_str += ',' + each['email']

                    if not each['group_id'] in groups:
                        if not trail_grp:
                            trail_grp += each['name']

                        else:
                            trail_grp += ', ' + each['name']

                audit_trail += trail_grp

            if values:
                mycursor.executemany(
                    "INSERT INTO assignment (isgroup, app, invoice_no) VALUES (%s, %s, %s)", values)
                    
                print(values, "assignment")

                values = (invoice_id, '', 'new', audit_trail)
                sqlQuery = "insert into invoice_audit (invoice_no, prev_status, new_status, msg) values (%s, %s, %s, %s)"
                mycursor.execute(sqlQuery, values)

                return True, email_str

            else:
                return False, email_str

        else:
            print("else")
            values = ("y", 6, invoice_id)
            mycursor.execute(
                "INSERT INTO assignment (isgroup, app, invoice_no) VALUES (?, ?, ?)", values)

            mycursor.execute(
                "select concat(fs_name, ' ', ls_name) as name, email, group_id from member "
                "where group_id = '6'")
            emails = mycursor.fetchall()

            if emails:
                for each in emails:
                    if email_str:
                        email_str += "," + each['email']
                    else:
                        email_str = each['email']
            print(email_str)
            return False, email_str

    except Exception as e:
        print(e)
        pass

    finally:
        pass

#statements were working fine but coulmns names are not yet converted to uppercase
def postInvoiceDetailsSup(event, context):
    
    # print(event)     
    
    global dbScehma 
    dbScehma = ' DBADMIN '
 
    global elipo_email
    elipo_email = event["stage-variables"]["notification_email"]
    
    global elipo_cred
    elipo_cred = event["stage-variables"]['bucket_gmail_credential']
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='eu-central-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )
    # secret = event["stage-variables"]["secreat"]
    # resp = client.get_secret_value(
    #     SecretId=secret
    # )
    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()

    header = {
        "user_invoice_id": "",
        "sup_status": "",
        "ref_po_num": "",
        "posting_date": "",
        "invoice_date": "",
        "baseline_date": "",
        "amount": "",
        "payment_method": "",
        "currency": "",
        "taxable_amount": "",
        "discount_per": "",
        "total_discount_amount": "",
        "is_igst": "",
        "tax_per": "",
        "cgst_tot_amt": "",
        "sgst_tot_amt": "",
        "igst_tot_amt": "",
        "tds_per": "",
        "tds_tot_amt": "",
        "payment_terms": "",
        "adjustment": "",
        "tcs": 0,
        "approver_comments": "",
        "working_person": "",
        "supplier_name": "",
        "npo": "",
        "document_type": "",
        "gstin": "",
        "irn": ""
    }

    list_item = []
    response = {}
    msg = "Provide invoice status!"
    tb_data = {}
    values = {}

    try:
        print(event)
        for value in event["body-json"]["header"]:
            if value in header:
                header[value] = event["body-json"]["header"][value]

        for row in event["body-json"]["item"]:
            item = {
                "invoice_no": "",
                "item_no": "",
                "hsn_code": "",
                "material": "",
                "material_desc": "",
                "quantity": "",
                "unit": "",
                "currency": "",
                "amt_per_unit": "",
                "cgst_per": "",
                "cgst_amount": "",
                "tax_code": "",
                "plant": "",
                "discount": "",
                "discount_amount": "",
                "gross_amount": 0,
                "sgst_per": "",
                "sgst_amount": "",
                "igst_per": "",
                "igst_amount": "",
                "taxable_amount": "",
                "tax_value_amount": "",
                "gl_account": "",
                "gst_per": ""
            }
            for value in row:
                if value in item:
                    item[value] = row[value]
            list_item.append(item)
            
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
            on = mycursor.fetchone()
            if on['value1'] == 'on':
                chk = enable_xray(event)
                if chk['Enable'] == True:
                    patch_all() 
                    print(event)
            
            if header["sup_status"] == "inapproval" or header["sup_status"] == "draft":

                if "invoice_no" not in event["params"]["querystring"]:

                    if header["sup_status"] == "inapproval":

                        user_id = event["params"]["querystring"]["userid"]
                        in_status = "new"

                        vendor = ""

                        mycursor.execute("select a.fs_name, a.ls_name, b.vendor_no, b.currency, b.gst_treatment " \
                            "from member a " \
                            "left join vendor_master b " \
                            "on a.member_id = b.member_id " \
                            "where a.email = ?", user_id)
                        member = mycursor.fetchone()

                        if member:
                            vendor = member['vendor_no']
                            header["working_person"] = member['fs_name'] + " " + member['ls_name']

                        sqlQuery = "INSERT INTO invoice_header (user_invoice_id, in_status, sup_status, ref_po_num, invoice_date," \
                                   "baseline_date, posting_date, amount, payment_method, currency, taxable_amount, discount_per, total_discount_amount, is_igst, tax_per, " \
                                   "cgst_tot_amt, sgst_tot_amt, igst_tot_amt, tds_per, tds_tot_amt, payment_terms, adjustment, tcs, supplier_comments, supplier_id, " \
                                   "from_supplier, working_person, supplier_name, npo, document_type, gstin, irn) " \
                                   "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"

                        values = (header["user_invoice_id"], in_status, header["sup_status"], header["ref_po_num"], header["invoice_date"], \
                                  header["baseline_date"], header["posting_date"], header["amount"], header["payment_method"], header["currency"], header["taxable_amount"], \
                                  header["discount_per"], header["total_discount_amount"], header["is_igst"], header["tax_per"], header["cgst_tot_amt"], \
                                  header["sgst_tot_amt"], header["igst_tot_amt"], header["tds_per"], header["tds_tot_amt"], header["payment_terms"], header["adjustment"], \
                                  header["tcs"], header["approver_comments"], vendor, 'y', header['working_person'], header["supplier_name"], header["npo"], header["document_type"], \
                                  header["gstin"], header["irn"])
                        
                        mycursor.execute(sqlQuery, values)

                        invoice_num = mycursor.lastrowid

                        msg = "Invoice " + str(invoice_num) + " created and submitted to customer."

                        response = {
                            "invoice_no": invoice_num,
                            "msg": msg
                        }

                    elif header["sup_status"] == "draft":

                        user_id = event["params"]["querystring"]["userid"]

                        in_status = ""
                        vendor = ""

                        mycursor.execute("select a.fs_name, a.ls_name, b.vendor_no, b.vendor_no, b.currency, b.gst_treatment " \
                            "from member a " \
                            "left join vendor_master b " \
                            "on a.member_id = b.member_id " \
                            "where a.email = ?", user_id)
                        member = mycursor.fetchone()

                        if member:
                            vendor = member['vendor_no']
                            header["working_person"] = member['fs_name'] + " " + member['ls_name']

                        sqlQuery = "INSERT INTO invoice_header (user_invoice_id, in_status, sup_status, ref_po_num, invoice_date, posting_date, baseline_date, " \
                            "amount, payment_method, currency, taxable_amount, discount_per, total_discount_amount, is_igst, tax_per, cgst_tot_amt, sgst_tot_amt, igst_tot_amt," \
                            " tds_per, tds_tot_amt, payment_terms, adjustment, tcs, supplier_comments, from_supplier, working_person, supplier_name, document_type, gstin, irn) " \
                            "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"

                        values = (header["user_invoice_id"], in_status, header["sup_status"], header["ref_po_num"], header["invoice_date"], header["posting_date"], \
                            header["baseline_date"], header["amount"], header["payment_method"], header["currency"], header["taxable_amount"], \
                            header["discount_per"], header["total_discount_amount"], header["is_igst"], header["tax_per"], header["cgst_tot_amt"], \
                            header["sgst_tot_amt"], header["igst_tot_amt"], header["tds_per"], header["tds_tot_amt"], header["payment_terms"], \
                            header["adjustment"], header["tcs"], header["approver_comments"], 'y', header['working_person'], header['supplier_name'], \
                            header["document_type"], header["gstin"], header["irn"])
                        
                        mycursor.execute(sqlQuery, values)
                        mycursor.execute('select count(*) from invoice_header')
                        invoice_num = mycursor.fetchone()
                        invoice_num = invoice_num[0]

                        msg = "Invoice No " + str(invoice_num) + " created and saved as draft."

                        response = {
                            "invoice_no": invoice_num,
                            "msg": msg
                        }

                    del sqlQuery
                    del values

                    headerAmount = 0.00

                    if invoice_num:

                        itemValue = []

                        for row in list_item:
                            item = ( str(invoice_num), row["item_no"], row["hsn_code"], row["material"], row["material_desc"], row["quantity"], row["unit"], row["currency"],
                            row["amt_per_unit"], row["cgst_per"], row["cgst_amount"], row["tax_code"], row["plant"], row["discount"],
                            row["discount_amount"], row["gross_amount"], row["sgst_per"], row["sgst_amount"], row["igst_per"], row["igst_amount"],
                            row["taxable_amount"], row["tax_value_amount"], row["gl_account"], row["gst_per"])
                            
                            itemValue.append(item)
                            headerAmount += float(row["gross_amount"])

                        sqlQuery = "INSERT INTO invoice_item (invoice_no, item_no, hsn_code, material, material_desc, quantity, unit, currency, " \
                            "amt_per_unit, cgst_per, cgst_amount, tax_code, plant, discount, discount_amount, gross_amount, sgst_per, sgst_amount," \
                            "igst_per, igst_amount, taxable_amount, tax_value_amount, gl_account, gst_per) " \
                            "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
                        
                        mycursor.executemany(sqlQuery, itemValue)

                    if header["sup_status"] == "inapproval":

                        item_category = []

                        if header['ref_po_num']:
                            item_category = fetchSAP_PoDetails(header["ref_po_num"])

                        supplier_type = ''
                        vendor_no = ''
                        vendor_currency = ''

                        if member:
                            if member['gst_treatment'] == 'overseas':
                                supplier_type = 'export'
                            else:
                                supplier_type = 'domestic'

                            vendor_no = member['vendor_no']
                            vendor_currency = member['currency']

                        d_decider = {
                            'supplier_type': supplier_type,
                            'invoice_value': headerAmount,
                            'invoice_type': item_category,
                            'vendor_no': vendor_no,
                            'currency': vendor_currency,
                            'document_type': header["document_type"]
                        }
                        
                        
                        success, emails = assign_approcessor(mycursor=mycursor, invoice_id=invoice_num, decider=d_decider)

                        if emails:
                            sendMailNotifications(invoice_id=invoice_num, mycursor=mycursor, emails=emails)

                else:

                    itemValue = []
                    invoice_id = event["params"]["querystring"]["invoice_no"]

                    if header["sup_status"] == "inapproval":
                        user_id = event["params"]["querystring"]["userid"]
                        in_status = "new"
                        vendor = ""

                        mycursor.execute("select a.fs_name, a.ls_name, a.member_id, b.vendor_no, b.currency, b.gst_treatment " \
                            "from member a " \
                            "left join vendor_master b " \
                            "on a.member_id = b.member_id " \
                            "where a.email = ?", user_id)
                        member = mycursor.fetchone()

                        if member:
                            vendor = member['vendor_no']
                            header["working_person"] = member["member_id"]

                        sqlQuery = "update invoice_header set user_invoice_id = ?, in_status = ?, sup_status = ?, ref_po_num = ?, " \
                            "invoice_date = ?, baseline_date = ?, posting_date = ?, amount = ?, payment_method = ?, currency = ?, taxable_amount = ?, discount_per = ?, " \
                            "total_discount_amount = ?, is_igst = ?, tax_per = ?, cgst_tot_amt = ?, sgst_tot_amt = ?, igst_tot_amt = ?, tds_per = ?," \
                            "tds_tot_amt = ?, payment_terms = ?, adjustment = ?, tcs = ?, supplier_comments = ?, supplier_id = ?, working_person = ?, supplier_name = ?, " \
                            "npo = ?, document_type = ?, gstin = ?, irn = ? where invoice_no = ?"

                        values = (header["user_invoice_id"], in_status, header["sup_status"], header["ref_po_num"], header["invoice_date"], header["baseline_date"], \
                            header["posting_date"], header["amount"], header["payment_method"], header["currency"], header["taxable_amount"], header["discount_per"], \
                            header["total_discount_amount"], header["is_igst"], header["tax_per"], header["cgst_tot_amt"], header["sgst_tot_amt"], header["igst_tot_amt"], \
                            header["tds_per"], header["tds_tot_amt"], header["payment_terms"], header["adjustment"], header["tcs"], header["approver_comments"], vendor, \
                            header['working_person'], header['supplier_name'], header['npo'], header["document_type"], header["gstin"], header["irn"], invoice_id)
                        
                        mycursor.execute(sqlQuery, values)
                        invoice_num = invoice_id

                        msg = "Invoice No " + str(invoice_id) + " submitted to customer."

                        response = {
                            "invoice_no": invoice_id,
                            "msg": msg
                        }

                    elif header["sup_status"] == "draft":

                        vendor = ""
                        user_id = event["params"]["querystring"]["userid"]

                        mycursor.execute("select a.fs_name, a.ls_name, a.member_id,b.vendor_no, b.gst_treatment " \
                            "from member a " \
                            "left join vendor_master b " \
                            "on a.member_id = b.member_id " \
                            "where a.email = ?", user_id)
                        member = mycursor.fetchone()

                        if member:
                            vendor = member['vendor_no']
                            header["working_person"] = member["member_id"]

                        in_status = ""
                        sqlQuery = "update invoice_header set user_invoice_id = ?, in_status = ?, sup_status = ?, ref_po_num = ?, " \
                            "invoice_date = ?, baseline_date = ?, posting_date = ?, amount = ?, payment_method = ?, currency = ?, taxable_amount = ?, discount_per = ?, " \
                            "total_discount_amount = ?, is_igst = ?, tax_per = ?, cgst_tot_amt = ?, sgst_tot_amt = ?, igst_tot_amt = ?, tds_per = ?," \
                            "tds_tot_amt = ?, payment_terms = ?, adjustment = ?, tcs = ?, supplier_comments = ?, working_person = ?, supplier_name= ?, " \
                            "document_type = ?, gstin = ?, irn = ? where invoice_no = ?"

                        values = (header["user_invoice_id"], in_status, header["sup_status"], header["ref_po_num"], header["invoice_date"], header["baseline_date"], header["posting_date"], \
                            header["amount"], header["payment_method"], header["currency"], header["taxable_amount"], header["discount_per"], header["total_discount_amount"], \
                            header["is_igst"], header["tax_per"], header["cgst_tot_amt"], header["sgst_tot_amt"], header["igst_tot_amt"], header["tds_per"], header["tds_tot_amt"], \
                            header["payment_terms"], header["adjustment"], header["tcs"], header["approver_comments"], header['working_person'], header['supplier_name'], \
                            header["document_type"], header["gstin"], header["irn"], invoice_id)
                        
                        mycursor.execute(sqlQuery, values)
                        invoice_num = mycursor.lastrowid

                        msg = "Invoice No " + str(invoice_id) + " saved as draft."

                        response = {
                            "invoice_no": invoice_id,
                            "msg": msg
                        }

                    # item data update

                    headerAmount = 0.00

                    if invoice_id != "":
                        sqlQuery = "delete from invoice_item where invoice_no = ?"
                        values = (invoice_id,)
                        mycursor.execute(sqlQuery, invoice_id)

                        for row in list_item:
                            if row["item_no"] != '':
                                row["item_no"] = int(row["item_no"])
                            if row["quantity"] != '':
                                row["quantity"] = int(row["quantity"])
                            if row["amt_per_unit"] != '':
                                row["amt_per_unit"] = int(row["amt_per_unit"])
                            if row["gl_account"] == '':
                                row["gl_account"] = 0
                            if row["gst_per"] != '':
                                row["gst_per"] = int(row["gst_per"])
                            

                            item = (int(invoice_id), row["item_no"], row["hsn_code"], row["material"], row["material_desc"], row["quantity"], row["unit"], row["currency"],
                                row["amt_per_unit"], row["cgst_per"], row["cgst_amount"], row["tax_code"], row["plant"], row["discount"],
                                row["discount_amount"], row["gross_amount"], row["sgst_per"], row["sgst_amount"], row["igst_per"], row["igst_amount"],
                                row["taxable_amount"], row["tax_value_amount"], row["gl_account"], row["gst_per"])
                            itemValue.append(item)
                            
                            headerAmount += float(row["gross_amount"])
                        
                        sqlQuery = "INSERT INTO invoice_item (invoice_no, item_no, hsn_code, material, material_desc, quantity, unit, currency, " \
                                   "amt_per_unit, cgst_per, cgst_amount, tax_code, plant, discount, discount_amount, gross_amount, sgst_per, " \
                                   "sgst_amount, igst_per, igst_amount, taxable_amount, tax_value_amount, gl_account, gst_per ) " \
                                   "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
                        
                        for i in itemValue:
                            mycursor.execute(sqlQuery, i)
                        
                    if header["sup_status"] == "inapproval":

                        item_category = []

                        mycursor.execute("select count(*) as count from assignment where invoice_no = ?", invoice_id)
                        data = mycursor.fetchone()

                        if data and data['count'] == 0:
                            if header['ref_po_num']:
                                item_category = fetchSAP_PoDetails(header["ref_po_num"])

                            supplier_type = ''
                            vendor_no = ''
                            vendor_currency = ''

                            if member:
                                if member['gst_treatment'] == 'overseas':
                                    supplier_type = 'export'
                                    
                                else:
                                    supplier_type = 'domestic'

                                if member['vendor_no']:
                                    vendor_no = member['vendor_no']
                                    
                                if member['currency']:
                                    vendor_currency = member['currency']

                            d_decider = {
                                'supplier_type': supplier_type,
                                'invoice_value': headerAmount,
                                'invoice_type': item_category,
                                'vendor_no': vendor_no,
                                'currency': vendor_currency,
                                'document_type': header["document_type"]
                            }

                            sucess, emails = assign_approcessor(mycursor=mycursor, invoice_id=invoice_id, decider=d_decider)
                            print(sucess, emails)
                            
                            if emails:
                                sendMailNotifications(invoice_id=invoice_id, mycursor=mycursor, emails=emails)

                mydb.commit()    

    except pymysql.err.IntegrityError as e:
        mydb.rollback()
        return {
            'statuscode': 500,
            'body': json.dumps("Dulpicate Entry")
        }

    except Exception as e: 
        mydb.rollback()
        return {
            'statuscode': 500,
            'body': json.dumps("Interal Failure")
        }

    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': response
    }
# event = {'body-json': {'header': {'user_invoice_id': '', 'invoice_date': '2022-11-16', 'payment_terms': '45', 'supplier_name': 'K K infotech', 'baseline_date': '2022-12-31', 'posting_date': '', 'ref_po_num': '', 'currency': 'INR', 'taxable_amount': 0, 'tax_per': '18', 'is_igst': 0, 'cgst_tot_amt': 0, 'sgst_tot_amt': 0, 'igst_tot_amt': 0, 'discount_per': 0, 'total_discount_amount': 0, 'tds_per': None, 'tds_tot_amt': 0, 'adjustment': 0, 'tcs': '', 'amount': 0, 'sup_status': 'draft', 'approver_comments': '', 'npo': '', 'invoice_files': '', 'gstin': '', 'document_type': 'RE', 'irn': '', 'jurisdiction': '', 'suppliercode': ''}, 'item': [{'item_no': 1, 'material_desc': '', 'material': '', 'hsn_code': '', 'quantity': '', 'amt_per_unit': '', 'unit': '', 'discount': '', 'discount_amount': 0, 'gst_per': '18', 'sgst_per': 9, 'cgst_per': 9, 'igst_per': '18', 'taxable_amount': 0, 'tax_value_amount': 0, 'cgst_amount': 0, 'sgst_amount': 0, 'igst_amount': 0, 'total_amount': 0, 'gross_amount': 0}]}, 'params': {'path': {}, 'querystring': {'userid': 'einvoiceportal@gmail.com'}, 'header': {'accept': 'application/json, text/plain, */*', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'en-US,en;q=0.9', 'Authorization': 'eyJraWQiOiJ1RXlLMTdnUjUzTVVMcXUrYkRsQUZ2NHRSUTR0VVM5KzM4NlwvZnpxMWorQT0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiI5NDkxOTNiMi1hZWQ2LTQxZGUtOTM2YS04MGRjMTEzNjUxNzIiLCJhdWQiOiIyNGJqZTRqdWQ4aDNmOHJzbmtraGcwYmx2MSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJldmVudF9pZCI6IjQ3MjFlMWExLTgzOGQtNDY5My1iMmVmLTBjYzVkMWU2ZWI4YiIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjY4NTgzNzM1LCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAuZXUtY2VudHJhbC0xLmFtYXpvbmF3cy5jb21cL2V1LWNlbnRyYWwtMV9QOXJubnFpTHUiLCJjb2duaXRvOnVzZXJuYW1lIjoiOTQ5MTkzYjItYWVkNi00MWRlLTkzNmEtODBkYzExMzY1MTcyIiwiZXhwIjoxNjY4NTg3MzM1LCJpYXQiOjE2Njg1ODM3MzUsImVtYWlsIjoiZWludm9pY2Vwb3J0YWxAZ21haWwuY29tIn0.bXY6Hqp7wyMiXAkQMFAPQlt3qhQJeq8QsjowrrWhp227UENpJFo_zJYPVq-ptHBTkrripdODmTSabGkI3tL1kaXkQJuJboxRkCzO6-o9g62TUoTjIwyrPRZRc-lH3pXRTwJBxdhG1Tes_6BcLiL3nkf1h4lk6hdzJZUX4PYOg2GcwmCv9NqU0mT9TNj23Il8ZY3ch49ubNtE9rW0oirzIB_FSbhYDOrMsqm17TN03pkP7jGa-qwpwklu1QTRNriDCSVZUIwddaLrM1KGYXp1u01GQOJE7Nj-sAsgzlghc-9Fwl-ZeDUFeGe8a5XMd0RZxdOEIsMP8_LvZ4I6mv7K8g', 'content-type': 'application/json', 'Host': '7firau5x7b.execute-api.eu-central-1.amazonaws.com', 'origin': 'http://localhost:4200', 'referer': 'http://localhost:4200/', 'sec-ch-ua': '"Google Chrome";v="107", "Chromium";v="107", "Not=A?Brand";v="24"', 'sec-ch-ua-mobile': '?0', 'sec-ch-ua-platform': '"Windows"', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'cross-site', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 'X-Amzn-Trace-Id': 'Root=1-637491cb-244d58c55a9be848193c6f21', 'X-Forwarded-For': '49.206.129.42', 'X-Forwarded-Port': '443', 'X-Forwarded-Proto': 'https'}}, 'stage-variables': {'schema': 'einvoice_db_portal', 'non_ocr_attachment': 'einvoice-attachments', 'lambda_alias': 'dev', 'aws_mail_bucket': 'application-email', 'notification_email': 'elipotest@gmail.com', 'ocr_bucket': 'textract-console-ap-southeast-1-b8779ae1-dd77-4d3c-a56d-443a5db', 'ocr_bucket_folder': 'old-dev/', 'oauth_ret': 'https://7firau5x7b.execute-api.eu-central-1.amazonaws.com/einvoice-v1/gmail-s3', 'bucket_gmail_credential': 'file-bucket-emp', 'clientsec_location': 'client_secret.json', 'secreat': 'test/einvoice/secret', 'attach_stage': 'dev'}, 'context': {'account-id': '', 'api-id': '7firau5x7b', 'api-key': '', 'authorizer-principal-id': '', 'caller': '', 'cognito-authentication-provider': '', 'cognito-authentication-type': '', 'cognito-identity-id': '', 'cognito-identity-pool-id': '', 'http-method': 'POST', 'stage': 'einvoice-v1', 'source-ip': '49.206.129.42', 'user': '', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 'user-arn': '', 'request-id': 'eadbcca3-6689-45ff-832c-69a97570e966', 'resource-id': 'fey7rk', 'resource-path': '/supplier'}}

# print(postInvoiceDetailsSup(event , ' '))

def enable_xray(event):
    if 'Authorization' in event['params']['header'] :
       atoken =  event['params']['header']['Authorization']
    
    if atoken != '':
        flg = requests.get("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/getemail", headers={"Content-Type":"application/json", "Authorization":atoken})

    return json.loads(flg.text)['body']

#event not found
def getVendorDetails(event, context):
    global dbScehma 
    dbScehma = ' DBADMIN '

    # client = boto3.client(
    # 'secretsmanager',
    # region_name='eu-central-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )

    # secret = event["stage-variables"]["secreat"]

    # resp = client.get_secret_value(
    #     SecretId= secret
    # )

    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()

    records = {}  

    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
            on = mycursor.fetchone()
            on = convertValuesTodict(mycursor.description, on)
            on = on[0]
            if on['value1'] == 'on':
                chk = enable_xray(event)
                if chk['Enable'] == True:
                    patch_all() 
                    print(event)

            if "querystring" in event["params"]:
                if "vendor_no" in event["params"]["querystring"]:
                    values =  event["params"]["querystring"]["vendor_no"]
                    
                    sqlQuery = "select * from vendor_master where vendor_no = ?"
                    mycursor.execute(sqlQuery, values)
                    vendor = mycursor.fetchone()
                    
                if vendor:
                    mycursor.execute("select * from vendor_user where vendor_no = ?", values)
                    vendor_email = mycursor.fetchall()
                    
                    sup_emails = []
                    for each in vendor_email:
                        if vendor["vendor_no"] == each["vendor_no"]:
                            sup_emails.append(each["email"])
                        
                    records = {
                        "vendor_no" : vendor["vendor_no"], 
                        "vendor_name" : vendor["vendor_name"], 
                        "gst_treatment" : vendor["gst_treatment"], 
                        "gstin_uin" : vendor["gstin_uin"], 
                        "source_of_supply" : vendor["source_of_supply"], 
                        "currency" : vendor["currency"], 
                        "payment_terms" : vendor["payment_terms"], 
                        "tds" : str(vendor["tds"]), 
                        "gst_per" : vendor["gst_per"], 
                        "pan" : vendor["pan"],
                        "sup_emails": sup_emails
                    }
                    
    except:
        return {
        'statuscode': 500,
        'body': json.dumps("Internal Failure")   
    }
    
    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': records
    }

#event not found
def deleteInvoice(event, context): 

    global dbScehma 
    dbScehma = ' DBADMIN '

    # client = boto3.client(
    # 'secretsmanager',
    # region_name='ap-south-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )
    # secret = event["stage-variables"]["secreat"]
    # resp = client.get_secret_value(
    #     SecretId= secret
    # )  
    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()
    
    msg = "Delete unsuccessful!"
    
    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
            on = mycursor.fetchone()
            if on['value1'] == 'on':
                chk = enable_xray(event)
                if chk['Enable'] == True:
                    patch_all() 
                    print(event)
            
            invoice_no = event["params"]["querystring"]['invoice_no']
            userid = event["params"]["querystring"]['userid']
            
            if "invoice_no" in event["params"]["querystring"] and "userid" in event["params"]["querystring"] and "sup_invoice" in event["params"]["querystring"]:
                values = (invoice_no, )
                
                sqlQuery = "DELETE FROM invoice_header WHERE invoice_no = ?"
                mycursor.execute(sqlQuery, values)
                
                sqlQuery = "DELETE FROM invoice_item WHERE invoice_no = ?"
                mycursor.execute(sqlQuery, values)
            
            elif "invoice_no" in event["params"]["querystring"] and "userid" in event["params"]["querystring"]:
                
                values = ( userid, )
                sqlQuery = "select (fs_name|| ' '|| ls_name) as member_name, member_id FROM member WHERE email = ?"
                mycursor.execute(sqlQuery, values)
                working_person = mycursor.fetchone()
                
                values = (invoice_no, )
                sqlQuery = "DELETE FROM assignment WHERE invoice_no = ?"
                mycursor.execute(sqlQuery, values)
                
                sqlQuery = "update invoice_header set in_status = 'deleted' where invoice_no = ?"
                mycursor.execute(sqlQuery, values)
                
                sqlQuery = "insert into invoice_audit (invoice_no, prev_status, new_status, working_person, msg) values (?, ?, ?, ?, ?)"
                msg_cmnt = "Invoice No " + str(invoice_no) + " deleted by " + working_person["member_name"] 
                values = (invoice_no, "", "deleted", working_person['member_id'], msg_cmnt)
                mycursor.execute(sqlQuery, values)
                        
            msg = "Invoice no. " + event["params"]["querystring"]["invoice_no"] + " deleted"   
            mydb.commit()
            
    except:
        return {
            'statuscode': 500,
            'body': json.dumps('Internal Error')
        }
            
    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': json.dumps(msg)
    }

def checkInvoiceAndVendor(event, context):
    global dbScehma
    
    client = boto3.client(
    'secretsmanager',
    region_name='eu-central-1',
    aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    aws_secret_access_key='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' )
    secret = event["stage-variables"]["secreat"]
    resp = client.get_secret_value(
        SecretId= secret
    ) 
    secretDict = json.loads(resp['SecretString'])

    mydb = pymysql.connect(
        host=secretDict['host'],
        user=secretDict['username'],
        passwd=secretDict['password'],
        database=secretDict['dbname'],
        charset='utf8mb4',
        cursorclass=pymysql.cursors.DictCursor
    )
    
    body = ""

    try:
        
        dbScehma = event["stage-variables"]["schema"]
        with mydb.cursor() as mycursor:
            defSchemaQuery = "use " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
            on = mycursor.fetchone()
            if on['value1'] == 'on':
                chk = enable_xray(event)
                if chk['Enable'] == True:
                    patch_all() 
                    print(event)
                
            invoice_no = None
            record = None
            
            if "invoice_no" in event["params"]["querystring"]:
                invoice_no = event["params"]["querystring"]["invoice_no"]
                
            user_invoice_no = event["params"]["querystring"]["invoice_id"]
            vendor_no = event["params"]["querystring"]["vendor_no"]
               
            sqlQuery = "select invoice_no from invoice_header where user_invoice_id = %s and supplier_id = %s"
            values = ( user_invoice_no, vendor_no )
            mycursor.execute(sqlQuery, values)
            record = mycursor.fetchone()
            
            if record: 
                if "invoice_no" in event["params"]["querystring"]:
                    if int(record["invoice_no"]) == int(invoice_no):
                        body = 'n'
                    else:
                        body = 'y'
                else:
                    body = 'y'
            else: 
                body = 'n'
                
                            
    except Exception as e:
        return {
            'statusCode': 500,
            'body': json.dumps("Internal Failure")
        }
        
    finally:
        mydb.close()
        
    return {
        'statusCode': 200,
        'body': body
    }

def GetUserEmails(event, context):
    
    atoken = ''
    op = ''
    enable = ''
    if 'Authorization' in event['params']['header']:
        atoken = event['params']['header']['Authorization']
    global dbScehma 
    dbScehma = event["stage-variables"]["schema"]
    
    client = boto3.client(
    'secretsmanager',
    region_name='eu-central-1',
    aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    aws_secret_access_key='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' )
    secret = event["stage-variables"]["secreat"]
    resp = client.get_secret_value(
        SecretId= secret
    )
    secretDict = json.loads(resp['SecretString'])

    mydb = pymysql.connect(
        host=secretDict['host'],
        user=secretDict['username'],
        passwd=secretDict['password'],
        database=secretDict['dbname'],
        charset='utf8mb4',
        cursorclass=pymysql.cursors.DictCursor
    )
    
    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "use " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            print(event)
            
            Flag = mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
            if Flag == 1:
                mycursor.execute("SELECT userid from email where flag = 'True' ")
                all_emails = mycursor.fetchall()
                if atoken != '':
                    op = decode_jwt_token(atoken)
                    if op == '':
                        all_emails = {}
                        enable = False
                    for ch in all_emails:
                        if op == ch['userid'] :
                            enable = True
                            break
                        else :
                           enable = False 
                else:
                    enable = False
                    all_emails = {} 
            else:
                enable = False
                all_emails = {}
        
    except:
        return {
            'statuscode': 500,
            'body': json.dumps("Internal Failure")   
        }  
        
    finally:
        mydb.close()
         
    
    return {
        'statusCode': 200,
        # 'body': {'Enable' : enable}
        'body': {'Enable' : enable , 'email' : op}
    }

#not changed
def Elipo_logs(event, context):
    print(event)

    global dbScehma 
    dbScehma = 'einvoice_db_portal'

    client = boto3.client(
    'secretsmanager',
    region_name='eu-central-1',
    aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    aws_secret_access_key='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' )

    secret = 'test/einvoice/secret'

    resp = client.get_secret_value(
        SecretId= secret
    ) 

    secretDict = json.loads(resp['SecretString'])
    

    mydb = pymysql.connect(
        host=secretDict['host'],
        user=secretDict['username'],
        passwd=secretDict['password'],
        database=secretDict['dbname'],
        charset='utf8mb4',
        cursorclass=pymysql.cursors.DictCursor
    )
    
    try:
        # resp=patch_all()
        xray_recorder.begin_subsegment(name="Test1")
        with mydb.cursor() as mycursor:
            defSchemaQuery = "use " + dbScehma
            mycursor.execute(defSchemaQuery)
            
           
            mycursor.execute("SELECT * FROM elipo_setting")
            settings = mycursor.fetchall()
            
            print('Elipo-logs')
            # print(event['context']['api-id'])
            atoken = ''
            if 'Authorization' in event['params']['header'] :
                atoken =  event['params']['header']['Authorization']
                print(atoken)
                
            mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ") 
            flg = mycursor.fetchone()
            if flg['value1'] == 'on':
                trace_off = 'off'
                a = requests.post("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/enablexraytracesindividually", headers={"Content-Type":"application/json", "lambda":'Elipo-logs' , "api":event['context']['api-id'] ,"Authorization":atoken}) 
                if json.loads(a.text)['body'] == 'on':
                # if 'off' == 'off':
                    patch_all()
                    print('patch_all')
                    print(event)  
                    # print(ap)
                    
            # xray_recorder.begin_subsegment(name="Test")
            #Creating Session With Boto3.
            session = boto3.Session(aws_access_key_id='AKIAXUCMAX6S36GOUQ5E',aws_secret_access_key='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')
            #Creating S3 Resource From the Session.
            s3 = session.resource('s3')
            txt_data = 'This is the content of the file uploaded from python boto3 asdfasdf'
            object = s3.Object('pramod-email', 'file_name.txt')
            result = object.put(Body=txt_data)
            xray_recorder.end_subsegment() 
            # patch_all()
            
    # except :
    #     return{
    #       'statuscode': 500,
    #       'body': "Internal Failure",  
    #     }
        
    
    finally:
        mydb.close()
        
        xray_recorder.begin_subsegment(name="Test2")
       
        if trace_off == 'off':
            print('calling off')
            b = requests.post("https://4kaosyaovj.execute-api.eu-central-1.amazonaws.com/dev/enablexraytracesindividually", headers={"Content-Type":"application/json", "lambda":'Elipo-logs' , "api":event['context']['api-id'] ,"Authorization":atoken , "switch":'off'})
        xray_recorder.end_subsegment() 
        
    
    return {
        'statusCode': 200,
        'body': json.dumps('Hello from Lambda!'),
        'event':event
    }

# event = {'body-json': {}, 'params': {'path': {}, 'querystring': {}, 'header': {'Accept': '*/*', 'Accept-Encoding': 'gzip, deflate, br', 'Authorization': 'eyJraWQiOiJ1RXlLMTdnUjUzTVVMcXUrYkRsQUZ2NHRSUTR0VVM5KzM4NlwvZnpxMWorQT0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiI5NDkxOTNiMi1hZWQ2LTQxZGUtOTM2YS04MGRjMTEzNjUxNzIiLCJhdWQiOiIyNGJqZTRqdWQ4aDNmOHJzbmtraGcwYmx2MSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJldmVudF9pZCI6IjNiOTJjNjlhLTk5NGItNDE4ZS1hODE5LTRhMzE0Y2I5NWE5ZiIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjUwNTEzNDkzLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAuZXUtY2VudHJhbC0xLmFtYXpvbmF3cy5jb21cL2V1LWNlbnRyYWwtMV9QOXJubnFpTHUiLCJjb2duaXRvOnVzZXJuYW1lIjoiOTQ5MTkzYjItYWVkNi00MWRlLTkzNmEtODBkYzExMzY1MTcyIiwiZXhwIjoxNjUwNTE3MDkzLCJpYXQiOjE2NTA1MTM0OTMsImVtYWlsIjoiZWludm9pY2Vwb3J0YWxAZ21haWwuY29tIn0.SwrAAoHoqYx1k0IIsOIr1xlQc1qQ1JXAdjyIJVeRUDXjVzD3t7P4MYbbMTOIa2j5pnSJ8QRn1gfqFXZGknbFDoxs9c5bFqwNksI-evcym7M296WHipNknuGpUWOnn3oZTkhWOgbrDYQseyDz0hDNHh061MpreCoA3IxDYdty3mJ25SvddCHk6qwGHOx3nKHWrSUDuGX_JxZE_qh6c6VPU2rtoIAXMGcH1q2p530-lLFx23v-BRufdARdL6U27GoJrCkEgt5L6VgEsElcYCeYw06EJ7ZRGpBGqiO_hn-8jgdOkLebkwXvAvQLRtiN_7MEABzyw-oOnReaX80kcybkOg', 'Host': 'j9lp1anbvf.execute-api.eu-central-1.amazonaws.com', 'Postman-Token': '7cbd5ee9-17cf-44bc-b53a-dd47527b7b64', 'User-Agent': 'PostmanRuntime/7.29.0', 'X-Amzn-Trace-Id': 'Root=1-62610103-526e975b775d986541969f64', 'X-Forwarded-For': '49.207.195.249', 'X-Forwarded-Port': '443', 'X-Forwarded-Proto': 'https'}}, 'stage-variables': {'schema': 'einvoice_db_portal', 'secreat': 'test/einvoice/secret'}, 'context': {'account-id': '', 'api-id': 'j9lp1anbvf', 'api-key': '', 'authorizer-principal-id': '', 'caller': '', 'cognito-authentication-provider': '', 'cognito-authentication-type': '', 'cognito-identity-id': '', 'cognito-identity-pool-id': '', 'http-method': 'GET', 'stage': 'dev', 'source-ip': '49.207.195.249', 'user': '', 'user-agent': 'PostmanRuntime/7.29.0', 'user-arn': '', 'request-id': '6f83f9c0-dc52-4c77-8fe8-5fe5314f8b42', 'resource-id': '21d9er', 'resource-path': '/getlogs'}}

# print(lambda_handler(event , ''))

def GetUserEmails(event, context):
    
    atoken = ''
    op = ''
    enable = ''
    if 'Authorization' in event['params']['header']:
        atoken = event['params']['header']['Authorization']
    global dbScehma 
    dbScehma = event["stage-variables"]["schema"]
    
    client = boto3.client(
    'secretsmanager',
    region_name='eu-central-1',
    aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    aws_secret_access_key='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' )
    secret = event["stage-variables"]["secreat"]
    resp = client.get_secret_value(
        SecretId= secret
    )
    secretDict = json.loads(resp['SecretString'])

    mydb = pymysql.connect(
        host=secretDict['host'],
        user=secretDict['username'],
        passwd=secretDict['password'],
        database=secretDict['dbname'],
        charset='utf8mb4',
        cursorclass=pymysql.cursors.DictCursor
    )
    
    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "use " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            print(event)
            
            Flag = mycursor.execute(" select value1 from elipo_setting where key_name = 'config_trace' ")
            if Flag == 1:
                mycursor.execute("SELECT userid from email where flag = 'True' ")
                all_emails = mycursor.fetchall()
                if atoken != '':
                    op = decode_jwt_token(atoken)
                    if op == '':
                        all_emails = {}
                        enable = False
                    for ch in all_emails:
                        if op == ch['userid'] :
                            enable = True
                            break
                        else :
                           enable = False 
                else:
                    enable = False
                    all_emails = {} 
            else:
                enable = False
                all_emails = {}
        
    except:
        return {
            'statuscode': 500,
            'body': json.dumps("Internal Failure")   
        }  
        
    finally:
        mydb.close()
         
    
    return {
        'statusCode': 200,
        # 'body': {'Enable' : enable}
        'body': {'Enable' : enable , 'email' : op}
    }
# ...............................mumbai functions.........................................
#event not found
def deleteAprroverDetails(event, context):
    global dbScehma 
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='ap-south-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )

    # secret = event["stage-variables"]["secreat"]

    # resp = client.get_secret_value(
    #     SecretId= secret
    # )  

    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()
    
    # print(event)

    try:
        with mydb.cursor() as mycursor:
            dbScehma = ' DBADMIN '
            
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            # sqlQuery = "DELETE FROM approver WHERE approver_id = %s"
            # values = (event["params"]["querystring"]["approver_id"])
            # mycursor.execute(sqlQuery, values)
            # # affected_row = mycursor.lastrowid
            
            # msg = "Approver ID " + event["params"]["querystring"]["approver_id"] + " deleted"   
            
            
            if len(event["params"]["querystring"]["approver_id"].split(',')) == 1:
                values = (event["params"]["querystring"]["approver_id"],)
                mycursor.execute("DELETE FROM approver WHERE approver_id = ?",values)
            else:
                mycursor.execute("DELETE FROM approver WHERE approver_id in {}".format(tuple(event["params"]["querystring"]["approver_id"].split(','))))
            
            mydb.commit()
            
            # msg = "Code" + event["params"]["querystring"]["codes"] + " deleted" 
            
            # mydb.commit()
            
    except:
        
        return {
            'statuscode': 500,
            'body': json.dumps("unable to delete")
        }
            
    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': json.dumps("deleted successfully")
    }

#event not found
def getApproverDetails(event, context):
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='ap-south-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )

    # secret = event["stage-variables"]["secreat"]

    # resp = client.get_secret_value(
    #     SecretId= secret
    # ) 

    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()

    records = {}
    
    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)


            # approver = []
            
            # sqlQuery = "select a.approver_id, a.member_id, a.approval_type, a.approval_level," \
            #     " a.is_valid, m.fs_name, m.ls_name, m.email, m.position " \
            #     "from approver a inner join member m on a.member_id = m.member_id where a.rule = %s"
            
            # ==========================
            # sqlQuery = "SELECT r.rule, r.decider, r.operator, r.d_value, r.d_value2, r.rule_id, ra.approver, ra.level, ra.isgroup, m.fs_name, m.ls_name, m.email, m.position " \
            #             "FROM einvoice_db_portal.rule r " \
            #             "inner join einvoice_db_portal.rule_approver ra " \
            #             "on r.rule_id = ra.rule_key " \
            #             "inner join einvoice_db_portal.member m " \
            #             "on ra.approver = m.member_id " \
            #             "where r.rule = %s and ra.isgroup = 'n' order by r.rule"
                        
            # values = (event["params"]["querystring"]["rule"],)

            # mycursor.execute(sqlQuery, values)
            # print(mycursor)
            # for row in mycursor:
                
            #     if row["decider"] == "cost_center":
            #         decider = "Cost center"
                
            #     elif row["decider"] == "amount":
            #         decider = "Amount"
                    
            #     elif row["decider"] == "discount":
            #         decider = "Discount"
                
            #     if row["operator"] == "between":
            #         approval_type = decider + " in between " + row["d_value"] + " and " + row["d_value2"]
            #     else:
            #         approval_type = decider + " " + row["operator"] + " " + row["d_value"]
                
            #     record = {
            #         'rule_id' : row["rule_id"],
            #         'level' : row["level"],
            #         'member_id': row["approver"],
            #         'member_name': row["fs_name"] + " " + row["ls_name"],
            #         'approval_type': approval_type,
            #         'approval_level': row["level"],
            #         'isgroup': row["isgroup"],
            #         'email': row["email"]
            #     }
            #     approver.append(record)
                
            # records["approver"] = sorted(approver, key = lambda i: (i['rule_id'], i['level'])) 
            
            # =====================
                
            # sqlQuery = "SELECT r.rule, r.decider, r.operator, r.d_value, r.d_value2, r.rule_id, ra.approver, ra.level, ra.isgroup, g.group_id, g.name " \
            #             "FROM einvoice_db_portal.rule r " \
            #             "inner join einvoice_db_portal.rule_approver ra " \
            #             "on r.rule_id = ra.rule_key  " \
            #             "inner join einvoice_db_portal.group g " \
            #             "on ra.approver = g.group_id " \
            #             "where r.rule = %s and ra.isgroup = 'y'"
                        
            # values = (event["params"]["querystring"]["rule"],)

            # mycursor.execute(sqlQuery, values)
            
            # for row in mycursor:
                
            #     if row["decider"] == "cost_center":
            #         decider = "Cost center"
                
            #     elif row["decider"] == "amount":
            #         decider = "Amount"
                    
            #     elif row["decider"] == "discount":
            #         decider = "Discount"
                
            #     if row["operator"] == "between":
            #         approval_type = decider + " in between " + row["d_value"] + " and " + row["d_value2"]
            #     else:
            #         approval_type = decider + " " + row["operator"] + " " + row["d_value"]
                
            #     record = {
            #         'rule_id' : row["rule_id"],
            #         'level' : row["level"],
            #         'member_id': row["approver"],
            #         'member_name': row["name"],
            #         'approval_type': approval_type,
            #         'approval_level': row["level"],
            #         'isgroup': row["isgroup"]
            #     }
            #     approver.append(record)

            # records["approver"] = sorted(approver, key = lambda i: (i['rule_id'], i['level'])) 
            
            
            
            rule_detail = []
                
            mycursor.execute("SELECT a.* FROM rule a left join rule_snro b on a.rule_id = b.rule_id where b.is_approval = 'y' order by rule_id ")
            rules = mycursor.fetchall()
                
            dict_rule = rules
            rule_keys = []
            escalator = []
            distinct_rule = []
                
            for row in rules:
                temp = {
                    "rule_id": row["rule_id"],
                    "approval_type" : row["approval_type"]
                }
                distinct_rule.append(temp)
                
            # print(distinct_rule)
                    
            res_list = [] 
            for i in range(len(distinct_rule)): 
                if distinct_rule[i] not in distinct_rule[i + 1:]: 
                    res_list.append(distinct_rule[i]) 
            # print(res_list)
            
            if rules:
                for each in rules:
                    rule_keys.append(each['rule_id'])
            
            if rule_keys and len(rule_keys) > 1:
                mycursor.execute("SELECT * FROM rule_approver where isgroup = 'n' and rule_key in {}".format(tuple(rule_keys)))
                approvers_list = mycursor.fetchall()
                
            elif len(rule_keys) == 1:
                key = (rule_keys[0])
                sqlQuery = "select * from rule_approver where isgroup = 'n' and rule_key = ?"
                mycursor.execute(sqlQuery, key)
                approvers_list = mycursor.fetchall()
                
            memberid = []
            
            if approvers_list:
                for row in approvers_list:
                    memberid.append(row["approver"])
            
            approver_final = []  
            
            if memberid and len(memberid) > 1:
                mycursor.execute("select member_id, fs_name, ls_name, position from member where member_id in {}".format(tuple(memberid)))
            
            elif len(memberid) == 1:
                member = (memberid[0])
                sqlQuery = "select member_id, fs_name, ls_name, position from member where member_id = ?"
                mycursor.execute(sqlQuery, member) 
                    
            for row in mycursor:
                temp1 = {
                    "approver": row["member_id"],
                    "name": row["fs_name"] + " " + row["ls_name"]
                }
                approver_final.append(temp1)
         
            for row in res_list:
                approvers = []
                criteria = []
                
                for data in approvers_list:
                        
                    if row["rule_id"] == data["rule_key"]:
                        
                        for temp1 in approver_final:
                                
                            if data["approver"] == temp1["approver"]:
                            
                                temp = {
                                    "approver" : data["approver"],
                                    "name": temp1["name"],
                                    "level" : data['level']
                                }
                                approvers.append(temp)
                                    
                for value in dict_rule:
                    
                    decider = ""
                    if row["rule_id"] == value["rule_id"]:
                        
                        if value["decider_type"] == "string":
                            
                            if value["decider"] == "discount" and value["operator"] != "between":
                                decider = "Discount" + " " + value["operator"] + " " + value["d_value"]
                                    
                            elif value["decider"] == "discount" and value["operator"] == "between":
                                decider = "Discount between" + value["d_value"] + " and " + value["d_value2"]
                                    
                            elif value["decider"] == "amount" and value["operator"] != "between":
                                decider = "Amount" + " " + value["operator"] + " " + value["d_value"]
                                    
                            elif value["decider"] == "amount" and value["operator"] == "between":
                                decider = "Amount between " + value["d_value"] + " and " + value["d_value2"]
                                    
                            elif value["decider"] == "gl_account":
                                decider = "G/L account " + value["operator"] + " " + value["d_value"]
                                    
                            elif value["decider"] == "currency":
                                decider = "Currency " + value["operator"] + " " + value["d_value"]
                                    
                            elif value["decider"] == "cost_center":
                                decider = "Cost center" + " " + value["operator"] + " " + value["d_value"]
                                    
                            elif value["decider"] == "npo":
                                decider = "NPO " + " " + value["operator"] + " " + value["d_value"]
                                    
                            elif value["decider"] == "vendor_no":
                                decider = "Vendor No. " + " " + value["operator"] + " " + value["d_value"]
                                    
                            elif value["decider"] == "department_id":
                                decider = "Department ID " + " " + value["operator"] + " " + value["d_value"]
                                
                            elif value["decider"] == "item_category":
                                decider = "Item Category " + " " + value["operator"] + " " + value["d_value"]
                            
                            elif value["decider"] == "default":
                                decider = "Default"
                                
                            criteria.append(decider)
                                
                        else:
                            
                            if value["decider"] == "discount" and value["operator"] != "between":
                                decider = "Discount" + " " + value["operator"] + " " + str(int(value["d_value"]))
                                
                            elif value["decider"] == "discount" and value["operator"] == "between":
                                decider = "Discount between" + " " + str(int(value["d_value"])) + " and " + str(int(value["d_value2"]))
                                
                            elif value["decider"] == "amount" and value["operator"] != "between":
                                    decider = "Amount" + " " + value["operator"] + " " + str(int(value["d_value"]))
                                
                            elif value["decider"] == "amount" and value["operator"] == "between":
                                decider = "Amount between " + str(int(value["d_value"])) + " and " + str(int(value["d_value2"]))
                                    
                            elif value["decider"] == "gl_account" and value["operator"] != "between":
                                decider = "G/L account " + value["operator"] + " " + value["d_value"]
                                    
                            elif value["decider"] == "currency" and value["operator"] != "between":
                                decider = "Currency " + value["operator"] + " " + value["d_value"]
                                
                            elif value["decider"] == "cost_center":
                                decider = "Cost center between " + " " + value["operator"] + " " + value["d_value"]
                                
                            elif value["decider"] == "npo":
                                decider = "NPO " + " " + value["operator"] + " " + value["d_value"]
                                
                            elif value["decider"] == "vendor_no":
                                decider = "Vendor No. " + value["operator"] + " " + value["d_value"]
                                    
                            elif value["decider"] == "department_id":
                                decider = "Department ID " + " " + value["operator"] + " " + value["d_value"]
                                    
                            elif value["decider"] == "item_category":
                                decider = "Item Category " + " " + value["operator"] + " " + value["d_value"]
                                
                            elif value["decider"] == "default":
                                decider = "Default"
                                    
                            criteria.append(decider)
                        
                record = {
                    "rule_id": row["rule_id"],
                    "approval_type" : row["approval_type"], 
                    "criteria": criteria,
                    "approvers" : approvers
                }
                rule_detail.append(record)
        
    except :   
        return {
            'statuscode': 500,
            'body': json.dumps("Internal Failure"),
        }
        
    finally:
        mydb.close()
    
    return {
        'statuscode': 200,
        'body': rule_detail
    }

#event not found
def patchApproverDetails(event, context):
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='ap-south-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )

    # secret = event["stage-variables"]["secreat"]

    # resp = client.get_secret_value(
    #     SecretId= secret
    # )  

    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()
    
    # print(event)

    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            if "approval_type" in event["body-json"] and "approval_level" in event["body-json"]:
                sqlQuery = "update approver set approval_type = ?, approval_level = ? where approver_id = ?"
                values = (event["body-json"]["approval_type"], event["body-json"]["approval_level"], event["params"]["querystring"]["approver_id"])
                mycursor.execute(sqlQuery, values)
                # affected_row = mycursor.lastrowid
                
            elif "group_id" in event["body-json"] and "approval_level" in event["body-json"]:
                sqlQuery = "update approver set group_id = ?, approval_level = ? where approver_id = ?"
                values = (event["body-json"]["group_id"], event["body-json"]["approval_level"], event["params"]["querystring"]["approver_id"])
                mycursor.execute(sqlQuery, values)
                # affected_row = mycursor.lastrowid
                
            elif "approval_type" in event["body-json"]:
                sqlQuery = "update approver set approval_type = ? where approver_id = ?"
                values = (event["body-json"]["approval_type"],  event["params"]["querystring"]["approver_id"])
                mycursor.execute(sqlQuery, values)
                # affected_row = mycursor.lastrowid
                
            elif "approval_level" in event["body-json"]:
                sqlQuery = "update approver set approval_level = ? where approver_id = ?"
                values = (event["body-json"]["approval_level"], event["params"]["querystring"]["approver_id"])
                mycursor.execute(sqlQuery, values)
                # affected_row = mycursor.lastrowid
            
            elif "group_id" in event["body-json"]:
                sqlQuery = "update approver set group_id = ? where approver_id = ?"
                values = (event["body-json"]["group_id"], event["params"]["querystring"]["approver_id"])
                mycursor.execute(sqlQuery, values)
                # affected_row = mycursor.lastrowid
            
            msg = "Approver ID " + event["params"]["querystring"]["approver_id"] + " updated"   
            
            mydb.commit()
            
    except:
        
        return {
            'statuscode': 500,
            'body': json.dumps("unable to modify")
        }
            
    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': json.dumps(msg)
    }

#event not found
def postApproverDetails(event, context):
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='ap-south-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )

    # secret = event["stage-variables"]["secreat"]

    # resp = client.get_secret_value(
    #     SecretId= secret
    # )  

    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()

    record = {
        "rule" :"",
        "member_id" : "",
        "approval_type" : "",
        "approval_level" : "",
        "is_valid":"y",
        "group_id":""
    }

    try:
        
        for value in event["body-json"]:
            if value in record:
                record[value] = event["body-json"][value]
        
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            sqlQuery = "INSERT INTO approver (rule, member_id, approval_type, approval_level, is_valid, group_id)" \
                       " VALUES (?, ?, ?, ?, ?, ?)"
            values = (record["rule"], record["member_id"], record["approval_type"], record["approval_level"], record["is_valid"], record["group_id"])
            
            # print(sqlQuery)
            # print(values)
            mycursor.execute(sqlQuery, values)
            mycursor.execute('select count(*) from approver')
            # approver_id = mycursor.lastrowid
            approver_id = mycursor.fetchone()
            approver_id = approver_id[0]
    
            del sqlQuery
            del values
    
            sqlQuery = "select fs_name, ls_name, email, position, group_id from member where member_id = '?'"
            values = (int(record["member_id"]),)
    
            mycursor.execute(sqlQuery, values)
            member_details = mycursor.fetchone()
    
            del sqlQuery
            del values
    
            sqlQuery = "INSERT INTO dropdown (drop_key, value1, value2, value3) VALUES (?, ?, ?, ?)"
    
            values = ('approver', approver_id, member_details["position"], member_details["email"])
    
            mycursor.execute(sqlQuery, values)
            
            mydb.commit()
            
    except:
        mydb.rollback()
        return {
            'statuscode': 500,
            'body': json.dumps("Approver insertion failed!")
        }
            
    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': json.dumps("Record inserted!")
    }

#complex queries
def getMemberNGroupDetails(event, context):
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='ap-south-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )
    # secret = event["stage-variables"]["secreat"]
    # resp = client.get_secret_value(
    #     SecretId= secret
    # )  
    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()
   
    records = []
    
    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)    
            
            if "search_string" in event["params"]["querystring"] and "assign_details" in event["params"]["querystring"]:
                temp = event["params"]["querystring"]["search_string"] + "%%"
                 
                mycursor.execute('SELECT distinct(group_id), name ' \
                	'FROM "GROUP" ' \
                    "where role in ('app', 'ssu', 'superadmin') and name like ?" \
                    'order by name', temp)
                    
                for row in mycursor:
                    record = { 
                        'id'  : row[0], 
                        'name' : row['name'],
                        'is_group': 'y',
                        'position': ""
                    }
                    records.append(record)
                    
                values = ( temp , temp )
                mycursor.execute("SELECT m.member_id, (m.fs_name|| ' '|| m.ls_name) as member_name, d.value2 " \
                	"FROM member m " \
                	"left join dropdown d " \
                	"on m.user_type = d.value1 " \
                    'inner join "GROUP" g ' \
                    "on m.group_id = g.group_id " \
                    "where g.role in ('app', 'ssu', 'superadmin') and (m.fs_name like ? or m.ls_name like ?) " \
                    "order by m.fs_name", values)
                    
                for row in mycursor:
                    record = {
                        'id': row['member_id'],
                        'name': row['member_name'],
                        'is_group': 'n',
                        'position': row["value2"]
                    }
                    records.append(record)
                
            elif "search_string" in event["params"]["querystring"]:
                sqlQuery = "SELECT m.member_id, (m.fs_name|| ' '||m.ls_name) as member_name, d.value2 " \
                    "FROM member m " \
                	"left join dropdown d " \
                	"on m.user_type = d.value1 " \
                    "where fs_name like ? or ls_name like ? order by fs_name"
                temp = event["params"]["querystring"]["search_string"] + "%%"
                values = ( temp , temp )
                mycursor.execute(sqlQuery, values)
                
                for row in mycursor:
                    record = {
                        'id': row['member_id'],
                        'name': row['member_name'],
                        'is_group': 'n',
                        'position': row["value2"]
                    }
                    records.append(record)
                    
                sqlQuery = 'SELECT group_id, name FROM "GROUP" where name like ? order by name'
                temp = event["params"]["querystring"]["search_string"] + "%%"
                values = ( temp, )
                mycursor.execute(sqlQuery, values)
                
                for row in mycursor:
                    record = { 
                        'id'  : row['group_id'], 
                        'name' : row['name'],
                        'is_group': 'y'
                    }
                    records.append(record)
            
            elif "assign_details" in event["params"]["querystring"]:
                mycursor.execute("SELECT distinct(group_id), name " \
                	'FROM "GROUP" ' \
                    "where role in ('app', 'ssu', 'superadmin') " \
                    "order by name")
                    
                for row in mycursor:
                    record = { 
                        'id'  : row['(group_id)'], 
                        'name' : row['name'],
                        'is_group': 'y'
                    }
                    records.append(record)
                    
                mycursor.execute("SELECT m.member_id, (m.fs_name|| ' '|| m.ls_name) as member_name, value2 " \
                	"FROM member m " \
                	"left join dropdown d " \
                	"on m.user_type = d.value1 " \
                    'inner join "GROUP" g ' \
                    "on m.group_id = g.group_id " \
                    "where g.role in ('app', 'ssu', 'superadmin')" \
                    "order by m.fs_name")
                    
                for row in mycursor:
                    record = {
                        'id': row['member_id'],
                        'name': row['member_name'],
                        'is_group': 'n',
                        'position': row["value2"]
                    }
                    records.append(record)
                
            else:   
                mycursor.execute('select group_id, name from "GROUP" order by name')
                
                for row in mycursor:
                    record = { 
                        'id'  : row['group_id'], 
                        'name' : row['name'],
                        'is_group': 'y'
                    }
                    records.append(record)
                    
                mycursor.execute("SELECT member_id, (fs_name|| ' '|| ls_name) as member_name, value2 " \
                    "FROM member " \
                	"left join dropdown " \
                	"on user_type = value1 " \
                	"order by fs_name")
                	
                for row in mycursor:
                    record = {
                        'id': row['member_id'],
                        'name': row['member_name'],
                        'is_group': 'n',
                        'position': row["value2"]
                    }
                    records.append(record)
    except:
        return{
            'statusCode': 500,
            'body': json.dumps("Internal Error")
        }
                
    finally:
        mydb.close()
        
    return{
        'statusCode': 200,
        'body':records
    }  


def uploadAttachments(event, context):
    global dbScehma 
    dbScehma = event["stage-variables"]["schema"]
    
    client = boto3.client(
    'secretsmanager',
    region_name='ap-south-1',
    aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    aws_secret_access_key='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' )
    
    secret = event["stageVariables"]["secreat"]
    bucket = event["stageVariables"]["non_ocr_attachment"]
    
    resp = client.get_secret_value(
        SecretId= secret
    )
    secretDict = json.loads(resp['SecretString'])

    mydb = pymysql.connect(
        host=secretDict['host'],
        user=secretDict['username'],
        passwd=secretDict['password'],
        database=secretDict['dbname'],
        charset='utf8mb4',
        cursorclass=pymysql.cursors.DictCursor
    )
    
    s3 = boto3.client("s3")
    invoice_no = ""
    
    try:
        if "body" in event and event["body"]:
            
            post_data = base64.b64decode(event["body"])
            if "Content-Type" in event["headers"]:
                content_type = event["headers"]["Content-Type"]
                ct = "Content-Type: "+content_type+"\n"
                
            elif "content-type" in event["headers"]:
                content_type = event["headers"]["content-type"]
                ct = "content-type: "+content_type+"\n"
                
            if ct:
                
                msg = email.message_from_bytes(ct.encode()+post_data)
                
                if msg.is_multipart():
                    
                    multipart_content = {}
                    
                    for part in msg.get_payload():
                        multipart_content[part.get_param('name', header='content-disposition')] = part.get_payload(decode=True)
                    
                    file_id = " ".join(re.findall("(?<=')[^']+(?=')", str(multipart_content["file_id"])))
                    file_name = " ".join(re.findall("(?<=')[^']+(?=')", str(multipart_content["file_name"]))) 
                    mime_type = " ".join(re.findall("(?<=')[^']+(?=')", str(multipart_content["mime_type"])))
                    
                    up_file_name = str(file_id) + file_name
                    
                    s3_upload = s3.put_object(Bucket=bucket, Key=up_file_name, Body=multipart_content["file"])
                    
                    var_path = "https://l8m6p8a76e.execute-api.eu-central-1.amazonaws.com/dev/attachment?file_name=" + up_file_name
                    
                    with mydb.cursor() as mycursor:
                        defSchemaQuery = "use " + dbScehma
                        mycursor.execute(defSchemaQuery)
                        
                        sqlQuery = "INSERT INTO file_storage (file_id, name, mime_type, file_path, file_link) VALUES (?, ?, ?, ?, ?)"
                        values = (file_id, up_file_name, mime_type, bucket, var_path )
                        mycursor.execute(sqlQuery, values)
                        
                        mydb.commit()
                    
    except Exception as e:
        mydb.rollback()
        return {
            'statusCode': 500,
            'headers': {
                'Content-type': 'application/json', 
                'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
            },
            'body': json.dumps(str(e))
        }
        
    except pymysql.err.IntegrityError as e:
        mydb.rollback()
        return {
            'statusCode': 500,
            'headers': {
                'Content-type': 'application/json',
                'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
            },
            'body': json.dumps(str(e))
        }
        
    finally:
        mydb.close()
        
    return {
        'statusCode': 200,
        'headers': {
            'Content-type': 'application/json',
            'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,X-Amz-Security-Token,Authorization,X-Api-Key,X-Requested-With,Accept,Access-Control-Allow-Methods,Access-Control-Allow-Origin,Access-Control-Allow-Headers',
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT',
            'X-Requested-With': '*'
        },
        'body': json.dumps('File uploaded successfully!')
    }    

#query commented
def postChangPassword(event, context):
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # secreat = event["stage-variables"]["secreat"]
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='ap-south-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )

    # resp = client.get_secret_value(
    #     SecretId=secreat
    # )

    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()

    record = {
        "previouspassword": "",
        "proposedpassword": "",
        "accesstoken": "",
        "email": ""
    }

    try: 
        for value in event["body-json"]:
            if value in record:
                record[value] = event["body-json"][value]
                
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)

            
            cognito = boto3.client('cognito-idp')
            response = cognito.change_password(
                PreviousPassword = record["previouspassword"],
                ProposedPassword = record["proposedpassword"],
                AccessToken = record["accesstoken"]
            )
            
            if response:
                # print(response)
                pass
                
            #     sqlQuery = "update einvoice_db_portal.member set password = ? where email = %s"
            #     values = ( record["proposedpassword"], record["email"] )
            #     mycursor.execute( sqlQuery, values )
            
            # mydb.commit()

    except:
        return {
            'statuscode': 500,
            'body': json.dumps("Password Not Changed!")
        }
          
    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': json.dumps("Password Changed!")
    }  

#working fine
def einvoice_fetch_dropdown(event, context):
    global dbScehma

    dbScehma = ' DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='ap-south-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )
    
    # secret = event["stage-variables"]["secreat"]

    # resp = client.get_secret_value(
    #     SecretId= secret
    # )  

    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()
    headers_res = {
                    "Access-Control-Allow-Origin":"*",
                    "Access-Control-Allow-Headers":"Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token",
                    "Access-Control-Allow-Methods":"GET,POST,OPTIONS",
                    "Access-Control-Expose-Headers":"*"
                    
                }
    
    # records = {}
    drop_values = []
    
    
    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            if "drop_key" in event["params"]["querystring"]:
                
                drop_name =  event["params"]["querystring"]['drop_key']
                
                if drop_name == "approver":
                    
                    mycursor.execute('select group_id, name from "GROUP"')
                    
                    for row in mycursor:
                        record = { 
                        'drop_key': "approver",
                        'table_key'  : row['group_id'], 
                        'value2' : row['name'], 
                        'value3' : "y",
                        'value4' : ""
                        }
                        drop_values.append(record)
                        
                    mycursor.execute("select a.approver_id, a.member_id, b.fs_name, b.ls_name, b.email from approver a inner join member b on a.member_id = b.member_id")
                    
                    for row in mycursor:
                        record = { 
                        'drop_key': "Approver",
                        'table_key'  : row['approver_id'], 
                        'value2' : row['fs_name'] + " " + row["ls_name"], 
                        'value3' : "n",
                        'value4' : row["email"]
                        }
                        drop_values.append(record)
                        
                else:
                    query ="select * from dropdown where drop_key = ? order by value2"
                        
                    values = (str(drop_name),)
                    
                    mycursor.execute(query, values)
                    
                    for row in mycursor:
                        record = { 
                        'drop_key': row['drop_key'],
                        'table_key'  : row['value1'], 
                        'value2' : row['value2'], 
                        'value3' : row['value3'],
                        'value4' : row['value4'] 
                        }
                        drop_values.append(record)
                        
                
            elif "drop_keys" in event["params"]["querystring"]:  
                # print(list(event["params"]["querystring"]["drop_keys"]))
                l_ist = ['approver','group']
                mycursor.execute("select * from dropdown where drop_key in {}".format(tuple(l_ist)))
                
                for row in mycursor:
                    record = { 
                    'drop_key': row['drop_key'],
                    'table_key'  : row['value1'], 
                    'value2' : row['value2'], 
                    'value3' : row['value3'],
                    'value4' : row['value4'] 
                    }
                    drop_values.append(record)
                    
    
    except:
        return{
            'statusCode': 500,
            'headers': headers_res,
            'body': json.dumps("Key not found")
        }
                
    finally:
        mydb.close()
        
        
    return{
        'statusCode': 200,
        'headers': headers_res,
        'body':drop_values
    }    
   

# def getSearchedInvoice(event, context):
#     global dbScehma 
    
#     client = boto3.client(
#     'secretsmanager',
#     region_name='ap-south-1',
#     aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
#     aws_secret_access_key='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' )
#     secret = event["stage-variables"]["secreat"]
#     resp = client.get_secret_value(
#         SecretId= secret
#     ) 
#     secretDict = json.loads(resp['SecretString'])

#     mydb = pymysql.connect(
#         host=secretDict['host'],
#         user=secretDict['username'],
#         passwd=secretDict['password'],
#         database=secretDict['dbname'],
#         charset='utf8mb4',
#         cursorclass=pymysql.cursors.DictCursor
#     )
    
#     records = {}
#     user_settings = {}

#     try:
#         with mydb.cursor() as mycursor:
#             dbScehma = event["stage-variables"]["schema"]
            
#             defSchemaQuery = "use " + dbScehma
#             mycursor.execute(defSchemaQuery)
            
#             mycursor.execute("SELECT * FROM elipo_setting")
#             settings = mycursor.fetchall()

#             if settings:
#                 for each in settings:
#                     user_settings[each['key_name']] = each['value1']
#                 del settings
            
#             email = None
#             edit = None
            
#             values_pag = []
            
#             if "tabname" in event["params"]["querystring"]:
#                 tabname = event["params"]["querystring"]['tabname']
#                 start_idx = int(event["params"]["querystring"]['pageno'])
#                 end_idx = int(event["params"]["querystring"]['nooflines'])
                    
#                 start_idx = (start_idx -1 ) * end_idx
                    
            
#             if "userid" in event["params"]["querystring"]:
#                 email = event["params"]["querystring"]["userid"]
                
#             if "edit" in event["params"]["querystring"]:
#                 edit  = event["params"]["querystring"]["edit"]
                
#             if "invoice_no" in event["params"]["querystring"]:
                    
#                 invoiceNo = event["params"]["querystring"]["invoice_no"] 
                
#                 if edit:
                
#                     values = (invoiceNo,)
#                     mycursor.execute("select * from invoice_log where invoice_no = %s", values)
#                     invoice_log = mycursor.fetchone()
                    
#                     if invoice_log:
#                         values = (invoice_log["member_id"],)
#                         mycursor.execute("select fs_name, ls_name, email from member where member_id = %s", invoice_log["member_id"])
#                         member = mycursor.fetchone()
                        
#                         if email != member["email"]:
#                             msg = "Invoice is locked by " + str(member["fs_name"]) + " " + str(member["ls_name"])
                            
#                             return {
#                                 'statuscode': 204,
#                                 'body': json.dumps(msg)
#                             }
#                     else:
#                         if email:
#                             values = (email,)
#                             mycursor.execute("select member_id from member where email = %s", values)
#                             member = mycursor.fetchone()
                            
#                             if member:
#                                 values = ( invoiceNo, member["member_id"] )
#                                 mycursor.execute("insert into invoice_log (invoice_no, member_id) values (%s, %s)", values)
#                                 mydb.commit()
                    
#                 items = []
#                 invoice_files = []
#                 error_log = []
#                 record = []
#                 approvers = []
                    
#                 mycursor.execute("select attach_id, file_id, name, mime_type, file_link from file_storage where file_id = %s order by attach_id", event["params"]["querystring"]["invoice_no"])
#                 for row in mycursor:
#                     record = {
#                         'attach_id': row['attach_id'],  
#                         "invoice_id" : row["file_id"],
#                         "file_name" : row["name"],
#                         "mime_type" : row["mime_type"],
#                         "file_link" : row["file_link"]
#                     }
#                     invoice_files.append(record)
                    
#                 mycursor.execute("select a.member_id, a.approved_date, concat(b.fs_name, ' ', b.ls_name) as app_name " \
#                 	"from approval_history a " \
#                     "join member b " \
#                     "on a.member_id = b.member_id " \
#                     "where invoice_no = %s ",  event["params"]["querystring"]["invoice_no"] )
                        
#                 for row in mycursor:
#                     record = {
#                         "member_id": row["member_id"],
#                         "approved_date": str(row["approved_date"]),
#                         "member_name": row["app_name"]
#                     }
#                     approvers.append(record)
                    
#                 mycursor.execute("select * from sap_error_log where invoice_no = %s", event["params"]["querystring"]["invoice_no"])
#                 for row in mycursor:
#                     err = {
#                         "type": row["error_type"],
#                         "msg": row["error_msg"]
#                     }
#                     error_log.append(err)
                        
#                 values = (event["params"]["querystring"]["invoice_no"],)
#                 mycursor.execute("select a.*, b.vendor_name, c.value2 from invoice_header a left join vendor_master b " \
#                     "on a.supplier_id = b.vendor_no left join dropdown c on a.document_type = c.value1 where invoice_no = %s", values)
#                 invoice_header = mycursor.fetchone()
                    
#                 if invoice_header:
#                     mycursor.execute("select department_name from departmental_budget_master where department_id = %s", (invoice_header["department_id"],))
#                     department = mycursor.fetchone()
                    
#                 if department:
#                     department_name = department["department_name"]
                    
#                 else:
#                     department_name = None
                    
#                 records = {
#                     "user_invoice_id": invoice_header["user_invoice_id"],
#                     "invoice_no" :invoice_header["invoice_no"],
#                     "in_status" : invoice_header["in_status"],
#                     "from_supplier" : invoice_header["from_supplier"],
#                     "sap_invoice_no" : invoice_header['sap_invoice_no'],
#                     "ref_po_num" : invoice_header["ref_po_num"],
#                     "company_code" : invoice_header["company_code"],
#                     "invoice_date" : str(invoice_header["invoice_date"]),
#                     "posting_date" : str(invoice_header["posting_date"]),
#                     "baseline_date": str(invoice_header["baseline_date"]),
#                     "amount" : invoice_header["amount"],
#                     "currency" : invoice_header["currency"],
#                     "payment_method" : invoice_header["payment_method"],
#                     "gl_account" : invoice_header["gl_account"],
#                     "business_area" : invoice_header["business_area"],
#                     "supplier_id" : invoice_header["supplier_id"],
#                     "supplier_name" : invoice_header["supplier_name"],
#                     "approver_id" : invoice_header["approver_id"],
#                     "approver_comments" : invoice_header["approver_comments"],
#                     "modified_date" : str(invoice_header["modified_date"]),
#                     "cost_center" : invoice_header["cost_center"],
#                     "taxable_amount" : invoice_header["taxable_amount"],
#                     "discount_per" : invoice_header["discount_per"],
#                     "total_discount_amount" : invoice_header["total_discount_amount"],
#                     "is_igst" : invoice_header["is_igst"],
#                     "tax_per" : invoice_header["tax_per"],
#                     "cgst_tot_amt": invoice_header["cgst_tot_amt"],
#                     "sgst_tot_amt": invoice_header["sgst_tot_amt"],
#     	            "igst_tot_amt": invoice_header["igst_tot_amt"],
#                     "tds_per": invoice_header["tds_per"],
#                     "tds_tot_amt": invoice_header["tds_tot_amt"],
#                     "payment_terms" : invoice_header["payment_terms"],
#                     "adjustment" : invoice_header["adjustment"],
#                     "supplier_comments": invoice_header['supplier_comments'],
#                     "tcs": invoice_header["tcs"],
#                     "internal_order": invoice_header["internal_order"],
#                     "department_id": invoice_header["department_id"],
#                     "department_name": department_name,
#                     "npo": invoice_header["npo"],
#                     "app_comment": invoice_header["app_comment"],
#                     "document_type" : invoice_header["document_type"],
#                     "gstin": invoice_header["gstin"],
#                     "irn": invoice_header["irn"],
#                     "doc_type_desc": invoice_header["value2"],
#                     "items" : items,
#                     "files" : invoice_files,
#                     "error_log": error_log,
#                     "approvers": approvers
#                 }
                    
#                 mycursor.execute("select * from invoice_item where invoice_no = %s", values)
#                 for row in mycursor:
#                     record = {
#                       "item_no":row["item_no"],
#                       "ebelp": row["ebelp"],
#                       "hsn_code": row["hsn_code"],
#                       "material":row["material"],
#                       "material_desc":row["material_desc"],
#                       "quantity":row["quantity"],
#                       "unit":row["unit"],
#                       "amount":row["amount"],
#                       "currency": row["currency"],
#                       "amt_per_unit" : row["amt_per_unit"],
#                       "cgst_per": row["cgst_per"],
#                       "cgst_amount":row["cgst_amount"],
#                       "tax_code":row["tax_code"],
#                       "ref_po_no":row["ref_po_no"],
#                       "plant":row["plant"],
#                       "discount":row["discount"],
#                       "discount_amount" : row["discount_amount"],
#                       "gross_amount" : row["gross_amount"],
#                       "sgst_per": row["sgst_per"],
#                       "sgst_amount": row["sgst_amount"],
#                       "igst_per": row["igst_per"],
#                       "igst_amount": row["igst_amount"],
#                       "taxable_amount": row["taxable_amount"],
#                       "tax_value_amount": row["tax_value_amount"],
#                       "gl_account": row["gl_account"],
#                       "gst_per": row["gst_per"],
#                       "ocr_matched" : row["ocr_matched"],
#                       "cost_center": row["cost_center"],
#                       "qc_check": row["qc_check"]
#                       }
#                     items.append(record) 
                        
#                 records["items"] = items
                
#             elif "condn" in event["body-json"]:
                
#                 if "userid" in event["params"]["querystring"]:
#                     email = event["params"]["querystring"]["userid"]
#                     mycursor.execute("select user_type, member_id, group_id from member where email = %s", email)
#                     role = mycursor.fetchone()
                
#                 val_list = []
#                 member_detail = []
#                 pos = 0
#                 condn = ""
#                 records = {}
                
#                 val_list.append(tabname)
    
#                 for row in event["body-json"]["condn"]:
#                     if pos != 0:
#                         condn = condn + " and "
#                     elif pos == 0:
#                         pos = pos + 1
    
#                     if str(row["operator"]) == "like":
#                         val_list.append("%" + row["value"] + "%")
#                         condn = condn + str(row["field"]) + " " + str(row["operator"]) + " " + "%s"
#                     elif str(row["operator"]) == "between":
#                         val_list.append(row["value"])
#                         val_list.append(row["value2"])
#                         condn = condn + " " + str(row["field"]) + " between %s and %s "
#                     else:
#                         val_list.append(row["value"])
#                         condn = condn + str(row["field"]) + " " + str(row["operator"]) + " " + "%s"
                    
#                 if role["user_type"] == 'npoapp':
#                     condn = condn + " and a.npo = 'y' "
                
#                 if user_settings["app_assignment"] == 'on':
#                     sqlQuery = "SELECT a.invoice_no as invoice_no, a.ref_po_num, a.in_status, a.user_invoice_id, a.sap_invoice_no, a.invoice_date, a.posting_date, a.amount, " \
#                         "a.currency, a.supplier_name, a.approver_id, a.approver_comments, convert_tz(a.modified_date, '+00:00','+05:30' ) as modified_date , a.supplier_comments, " \
#                         "a.faulty_invoice, a.gstin, c.fs_name, c.ls_name, d.vendor_name, e.value2 as document_type " \
#                         "FROM invoice_header a " \
#                         "left outer join member c on a.working_person = c.member_id " \
#                         "left outer join dropdown e on a.document_type = e.value1 " \
#                         "left join vendor_master d " \
#                         "on a.supplier_id = d.vendor_no " \
#                         "where (sup_status is null or sup_status <> 'draft') and invoice_no in ( " \
#                         	"select invoice_no " \
#                         		"from assignment " \
#                                 "where ( isgroup = 'y' and app = %s ) or ( isgroup = 'n' and app = %s ) ) and in_status = %s "
                
#                 elif user_settings["app_assignment"] == 'off':
#                     sqlQuery = "SELECT a.invoice_no as invoice_no, a.ref_po_num, a.in_status, a.user_invoice_id, a.sap_invoice_no, a.invoice_date, a.posting_date, a.amount, " \
#                         "a.currency, a.supplier_name, a.approver_id, a.approver_comments, convert_tz(a.modified_date, '+00:00','+05:30' ) as modified_date , a.supplier_comments, " \
#                         "a.faulty_invoice, a.gstin, c.fs_name, c.ls_name, d.vendor_name, e.value2 as document_type " \
#                         "FROM invoice_header a " \
#                         "left outer join member c on a.working_person = c.member_id " \
#                         "left outer join dropdown e on a.document_type = e.value1 " \
#                         "left join vendor_master d " \
#                         "on a.supplier_id = d.vendor_no " \
#                         "where (sup_status is null or sup_status <> 'draft') and in_status = %s "
                                
#                 if condn:
#                     sqlQuery = sqlQuery + " and " + condn 
                    
#                 if user_settings["app_assignment"] == 'on':
#                     member_detail.append(role["group_id"])
#                     member_detail.append(role["member_id"])
#                 val_list.append(start_idx)
#                 val_list.append(end_idx)
                    
#                 sqlQuery = sqlQuery + " order by a.invoice_no desc limit %s,%s "
                
#                 values = member_detail + val_list
#                 mycursor.execute(sqlQuery, values)
                    
#                 invoice_obj = mycursor.fetchall()
                
#                 val_list.pop()
#                 val_list.pop()
                
#                 if user_settings["app_assignment"] == 'on':     
#                     sqlQuery = "select count(in_status) as invoice_count, in_status from invoice_header " \
#                         "where (sup_status is null or sup_status <> 'draft')  and invoice_no in ( " \
#                     	"select invoice_no " \
#                     		"from assignment " \
#                             "where ( isgroup = 'y' and app = %s ) or ( isgroup = 'n' and app = %s ) ) "
                
#                 elif user_settings["app_assignment"] == 'off':
#                     sqlQuery = "select count(in_status) as invoice_count, in_status from invoice_header where (sup_status is null or sup_status <> 'draft')"
                    
#                 if condn:
#                     sqlQuery = sqlQuery + "  and " + condn + " group by in_status"  
#                 else:
#                     sqlQuery = sqlQuery + " group by in_status"
                    
#                 del val_list[0]
    
#                 values = member_detail + val_list
#                 # print(sqlQuery, values)
#                 mycursor.execute(sqlQuery,values)
        
#                 countrec = {}
#                 total_count = 0
                
#                 for each in mycursor:
                    
#                     total_count = total_count + int(each["invoice_count"])
#                     countrec[each['in_status']] = each['invoice_count']
                    
#                 if "" in countrec:
#                     del countrec['']
                
#                 if None in countrec:
#                     del countrec[None]
                    
#                 if "new" not in countrec:
#                     countrec["new"] = 0
                        
#                 if "draft" not in countrec:
#                     countrec["draft"] = 0
                    
#                 if "inapproval" not in countrec:
#                     countrec["inapproval"] = 0
                        
#                 if "tosap" not in countrec: 
#                     countrec["tosap"] = 0
                        
#                 if "rejected" not in countrec:
#                     countrec["rejected"] = 0
                    
#                 countrec['total_count'] = total_count
                        
#                 invoices = []
#                 invoice_files = []
#                 groupid = []
#                 memberid = []
                    
#                 res = [sub['invoice_no'] for sub in invoice_obj]
                
#                 if res :
#                     if len(res) == 1:
#                         values = (res[0], )
#                         mycursor.execute("select * from approval where invoice_no = %s and referred_approver = 'n' order by invoice_no desc, approval_level", values)
#                         approvers_list = mycursor.fetchall()
                            
#                     elif len(res) > 1:
#                         mycursor.execute("select * from approval where referred_approver = 'n' and invoice_no in {} order by invoice_no desc, approval_level".format(tuple(res)))
#                         approvers_list = mycursor.fetchall()
                
#                     for row in approvers_list: 
                    
#                         if row["isgroup"] == 'y':
#                             groupid.append(row["approver"])
#                         elif row["isgroup"] == 'n':
#                             memberid.append(row["approver"])
                        
#                     format_strings_mem = ','.join(['%s'] * len(memberid))
                        
#                     approver_final = []  
                        
#                     if groupid and len(groupid) > 1:
#                         mycursor.execute("select group_id, name from " + dbScehma + ".group where group_id in {}".format(tuple(groupid)))
                    
#                     elif len(groupid) == 1:
#                         group = (groupid[0])
#                         sqlQuery = "select group_id, name from " + dbScehma + ".group where group_id = %s"
#                         mycursor.execute(sqlQuery, group)
                            
#                     for row in mycursor:
#                         temp1 = {
#                             "isgroup": "y",
#                             "approver": row["group_id"],
#                             "name": row["name"],
#                             "approval_type": ""
#                         }
#                         approver_final.append(temp1)
                        
#                     if memberid:
#                         sqlQuery = "select distinct a.approver, b.member_id, b.fs_name, b.ls_name from rule_approver a " \
#                             "inner join member b on a.approver = b.member_id where a.approver in (%s)" % format_strings_mem
#                         mycursor.execute(sqlQuery, tuple(memberid)) 
                        
#                         for row in mycursor:
                            
#                             if row["fs_name"] == None and row["ls_name"] == None:
#                                 name = None
                            
#                             elif row["fs_name"] == None and row["ls_name"] != None:
#                                 name = row["ls_name"]
                                
#                             elif row["fs_name"] != None and row["ls_name"] == None:
#                                 name = row["fs_name"]
                            
#                             else:
#                                 name = str(row["fs_name"]) + " " + str(row["ls_name"])
                                
#                             temp1 = {
#                                 "isgroup": "n",
#                                 "approver": row["approver"],
#                                 "name": str(name),
#                                 "approval_type": ""
#                             }
#                             approver_final.append(temp1)
                    
#                 if res and len(res) > 1:
#                     mycursor.execute("select attach_id, file_id, name, mime_type, file_link from file_storage where file_id in {}".format(tuple(res)))
                            
#                 elif res and len(res) == 1:
#                     values = (res[0],)
#                     mycursor.execute("select attach_id, file_id, name, mime_type, file_link from file_storage where file_id = %s", values)
                        
#                 for row in mycursor:
#                     record = {
#                         'attach_id': row['attach_id'],
#                         "invoice_id" : row["file_id"],
#                         "file_name" : row["name"],
#                         "mime_type" : row["mime_type"],
#                         "file_link" : row["file_link"]
#                     }   
#                     invoice_files.append(record)
                    
#                 if len(res) == 1:
#                     mycursor.execute("select m.member_id, concat(m.fs_name, ' ', m.ls_name) as approver_name, a.invoice_no, a.approval_level, a.approval_type " \
#                         "from member m " \
#                         "inner join approval_history a " \
#                     	"on m.member_id = a.member_id " \
#                         "where a.invoice_no = %s " \
#                         "order by a.invoice_no desc, a.approval_level desc ", res[0])
#                     sap_approved = mycursor.fetchall()
                            
#                 elif len(res) > 1:
#                     mycursor.execute("select m.member_id, concat(m.fs_name, ' ', m.ls_name) as approver_name, a.invoice_no , a.approval_level, a.approval_type " \
#                         "from member m " \
#                         "inner join approval_history a " \
#                         "on m.member_id = a.member_id " \
#                         "where a.invoice_no in {} " \
#                         "order by a.invoice_no desc, a.approval_level desc".format(tuple(res)))
#                     sap_approved = mycursor.fetchall()  
                    
#                 approval_type = []
#                 error_op = []
#                 sap_app_name = ""
#                 sap_app_list = []
                
#                 for row in invoice_obj:
#                     approvers = []
#                     files = []
                    
#                     for data in invoice_files:
                        
#                         if str(row["invoice_no"]) == str(data["invoice_id"]):
#                             temp = {
#                                 "file_name" : data["file_name"],
#                                 "mime_type" : data["mime_type"],
#                                 "file_link" : data["file_link"]
#                             }
#                             files.append(temp)
                            
#                     for app in sap_approved:
#                         if int(row["invoice_no"]) == int(app["invoice_no"]):    
#                             sap_app_name = app["approver_name"]
#                             temp2 = {
#                                 "isgroup" : 'n',
#                                 "approver" : app["member_id"],
#                                 "name": app["approver_name"],
#                                 "level" : app['approval_level'],
#                                 "approval_type": app["approval_type"],
#                                 "isapproved" : 'To ERP'
#                             }
#                             sap_app_list.append(temp2)
                        
#                     if row["fs_name"] == None and row["ls_name"] == None:
#                         name = None
                            
#                     elif row["fs_name"] == None and row["ls_name"] != None:
#                         name = row["ls_name"]
                        
#                     elif row["fs_name"] != None and row["ls_name"] == None:
#                         name = row["fs_name"]
                            
#                     else:
#                         name = str(row["fs_name"]) + " " + str(row["ls_name"])   
                        
#                     for temp in approvers_list:
#                         approval_type = None
                        
#                         if row["invoice_no"] == temp["invoice_no"]:
                                
#                             for temp1 in approver_final:
#                                 if temp["approver"] == temp1["approver"] and temp["isgroup"] == temp1["isgroup"]:
                                        
#                                     if temp["isapproved"] == "y":
#                                         status = "accepted"
#                                     elif temp["isapproved"] == 'n':
#                                         status = "inapproval" 
                                            
#                                     status_ap = {
#                                         "isgroup" : temp1["isgroup"],
#                                         "approver" : temp1["approver"],
#                                         "name": temp1["name"],
#                                         "level" : temp['approval_level'],
#                                         "approval_type": temp1["approval_type"],
#                                         "isapproved" : status
#                                     }
#                                     approvers.append(status_ap)
                        
#                     record = {
#                       "invoice_no":row["invoice_no"],
#                       "document_type": row["document_type"],
#                       "gstin": row["gstin"],
#                       "in_status":row["in_status"],
#                       "ref_po_no": row["ref_po_num"],
#                       "user_invoice_id" : row['user_invoice_id'],
#                       "working_person" : str(name),
#                       "sap_invoice_no" : row['sap_invoice_no'],
#                       "invoice_date":str(row["invoice_date"]),
#                       "posting_date":str(row["posting_date"]),
#                       "amount":row["amount"],
#                       "currency": row["currency"],
#                       "supplier_name":row["vendor_name"], 
#                       "approver_id":row["approver_id"],
#                       "approver_comments" : row["approver_comments"],
#                       "modified_date" : str(row["modified_date"]),
#                       "supplier_comments": row['supplier_comments'],
#                       "approver_name":sap_app_name,
#                       "approvers": approvers,
#                       "approval_type": approval_type,
#                       "error_log": error_op,
#                       "invoice_files" : files,
#                       'faulty_invoice': row['faulty_invoice'],
#                       'sap_approver': sap_app_list
#                     }
#                     invoices.append(record)
                        
#                 records["invoices"] = invoices
#                 records["count"] = countrec
                
#             else:
                
#                 records = {}
#                 condn = " " 
                
#                 if "userid" in event["params"]["querystring"]:
#                     email = event["params"]["querystring"]["userid"]
#                     mycursor.execute("select user_type, member_id, group_id from member where email = %s", email)
#                     role = mycursor.fetchone()
                
#                 values_pag.append(tabname)
#                 if user_settings["app_assignment"] == 'on':
#                     values_pag.append(role["group_id"])
#                     values_pag.append(role["member_id"])
#                 values_pag.append(start_idx)
#                 values_pag.append(end_idx)
                
#                 if role["user_type"] == 'npoapp':
#                     condn = " and a.npo = 'y' "
                    
#                 if user_settings["app_assignment"] == 'on':
#                     sqlQuery = "select a.invoice_no, a.in_status,a.sap_invoice_no, a.user_invoice_id, a.from_supplier, a.ref_po_num, a.company_code, a.invoice_date, a.posting_date, " \
#                         "a.amount, a.currency, a.gl_account, a.business_area, a.supplier_id, a.npo, a.approver_id, a.supplier_name, a.approver_comments, " \
#                         "convert_tz(a.modified_date, '+00:00','+05:30' ) as modified_date, a.working_person,a.supplier_comments, a.faulty_invoice, a.gstin, c.fs_name, " \
#                         "c.ls_name, d.vendor_name, e.value2 as document_type " \
#                         "FROM invoice_header a " \
#                         "left outer join member c " \
#                         "on a.working_person = c.member_id " \
#                         "left join vendor_master d " \
#                         "on a.supplier_id = d.vendor_no " \
#                         "left outer join dropdown e " \
#                         "on a.document_type = e.value1 " \
#                         "where in_status = %s and (sup_status is null or sup_status <> 'draft') and invoice_no in ( " \
#                     		"select invoice_no " \
#                     			"from assignment " \
#                                 "where ( isgroup = 'y' and app = %s ) or ( isgroup = 'n' and app = %s ) " \
#                         ") order by a.invoice_no desc limit %s, %s "
                        
#                 elif user_settings["app_assignment"] == 'off':
#                     sqlQuery = "select a.invoice_no, a.in_status,a.sap_invoice_no, a.user_invoice_id, a.from_supplier, a.ref_po_num, a.company_code, a.invoice_date, a.posting_date, " \
#                         "a.amount, a.currency, a.gl_account, a.business_area, a.supplier_id, a.npo, a.approver_id, a.supplier_name, a.approver_comments, " \
#                         "convert_tz(a.modified_date, '+00:00','+05:30' ) as modified_date, a.working_person,a.supplier_comments, a.faulty_invoice, a.gstin, c.fs_name, " \
#                         "c.ls_name, d.vendor_name, e.value2 as document_type " \
#                         "FROM invoice_header a " \
#                         "left outer join member c " \
#                         "on a.working_person = c.member_id " \
#                         "left join vendor_master d " \
#                         "on a.supplier_id = d.vendor_no " \
#                         "left outer join dropdown e " \
#                         "on a.document_type = e.value1 " \
#                         "where in_status = %s and (sup_status is null or sup_status <> 'draft') " \
#                         "order by a.invoice_no desc limit %s, %s "
                
#                 # sqlQuery = "select a.invoice_no, a.in_status,a.sap_invoice_no, a.user_invoice_id, a.from_supplier, a.ref_po_num, a.company_code, a.invoice_date, a.posting_date, " \
#                 #     "a.amount, a.currency, a.gl_account, a.business_area, a.supplier_id, a.npo, a.approver_id, a.supplier_name, a.approver_comments, " \
#                 #     "convert_tz(a.modified_date, '+00:00','+05:30' ) as modified_date, a.working_person,a.supplier_comments, a.faulty_invoice, a.gstin, c.fs_name, " \
#                 #     "c.ls_name, d.vendor_name, e.value2 as document_type " \
#                 #     "FROM invoice_header a " \
#                 #     "left outer join member c " \
#                 #     "on a.working_person = c.member_id " \
#                 #     "left join vendor_master d " \
#                 #     "on a.supplier_id = d.vendor_no " \
#                 #     "left outer join dropdown e " \
#                 #     "on a.document_type = e.value1 " \
#                 #     "where in_status = %s and (sup_status is null or sup_status <> 'draft') and invoice_no in ( " \
#                 #     	"select invoice_no " \
#                 #     		"from assignment " \
#                 #             "where ( isgroup = 'y' and app = %s ) or ( isgroup = 'n' and app = %s ) " \
#                 #     ") order by a.invoice_no desc limit %s, %s "
                    
#                 mycursor.execute(sqlQuery, tuple(values_pag))
#                 invoices_obj = mycursor.fetchall()
                
#                 invoices = []
#                 invoice_files = []
                    
#                 res = [sub['invoice_no'] for sub in invoices_obj]
                    
#                 groupid = []
#                 memberid = []
#                 error_log = []
                    
#                 if res:  
#                     if len(res) == 1:
#                         values = (res[0], )
#                         mycursor.execute("select * from sap_error_log where invoice_no = %s order by invoice_no desc", values)
#                         error_log = mycursor.fetchall()
                        
#                     elif len(res) > 1:
#                         mycursor.execute("select * from sap_error_log where invoice_no in {} order by invoice_no desc".format(tuple(res)))
#                         error_log = mycursor.fetchall()
                    
#                     if len(res) == 1:
#                         values = (res[0], )
#                         mycursor.execute("select * from approval where invoice_no = %s and referred_approver = 'n' order by invoice_no desc, approval_level", values)
#                         approvers_list = mycursor.fetchall()
                            
#                     elif len(res) > 1:
#                         mycursor.execute("select * from approval where referred_approver = 'n' and invoice_no in {} order by invoice_no desc, approval_level".format(tuple(res)))
#                         approvers_list = mycursor.fetchall()
                
#                     for row in approvers_list: 
                    
#                         if row["isgroup"] == 'y':
#                             groupid.append(row["approver"])
#                         elif row["isgroup"] == 'n':
#                             memberid.append(row["approver"])
                        
#                     format_strings_mem = ','.join(['%s'] * len(memberid))
                        
#                     approver_final = []  
                        
#                     if groupid and len(groupid) > 1:
#                         mycursor.execute("select group_id, name from " + dbScehma + ".group where group_id in {}".format(tuple(groupid)))
                    
#                     elif len(groupid) == 1:
#                         group = (groupid[0])
#                         sqlQuery = "select group_id, name from " + dbScehma + ".group where group_id = %s"
#                         mycursor.execute(sqlQuery, group)
                            
#                     for row in mycursor:
#                         temp1 = {
#                             "isgroup": "y",
#                             "approver": row["group_id"],
#                             "name": row["name"],
#                             "approval_type": ""
#                         }
#                         approver_final.append(temp1)
                        
#                     if memberid:
#                         sqlQuery = "select distinct a.approver, b.member_id, b.fs_name, b.ls_name from rule_approver a " \
#                             "inner join member b on a.approver = b.member_id where a.approver in (%s)" % format_strings_mem
#                         mycursor.execute(sqlQuery, tuple(memberid)) 
                        
#                         for row in mycursor:
                            
#                             if row["fs_name"] == None and row["ls_name"] == None:
#                                 name = None
                            
#                             elif row["fs_name"] == None and row["ls_name"] != None:
#                                 name = row["ls_name"]
                                
#                             elif row["fs_name"] != None and row["ls_name"] == None:
#                                 name = row["fs_name"]
                            
#                             else:
#                                 name = str(row["fs_name"]) + " " + str(row["ls_name"])
                                
#                             temp1 = {
#                                 "isgroup": "n",
#                                 "approver": row["approver"],
#                                 "name": str(name),
#                                 "approval_type": ""
#                             }
#                             approver_final.append(temp1)
                        
#                     if len(res) == 1:
#                         mycursor.execute("select attach_id, file_id, name, mime_type, file_link from file_storage where file_id = %s", res[0])
#                         file = mycursor.fetchall()
                        
#                     elif len(res) > 1:
#                         mycursor.execute("select attach_id, file_id, name, mime_type, file_link from file_storage where file_id in {}".format(tuple(res))) 
#                         file = mycursor.fetchall()
                    
#                     if len(res) == 1:
#                         mycursor.execute("select DISTINCT(concat(m.fs_name, ' ', m.ls_name)) as approver_name, a.invoice_no, a.approval_level, a.approval_type, a.member_id " \
#                             "from member m " \
#                             "inner join approval_history a " \
#                         	"on m.member_id = a.member_id " \
#                             "where a.invoice_no = %s " \
#                             "order by a.invoice_no desc, a.approval_level desc ", res[0])
#                         sap_approved = mycursor.fetchall()
                            
#                     elif len(res) > 1:
#                         mycursor.execute("select DISTINCT(concat(m.fs_name, ' ', m.ls_name)) as approver_name, a.invoice_no, a.approval_level, a.approval_type, a.member_id " \
#                             "from member m " \
#                             "inner join approval_history a " \
#                             "on m.member_id = a.member_id " \
#                             "where a.invoice_no in {} " \
#                             "order by a.invoice_no desc, a.approval_level ".format(tuple(res)))
#                         sap_approved = mycursor.fetchall()
                    
#                 sap_app_name = "" 
#                 for row in invoices_obj:
#                     approvers = []
#                     files = []
#                     error_op = []
#                     sap_app_list = []
                    
#                     for errors in error_log:
#                         if str(row["invoice_no"]) == str(errors["invoice_no"]):
#                             err = {
#                                 "invoice_no" : errors["invoice_no"],
#                                 "type" : errors["error_type"],
#                                 "msg" : errors["error_msg"]
#                             }
#                             error_op.append(err)
                        
#                     for data in file: 
#                             if str(row["invoice_no"]) == str(data["file_id"]):
#                                 temp = {
#                                     'attach_id': data['attach_id'],
#                                     "file_name" : data["name"],
#                                     "mime_type" : data["mime_type"],
#                                     "file_link" : data["file_link"]
#                                 }
#                                 files.append(temp)
                        
#                     for temp in approvers_list:
#                         approval_type = None
                        
#                         if row["invoice_no"] == temp["invoice_no"]:
                                
#                             for temp1 in approver_final:
#                                 if temp["approver"] == temp1["approver"] and temp["isgroup"] == temp1["isgroup"]:
                                        
#                                     if temp["isapproved"] == "y":
#                                         status = "accepted"
#                                     elif temp["isapproved"] == 'n':
#                                         status = "inapproval" 
                                            
#                                     status_ap = {
#                                         "isgroup" : temp1["isgroup"],
#                                         "approver" : temp1["approver"],
#                                         "name": temp1["name"],
#                                         "level" : temp['approval_level'],
#                                         "approval_type": temp1["approval_type"],
#                                         "isapproved" : status
#                                     }
#                                     approvers.append(status_ap)
                                    
#                     for app in sap_approved:
#                         if int(row["invoice_no"]) == int(app["invoice_no"]):
#                             temp2 = {
#                                 "isgroup" : 'n',
#                                 "approver" : app["member_id"],
#                                 "name": app["approver_name"],
#                                 "level" : app['approval_level'],
#                                 "approval_type": app["approval_type"],
#                                 "isapproved" : 'To ERP'
#                             }
#                             sap_app_list.append(temp2)
                             
#                     if row["fs_name"] == None and row["ls_name"] == None:
#                         name = None
                            
#                     elif row["fs_name"] == None and row["ls_name"] != None:
#                         name = row["ls_name"]
                        
#                     elif row["fs_name"] != None and row["ls_name"] == None:
#                         name = row["fs_name"]
                            
#                     else:
#                         name = str(row["fs_name"]) + " " + str(row["ls_name"])
                        
#                     approval_type = None
                    
#                     if tabname == "tosap":
#                         for each in sap_approved:
#                             if each["invoice_no"] == row["invoice_no"]:
#                                 approval_type = each["approval_type"]
#                                 break
                            
#                     else:
#                         for each in approvers_list:
#                             if each["invoice_no"] == row["invoice_no"]:
#                                 approval_type = each["approval_type"]
#                                 break
                        
#                     if row["npo"] == 'y':
#                         invoice_type = 'NPO'
                        
#                     elif row["npo"] == None and row["ref_po_num"] == None:
#                         invoice_type = 'None'
                        
#                     elif row["ref_po_num"] != None:
#                         invoice_type = 'PO'
                        
#                     record = {
#                         "invoice_no" :row["invoice_no"],
#                         "document_type": row["document_type"],
#                         "gstin": row["gstin"],
#                         "ref_po_no": row["ref_po_num"],
#                         "in_status" : row["in_status"],
#                         "invoice_type": invoice_type,
#                         "user_invoice_id" : row['user_invoice_id'],
#                         "sap_invoice_no" : row['sap_invoice_no'],
#                         "invoice_date" : str(row["invoice_date"]),
#                         "posting_date" : str(row["posting_date"]),
#                         "amount" : row["amount"],
#                         "currency": row["currency"],
#                         "supplier_id" : row["supplier_id"],
#                         "supplier_name" : row["vendor_name"],
#                         "approver_name": sap_app_name,
#                         "modified_date": str(row["modified_date"]),
#                         "working_person": str(name),
#                         "supplier_comments":row["supplier_comments"],
#                         "approval_type": approval_type,
#                         "invoice_files":files,
#                         "approvers":approvers,
#                         "sap_approver": sap_app_list,
#                         "error_log": error_op,
#                         'faulty_invoice': row['faulty_invoice']  
#                     }
#                     invoices.append(record)
#                 records["invoices"] = invoices

#     except: 
#         return {
#         'statuscode': 500,
#         'body': json.dumps("Internal Failure")   
#     }
            
#     finally:
#         mydb.close()
        
#     return {
#         'statuscode': 200,
#         'body': records
#     }


#complex query
def getSearchedInvoice(event, context):
    global dbScehma 
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='eu-central-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )
    # secret = event["stage-variables"]["secreat"]
    # resp = client.get_secret_value(
    #     SecretId= secret
    # ) 
    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()
    
    records = {}
    user_settings = {}

    try:
        with mydb.cursor() as mycursor:
            dbScehma = ' DBADMIN '
            
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            mycursor.execute("SELECT * FROM elipo_setting")
            settings = mycursor.fetchall()

            if settings:
                for each in settings:
                    user_settings[each['key_name']] = each['value1']
                del settings
            
            email = None
            edit = None
            
            values_pag = []
            
            if "tabname" in event["params"]["querystring"]:
                tabname = event["params"]["querystring"]['tabname']
                start_idx = int(event["params"]["querystring"]['pageno'])
                end_idx = int(event["params"]["querystring"]['nooflines'])
                    
                start_idx = (start_idx -1 ) * end_idx
                    
            
            if "userid" in event["params"]["querystring"]:
                email = event["params"]["querystring"]["userid"]
                
            if "edit" in event["params"]["querystring"]:
                edit  = event["params"]["querystring"]["edit"]
                
            if "invoice_no" in event["params"]["querystring"]:
                    
                invoiceNo = event["params"]["querystring"]["invoice_no"] 
                
                if edit:
                
                    values = (invoiceNo,)
                    mycursor.execute("select * from invoice_log where invoice_no = ?", values)
                    invoice_log = mycursor.fetchone()
                    
                    if invoice_log:
                        values = (invoice_log["member_id"],)
                        mycursor.execute("select fs_name, ls_name, email from member where member_id = ?", invoice_log["member_id"])
                        member = mycursor.fetchone()
                        
                        if email != member["email"]:
                            msg = "Invoice is locked by " + str(member["fs_name"]) + " " + str(member["ls_name"])
                            
                            return {
                                'statuscode': 204,
                                'body': json.dumps(msg)
                            }
                    else:
                        if email:
                            values = (email,)
                            mycursor.execute("select member_id from member where email = ?", values)
                            member = mycursor.fetchone()
                            
                            if member:
                                values = ( invoiceNo,' ', member["member_id"] )
                                mycursor.execute("insert into invoice_log (invoice_no,is_refered, member_id) values (?, ?, ?)", values)
                                mydb.commit()
                    
                items = []
                invoice_files = []
                error_log = []
                record = []
                approvers = []
                    
                mycursor.execute("select attach_id, file_id, name, mime_type, file_link from file_storage where file_id = ? order by attach_id", event["params"]["querystring"]["invoice_no"])
                for row in mycursor:
                    record = {
                        'attach_id': row['attach_id'],  
                        "invoice_id" : row["file_id"],
                        "file_name" : row["name"],
                        "mime_type" : row["mime_type"],
                        "file_link" : row["file_link"]
                    }
                    invoice_files.append(record)
                    
                mycursor.execute("select a.member_id, a.approved_date, (b.fs_name|| ' '|| b.ls_name) as app_name " \
                    "from approval_history a " \
                    "join member b " \
                    "on a.member_id = b.member_id " \
                    "where invoice_no = ? ",  event["params"]["querystring"]["invoice_no"] )
                        
                for row in mycursor:
                    record = {
                        "member_id": row["member_id"],
                        "approved_date": str(row["approved_date"]),
                        "member_name": row["app_name"]
                    }
                    approvers.append(record)
                    
                mycursor.execute("select * from sap_error_log where invoice_no = ?", event["params"]["querystring"]["invoice_no"])
                for row in mycursor:
                    err = {
                        "type": row["error_type"],
                        "msg": row["error_msg"]
                    }
                    error_log.append(err)
                        
                values = (event["params"]["querystring"]["invoice_no"],)
                mycursor.execute("select a.*, b.vendor_name, c.value2 from invoice_header a left join vendor_master b " \
                    "on a.supplier_id = b.vendor_no left join dropdown c on a.document_type = c.value1 where invoice_no = ?", values)
                invoice_header = mycursor.fetchone()
                    
                if invoice_header:
                    mycursor.execute("select department_name from departmental_budget_master where department_id = ?", (invoice_header["department_id"],))
                    department = mycursor.fetchone()
                    
                if department:
                    department_name = department["department_name"]
                    
                else:
                    department_name = None
                
                mycursor.execute("select value1 from elipo_setting where key_name = 'country'")
                country = mycursor.fetchone()
                    
                records = {
                    "user_invoice_id": invoice_header["user_invoice_id"],
                    "invoice_no" :invoice_header["invoice_no"],
                    "in_status" : invoice_header["in_status"],
                    "from_supplier" : invoice_header["from_supplier"],
                    "sap_invoice_no" : invoice_header['sap_invoice_no'],
                    "company_code":invoice_header["company_code"],
                    "country" : country["value1"],
                    "ref_po_num" : invoice_header["ref_po_num"],
                    "invoice_date" : str(invoice_header["invoice_date"]),
                    "posting_date" : str(invoice_header["posting_date"]),
                    "baseline_date": str(invoice_header["baseline_date"]),
                    "amount" : invoice_header["amount"],
                    "currency" : invoice_header["currency"],
                    "payment_method" : invoice_header["payment_method"],
                    "gl_account" : invoice_header["gl_account"],
                    "business_area" : invoice_header["business_area"],
                    "supplier_id" : invoice_header["supplier_id"],
                    "supplier_name" : invoice_header["supplier_name"],
                    "approver_id" : invoice_header["approver_id"],
                    "approver_comments" : invoice_header["approver_comments"],
                    "modified_date" : str(invoice_header["modified_date"]),
                    "cost_center" : invoice_header["cost_center"],
                    "taxable_amount" : invoice_header["taxable_amount"],
                    "discount_per" : invoice_header["discount_per"],
                    "total_discount_amount" : invoice_header["total_discount_amount"],
                    "is_igst" : invoice_header["is_igst"],
                    "tax_per" : invoice_header["tax_per"],
                    "cgst_tot_amt": invoice_header["cgst_tot_amt"],
                    "sgst_tot_amt": invoice_header["sgst_tot_amt"],
                    "igst_tot_amt": invoice_header["igst_tot_amt"],
                    "tds_per": invoice_header["tds_per"],
                    "tds_tot_amt": invoice_header["tds_tot_amt"],
                    "payment_terms" : invoice_header["payment_terms"],
                    "adjustment" : invoice_header["adjustment"],
                    "supplier_comments": invoice_header['supplier_comments'],
                    "tcs": invoice_header["tcs"],
                    "internal_order": invoice_header["internal_order"],
                    "department_id": invoice_header["department_id"],
                    "department_name": department_name,
                    "npo": invoice_header["npo"],
                    "app_comment": invoice_header["app_comment"],
                    "document_type" : invoice_header["document_type"],
                    "gstin": invoice_header["gstin"],
                    "irn": invoice_header["irn"],
                    "doc_type_desc": invoice_header["value2"],
                    "items" : items,
                    "files" : invoice_files,
                    "error_log": error_log,
                    "approvers": approvers
                }
                    
                mycursor.execute("select * from invoice_item where invoice_no = ?", values)
                # mycursor = mycursor.fetchall()
                for row in mycursor:
                    record = {
                    "item_no":row["item_no"],
                    "ebelp": row["ebelp"],
                    "hsn_code": row["hsn_code"],
                    "material":row["material"],
                    "material_desc":row["material_desc"],
                    "quantity":row["quantity"],
                    "unit":row["unit"],
                    "amount":row["amount"],
                    "currency": row["currency"],
                    "amt_per_unit" : row["amt_per_unit"],
                    "cgst_per": row["cgst_per"],
                    "cgst_amount":row["cgst_amount"],
                    "tax_code":row["tax_code"],
                    "ref_po_no":row["ref_po_no"],
                    "plant":row["plant"],
                    "discount":row["discount"],
                    "discount_amount" : row["discount_amount"],
                    "gross_amount" : row["gross_amount"],
                    "sgst_per": row["sgst_per"],
                    "sgst_amount": row["sgst_amount"],
                    "igst_per": row["igst_per"],
                    "igst_amount": row["igst_amount"],
                    "taxable_amount": row["taxable_amount"],
                    "tax_value_amount": row["tax_value_amount"],
                    "gl_account": row["gl_account"],
                    "gst_per": row["gst_per"],
                    "ocr_matched" : row["ocr_matched"],
                    "cost_center": row["cost_center"],
                    "qc_check": row["qc_check"]
                    }
                    items.append(record) 
                        
                records["items"] = items
                
            elif "condn" in event["body-json"]:
                
                if "userid" in event["params"]["querystring"]:
                    email = event["params"]["querystring"]["userid"]
                    mycursor.execute("select user_type, member_id, group_id from member where email = ?", email)
                    role = mycursor.fetchone()
                
                val_list = []
                member_detail = []
                pos = 0
                condn = ""
                records = {}
                
                val_list.append(tabname)
    
                for row in event["body-json"]["condn"]:
                    if pos != 0:
                        condn = condn + " and "
                    elif pos == 0:
                        pos = pos + 1
    
                    if str(row["operator"]) == "like":
                        val_list.append("%" + row["value"] + "%")
                        condn = condn + str(row["field"]) + " " + str(row["operator"]) + " " + "?"
                    elif str(row["operator"]) == "between":
                        val_list.append(row["value"])
                        val_list.append(row["value2"])
                        condn = condn + " " + str(row["field"]) + " between ? and ? "
                    else:
                        val_list.append(row["value"])
                        condn = condn + str(row["field"]) + " " + str(row["operator"]) + " " + "?"
                    
                if role["user_type"] == 'npoapp':
                    condn = condn + " and a.npo = 'y' "
                
                if user_settings["app_assignment"] == 'on':
                    sqlQuery = "SELECT a.invoice_no as invoice_no, a.ref_po_num, a.in_status,a.sup_status , a.user_invoice_id, a.sap_invoice_no, a.invoice_date, a.posting_date, a.amount, " \
                        "a.currency, a.supplier_name, a.approver_id, a.approver_comments, utctolocal(a.modified_date, 'UTC' ) as modified_date , a.supplier_comments, " \
                        "a.faulty_invoice, a.gstin, c.fs_name, c.ls_name, d.vendor_name, e.value2 as document_type " \
                        "FROM invoice_header a " \
                        "left outer join member c on a.working_person = c.member_id " \
                        "left outer join dropdown e on a.document_type = e.value1 " \
                        "left join vendor_master d " \
                        "on a.supplier_id = d.vendor_no " \
                        "where (sup_status is null or sup_status <> 'draft') and invoice_no in ( " \
                            "select invoice_no " \
                                "from assignment " \
                                "where ( isgroup = 'y' and app = ? ) or ( isgroup = 'n' and app = ? ) ) and in_status = ? "
                
                elif user_settings["app_assignment"] == 'off':
                    sqlQuery = "SELECT a.invoice_no as invoice_no, a.ref_po_num, a.in_status,a.sup_status, a.user_invoice_id, a.sap_invoice_no, a.invoice_date, a.posting_date, a.amount, " \
                        "a.currency, a.supplier_name, a.approver_id, a.approver_comments, utctolocal(a.modified_date, 'UTC' ) as modified_date , a.supplier_comments, " \
                        "a.faulty_invoice, a.gstin, c.fs_name, c.ls_name, d.vendor_name, e.value2 as document_type " \
                        "FROM invoice_header a " \
                        "left outer join member c on a.working_person = c.member_id " \
                        "left outer join dropdown e on a.document_type = e.value1 " \
                        "left join vendor_master d " \
                        "on a.supplier_id = d.vendor_no " \
                        "where (in_status is null or in_status <> 'draft') and sup_status = ? "
                                
                if condn:
                    sqlQuery = sqlQuery + " and " + condn 
                    
                if user_settings["app_assignment"] == 'on':
                    member_detail.append(role["group_id"])
                    member_detail.append(role["member_id"])
                val_list.append(end_idx)
                val_list.append(start_idx)
                    
                sqlQuery = sqlQuery + " order by a.invoice_no desc limit ? offset ? "
                
                values = member_detail + val_list
                mycursor.execute(sqlQuery, values)
                    
                invoice_obj = mycursor.fetchall()
                
                val_list.pop()
                val_list.pop()
                
                if user_settings["app_assignment"] == 'on':     
                    sqlQuery = "select count(in_status) as invoice_count, in_status from invoice_header " \
                        "where (sup_status is null or sup_status <> 'draft')  and invoice_no in ( " \
                        "select invoice_no " \
                            "from assignment " \
                            "where ( isgroup = 'y' and app = ? ) or ( isgroup = 'n' and app = ? ) ) "
                
                elif user_settings["app_assignment"] == 'off':
                    sqlQuery = "select count(sup_status) as invoice_count, sup_status from invoice_header where (sup_status is not null )"
                    
                if condn:
                    sqlQuery = sqlQuery + "  and " + condn + " group by sup_status"  
                else:
                    sqlQuery = sqlQuery + " group by sup_status"
                    
                del val_list[0]
    
                values = member_detail + val_list
                # print(sqlQuery, values)
                mycursor.execute(sqlQuery,values)
        
                countrec = {}
                total_count = 0
                
                for each in mycursor:
                    
                    total_count = total_count + int(each["invoice_count"])
                    countrec[each['sup_status']] = each['invoice_count']
                    
                if "" in countrec:
                    del countrec['']
                
                if None in countrec:
                    del countrec[None]
                    
                if "new" not in countrec:
                    countrec["new"] = 0
                        
                if "draft" not in countrec:
                    countrec["draft"] = 0
                    
                if "inapproval" not in countrec:
                    countrec["inapproval"] = 0
                        
                if "tosap" not in countrec: 
                    countrec["tosap"] = 0
                        
                if "rejected" not in countrec:
                    countrec["rejected"] = 0
                    
                countrec['total_count'] = total_count
                        
                invoices = []
                invoice_files = []
                groupid = []
                memberid = []
                    
                res = [str(sub['invoice_no']) for sub in invoice_obj]
                
                if res :
                    if len(res) == 1:
                        values = (res[0], )
                        mycursor.execute("select * from approval where invoice_no = ? and referred_approver = 'n' order by invoice_no desc, approval_level", values)
                        approvers_list = mycursor.fetchall()
                            
                    elif len(res) > 1:
                        mycursor.execute("select * from approval where referred_approver = 'n' and invoice_no in {} order by invoice_no desc, approval_level".format(tuple(res)))
                        approvers_list = mycursor.fetchall()
                
                    for row in approvers_list: 
                    
                        if row["isgroup"] == 'y':
                            groupid.append(row["approver"])
                        elif row["isgroup"] == 'n':
                            memberid.append(row["approver"])
                        
                    format_strings_mem = ','.join(['?'] * len(memberid))
                        
                    approver_final = []  
                        
                    if groupid and len(groupid) > 1:
                        mycursor.execute('select group_id, name from "GROUP" where group_id in {}'.format(tuple(groupid)))
                    
                    elif len(groupid) == 1:
                        group = (groupid[0])
                        sqlQuery = 'select group_id, name from "GROUP" where group_id = ?'
                        mycursor.execute(sqlQuery, group)
                            
                    for row in mycursor:
                        temp1 = {
                            "isgroup": "y",
                            "approver": row["group_id"],
                            "name": row["name"],
                            "approval_type": ""
                        }
                        approver_final.append(temp1)
                        
                    if memberid:
                        sqlQuery = "select distinct a.approver, b.member_id, b.fs_name, b.ls_name from rule_approver a " \
                            "inner join member b on a.approver = b.member_id where a.approver in (" + format_strings_mem+")"
                        mycursor.execute(sqlQuery, tuple(memberid)) 
                        
                        for row in mycursor:
                            
                            if row["fs_name"] == None and row["ls_name"] == None:
                                name = None
                            
                            elif row["fs_name"] == None and row["ls_name"] != None:
                                name = row["ls_name"]
                                
                            elif row["fs_name"] != None and row["ls_name"] == None:
                                name = row["fs_name"]
                            
                            else:
                                name = str(row["fs_name"]) + " " + str(row["ls_name"])
                                
                            temp1 = {
                                "isgroup": "n",
                                "approver": row["approver"],
                                "name": str(name),
                                "approval_type": ""
                            }
                            approver_final.append(temp1)
                    
                if res and len(res) > 1:
                    mycursor.execute("select attach_id, file_id, name, mime_type, file_link from file_storage where file_id in {}".format(tuple(res)))
                            
                elif res and len(res) == 1:
                    values = (res[0],)
                    mycursor.execute("select attach_id, file_id, name, mime_type, file_link from file_storage where file_id = ?", values)
                        
                for row in mycursor:
                    record = {
                        'attach_id': row['attach_id'],
                        "invoice_id" : row["file_id"],
                        "file_name" : row["name"],
                        "mime_type" : row["mime_type"],
                        "file_link" : row["file_link"]
                    }   
                    invoice_files.append(record)
                    
                if len(res) == 1:
                    mycursor.execute("select m.member_id, (m.fs_name|| ' '||m.ls_name) as approver_name, a.invoice_no, a.approval_level, a.approval_type " \
                        "from member m " \
                        "inner join approval_history a " \
                        "on m.member_id = a.member_id " \
                        "where a.invoice_no = ? " \
                        "order by a.invoice_no desc, a.approval_level desc ", res[0])
                    sap_approved = mycursor.fetchall()
                            
                elif len(res) > 1:
                    mycursor.execute("select m.member_id, (m.fs_name|| ' '|| m.ls_name) as approver_name, a.invoice_no , a.approval_level, a.approval_type " \
                        "from member m " \
                        "inner join approval_history a " \
                        "on m.member_id = a.member_id " \
                        "where a.invoice_no in {} " \
                        "order by a.invoice_no desc, a.approval_level desc".format(tuple(res)))
                    sap_approved = mycursor.fetchall()  
                    
                approval_type = []
                error_op = []
                sap_app_name = ""
                sap_app_list = []
                
                for row in invoice_obj:
                    approvers = []
                    files = []
                    
                    for data in invoice_files:
                        
                        if str(row["invoice_no"]) == str(data["invoice_id"]):
                            temp = {
                                "file_name" : data["file_name"],
                                "mime_type" : data["mime_type"],
                                "file_link" : data["file_link"]
                            }
                            files.append(temp)
                            
                    for app in sap_approved:
                        if int(row["invoice_no"]) == int(app["invoice_no"]):    
                            sap_app_name = app["approver_name"]
                            temp2 = {
                                "isgroup" : 'n',
                                "approver" : app["member_id"],
                                "name": app["approver_name"],
                                "level" : app['approval_level'],
                                "approval_type": app["approval_type"],
                                "isapproved" : 'To ERP'
                            }
                            sap_app_list.append(temp2)
                        
                    if row["fs_name"] == None and row["ls_name"] == None:
                        name = None
                            
                    elif row["fs_name"] == None and row["ls_name"] != None:
                        name = row["ls_name"]
                        
                    elif row["fs_name"] != None and row["ls_name"] == None:
                        name = row["fs_name"]
                            
                    else:
                        name = str(row["fs_name"]) + " " + str(row["ls_name"])   
                        
                    for temp in approvers_list:
                        approval_type = None
                        
                        if row["invoice_no"] == temp["invoice_no"]:
                                
                            for temp1 in approver_final:
                                if temp["approver"] == temp1["approver"] and temp["isgroup"] == temp1["isgroup"]:
                                        
                                    if temp["isapproved"] == "y":
                                        status = "accepted"
                                    elif temp["isapproved"] == 'n':
                                        status = "inapproval" 
                                            
                                    status_ap = {
                                        "isgroup" : temp1["isgroup"],
                                        "approver" : temp1["approver"],
                                        "name": temp1["name"],
                                        "level" : temp['approval_level'],
                                        "approval_type": temp1["approval_type"],
                                        "isapproved" : status
                                    }
                                    approvers.append(status_ap)
                        
                    record = {
                    "invoice_no":row["invoice_no"],
                    "document_type": row["document_type"],
                    "gstin": row["gstin"],
                    "in_status":row["in_status"],
                    "sup_status":row["sup_status"],
                    "ref_po_no": row["ref_po_num"],
                    "user_invoice_id" : row['user_invoice_id'],
                    "working_person" : str(name),
                    "sap_invoice_no" : row['sap_invoice_no'],
                    "invoice_date":str(row["invoice_date"]),
                    "posting_date":str(row["posting_date"]),
                    "amount":row["amount"],
                    "currency": row["currency"],
                    "supplier_name":row["vendor_name"], 
                    "approver_id":row["approver_id"],
                    "approver_comments" : row["approver_comments"],
                    "modified_date" : str(row["modified_date"]),
                    "supplier_comments": row['supplier_comments'],
                    "approver_name":sap_app_name,
                    "approvers": approvers,
                    "approval_type": approval_type,
                    "error_log": error_op,
                    "invoice_files" : files,
                    'faulty_invoice': row['faulty_invoice'],
                    'sap_approver': sap_app_list
                    }
                    invoices.append(record)
                        
                records["invoices"] = invoices
                records["count"] = countrec
                
            else:
                
                records = {}
                condn = " " 
                
                if "userid" in event["params"]["querystring"]:
                    email = event["params"]["querystring"]["userid"]
                    mycursor.execute("select user_type, member_id, group_id from member where email = ?", email)
                    role = mycursor.fetchone()
                
                values_pag.append(tabname)
                if user_settings["app_assignment"] == 'on':
                    values_pag.append(role["group_id"])
                    values_pag.append(role["member_id"])
                values_pag.append(end_idx)
                values_pag.append(start_idx)
                
                if role["user_type"] == 'npoapp':
                    condn = " and a.npo = 'y' "
                    
                if user_settings["app_assignment"] == 'on':
                    sqlQuery = "select a.invoice_no, a.in_status,a.sup_status,a.sap_invoice_no, a.user_invoice_id, a.from_supplier, a.ref_po_num, a.company_code, a.invoice_date, a.posting_date, " \
                        "a.amount, a.currency, a.gl_account, a.business_area, a.supplier_id, a.npo, a.approver_id, a.supplier_name, a.approver_comments, " \
                        "UTCTOLOCAL(a.modified_date, 'UTC' ) as modified_date, a.working_person,a.supplier_comments, a.faulty_invoice, a.gstin, c.fs_name, " \
                        "c.ls_name, d.vendor_name, e.value2 as document_type " \
                        "FROM invoice_header a " \
                        "left outer join member c " \
                        "on a.working_person = c.member_id " \
                        "left join vendor_master d " \
                        "on a.supplier_id = d.vendor_no " \
                        "left outer join dropdown e " \
                        "on a.document_type = e.value1 " \
                        "where in_status = ? and (sup_status is null or sup_status <> 'draft') and invoice_no in ( " \
                            "select invoice_no " \
                                "from assignment " \
                                "where ( isgroup = 'y' and app = ? ) or ( isgroup = 'n' and app = ? ) " \
                        ") order by a.invoice_no desc limit ? offset ? "
                        
                elif user_settings["app_assignment"] == 'off':
                    sqlQuery = "select a.invoice_no, a.in_status,a.sup_status,a.sap_invoice_no, a.user_invoice_id, a.from_supplier, a.ref_po_num, a.company_code, a.invoice_date, a.posting_date, " \
                        "a.amount, a.currency, a.gl_account, a.business_area, a.supplier_id, a.npo, a.approver_id, a.supplier_name, a.approver_comments, " \
                        "UTCTOLOCAL(a.modified_date, 'UTC') as modified_date, a.working_person,a.supplier_comments, a.faulty_invoice, a.gstin, c.fs_name, " \
                        "c.ls_name, d.vendor_name, e.value2 as document_type " \
                        "FROM invoice_header a " \
                        "left outer join member c " \
                        "on a.working_person = c.member_id " \
                        "left join vendor_master d " \
                        "on a.supplier_id = d.vendor_no " \
                        "left outer join dropdown e " \
                        "on a.document_type = e.value1 " \
                        "where in_status = ? and (sup_status is null or sup_status <> 'draft') " \
                        "order by a.invoice_no desc limit ? offset ? "
                
                # sqlQuery = "select a.invoice_no, a.in_status,a.sap_invoice_no, a.user_invoice_id, a.from_supplier, a.ref_po_num, a.company_code, a.invoice_date, a.posting_date, " \
                #     "a.amount, a.currency, a.gl_account, a.business_area, a.supplier_id, a.npo, a.approver_id, a.supplier_name, a.approver_comments, " \
                #     "convert_tz(a.modified_date, '+00:00','+05:30' ) as modified_date, a.working_person,a.supplier_comments, a.faulty_invoice, a.gstin, c.fs_name, " \
                #     "c.ls_name, d.vendor_name, e.value2 as document_type " \
                #     "FROM invoice_header a " \
                #     "left outer join member c " \
                #     "on a.working_person = c.member_id " \
                #     "left join vendor_master d " \
                #     "on a.supplier_id = d.vendor_no " \
                #     "left outer join dropdown e " \
                #     "on a.document_type = e.value1 " \
                #     "where in_status = %s and (sup_status is null or sup_status <> 'draft') and invoice_no in ( " \
                #     	"select invoice_no " \
                #     		"from assignment " \
                #             "where ( isgroup = 'y' and app = %s ) or ( isgroup = 'n' and app = %s ) " \
                #     ") order by a.invoice_no desc limit %s, %s "
                    
                mycursor.execute(sqlQuery, tuple(values_pag))
                invoices_obj = mycursor.fetchall()
                
                invoices = []
                invoice_files = []
                    
                res = [str(sub['invoice_no']) for sub in invoices_obj]
                    
                groupid = []
                memberid = []
                error_log = []
                    
                if res:  
                    if len(res) == 1:
                        values = (res[0], )
                        mycursor.execute("select * from sap_error_log where invoice_no = ? order by invoice_no desc", values)
                        error_log = mycursor.fetchall()
                        
                    elif len(res) > 1:
                        mycursor.execute("select * from sap_error_log where invoice_no in {} order by invoice_no desc".format(tuple(res)))
                        error_log = mycursor.fetchall()
                    
                    if len(res) == 1:
                        values = (res[0], )
                        mycursor.execute("select * from approval where invoice_no = ? and referred_approver = 'n' order by invoice_no desc, approval_level", values)
                        approvers_list = mycursor.fetchall()
                            
                    elif len(res) > 1:
                        mycursor.execute("select * from approval where referred_approver = 'n' and invoice_no in {} order by invoice_no desc, approval_level".format(tuple(res)))
                        approvers_list = mycursor.fetchall()
                
                    for row in approvers_list: 
                    
                        if row["isgroup"] == 'y':
                            groupid.append(row["approver"])
                        elif row["isgroup"] == 'n':
                            memberid.append(row["approver"])
                        
                    format_strings_mem = ','.join(['?'] * len(memberid))
                        
                    approver_final = []  
                        
                    if groupid and len(groupid) > 1:
                        mycursor.execute('select group_id, name from "GROUP" where group_id in {}'.format(tuple(groupid)))
                    
                    elif len(groupid) == 1:
                        group = (groupid[0])
                        sqlQuery = 'select group_id, name from "GROUP" where group_id = ?'
                        mycursor.execute(sqlQuery, group)
                            
                    for row in mycursor:
                        temp1 = {
                            "isgroup": "y",
                            "approver": row["group_id"],
                            "name": row["name"],
                            "approval_type": ""
                        }
                        approver_final.append(temp1)
                        
                    if memberid:
                        sqlQuery = "select distinct a.approver, b.member_id, b.fs_name, b.ls_name from rule_approver a " \
                            "inner join member b on a.approver = b.member_id where a.approver in (" + format_strings_mem+")"
                        mycursor.execute(sqlQuery, tuple(memberid)) 
                        
                        for row in mycursor:
                            
                            if row["fs_name"] == None and row["ls_name"] == None:
                                name = None
                            
                            elif row["fs_name"] == None and row["ls_name"] != None:
                                name = row["ls_name"]
                                
                            elif row["fs_name"] != None and row["ls_name"] == None:
                                name = row["fs_name"]
                            
                            else:
                                name = str(row["fs_name"]) + " " + str(row["ls_name"])
                                
                            temp1 = {
                                "isgroup": "n",
                                "approver": row["approver"],
                                "name": str(name),
                                "approval_type": ""
                            }
                            approver_final.append(temp1)
                        
                    if len(res) == 1:
                        mycursor.execute("select attach_id, file_id, name, mime_type, file_link from file_storage where file_id = ?", res[0])
                        file = mycursor.fetchall()
                        
                    elif len(res) > 1:
                        mycursor.execute("select attach_id, file_id, name, mime_type, file_link from file_storage where file_id in {}".format(tuple(res))) 
                        file = mycursor.fetchall()
                    
                    if len(res) == 1:
                        mycursor.execute("select DISTINCT((m.fs_name||' '||m.ls_name)) as approver_name, a.invoice_no, a.approval_level, a.approval_type, a.member_id " \
                            "from member m " \
                            "inner join approval_history a " \
                            "on m.member_id = a.member_id " \
                            "where a.invoice_no = ?" \
                            "order by a.invoice_no desc, a.approval_level desc ", res[0])
                        sap_approved = mycursor.fetchall()
                            
                    elif len(res) > 1:
                        mycursor.execute("select DISTINCT((m.fs_name ||' '|| m.ls_name)) as approver_name, a.invoice_no, a.approval_level, a.approval_type, a.member_id " \
                            "from member m " \
                            "inner join approval_history a " \
                            "on m.member_id = a.member_id " \
                            "where a.invoice_no in {} " \
                            "order by a.invoice_no desc, a.approval_level ".format(tuple(res)))
                        sap_approved = mycursor.fetchall()
                    
                sap_app_name = "" 
                for row in invoices_obj:
                    approvers = []
                    files = []
                    error_op = []
                    sap_app_list = []
                    
                    for errors in error_log:
                        if str(row["invoice_no"]) == str(errors["invoice_no"]):
                            err = {
                                "invoice_no" : errors["invoice_no"],
                                "type" : errors["error_type"],
                                "msg" : errors["error_msg"]
                            }
                            error_op.append(err)
                        
                    for data in file: 
                            if str(row["invoice_no"]) == str(data["file_id"]):
                                temp = {
                                    'attach_id': data['attach_id'],
                                    "file_name" : data["name"],
                                    "mime_type" : data["mime_type"],
                                    "file_link" : data["file_link"]
                                }
                                files.append(temp)
                        
                    for temp in approvers_list:
                        approval_type = None
                        
                        if row["invoice_no"] == temp["invoice_no"]:
                                
                            for temp1 in approver_final:
                                if temp["approver"] == temp1["approver"] and temp["isgroup"] == temp1["isgroup"]:
                                        
                                    if temp["isapproved"] == "y":
                                        status = "accepted"
                                    elif temp["isapproved"] == 'n':
                                        status = "inapproval" 
                                            
                                    status_ap = {
                                        "isgroup" : temp1["isgroup"],
                                        "approver" : temp1["approver"],
                                        "name": temp1["name"],
                                        "level" : temp['approval_level'],
                                        "approval_type": temp1["approval_type"],
                                        "isapproved" : status
                                    }
                                    approvers.append(status_ap)
                                    
                    for app in sap_approved:
                        if int(row["invoice_no"]) == int(app["invoice_no"]):
                            temp2 = {
                                "isgroup" : 'n',
                                "approver" : app["member_id"],
                                "name": app["approver_name"],
                                "level" : app['approval_level'],
                                "approval_type": app["approval_type"],
                                "isapproved" : 'To ERP'
                            }
                            sap_app_list.append(temp2)
                            
                    if row["fs_name"] == None and row["ls_name"] == None:
                        name = None
                            
                    elif row["fs_name"] == None and row["ls_name"] != None:
                        name = row["ls_name"]
                        
                    elif row["fs_name"] != None and row["ls_name"] == None:
                        name = row["fs_name"]
                            
                    else:
                        name = str(row["fs_name"]) + " " + str(row["ls_name"])
                        
                    approval_type = None
                    
                    if tabname == "tosap":
                        for each in sap_approved:
                            if each["invoice_no"] == row["invoice_no"]:
                                approval_type = each["approval_type"]
                                break
                            
                    else:
                        for each in approvers_list:
                            if each["invoice_no"] == row["invoice_no"]:
                                approval_type = each["approval_type"]
                                break
                        
                    if row["npo"] == 'y':
                        invoice_type = 'NPO'
                        
                    elif row["npo"] == None and row["ref_po_num"] == None:
                        invoice_type = 'None'
                        
                    elif row["ref_po_num"] != None:
                        invoice_type = 'PO'
                        
                    record = {
                        "invoice_no" :row["invoice_no"],
                        "document_type": row["document_type"],
                        "gstin": row["gstin"],
                        "ref_po_no": row["ref_po_num"],
                        "company_code": row["company_code"],
                        "in_status" : row["in_status"],
                        "sup_status":row["sup_status"],
                        "invoice_type": invoice_type,
                        "user_invoice_id" : row['user_invoice_id'],
                        "sap_invoice_no" : row['sap_invoice_no'],
                        "invoice_date" : str(row["invoice_date"]),
                        "posting_date" : str(row["posting_date"]),
                        "amount" : row["amount"],
                        "currency": row["currency"],
                        "supplier_id" : row["supplier_id"],
                        "supplier_name" : row["vendor_name"],
                        "approver_name": sap_app_name,
                        "modified_date": str(row["modified_date"]),
                        "working_person": str(name),
                        "supplier_comments":row["supplier_comments"],
                        "approval_type": approval_type,
                        "invoice_files":files,
                        "approvers":approvers,
                        "sap_approver": sap_app_list,
                        "error_log": error_op,
                        'faulty_invoice': row['faulty_invoice']  
                    }
                    invoices.append(record)
                records["invoices"] = invoices

    except Exception as e: 
        return {
        'statuscode': 500,
        'body': json.dumps(str(e))   
    }
            
    finally:
        mydb.close()
        # if 'invoice_no' in records:
        #     return{
        #         'body':records
        #     }
        # else:
    return {
                'statuscode': 200,
                'body': records
            }
        # return records

# event = {'body-json': {}, 'params': {'path': {}, 'querystring': {'nooflines': '50', 'pageno': '1', 'tabname': 'new', 'userid': 'einvoiceportal@gmail.com'}, 'header': {'accept': 'application/json, text/plain, */*', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'en-US,en;q=0.9', 'Authorization': 'eyJraWQiOiJ1RXlLMTdnUjUzTVVMcXUrYkRsQUZ2NHRSUTR0VVM5KzM4NlwvZnpxMWorQT0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiI5NDkxOTNiMi1hZWQ2LTQxZGUtOTM2YS04MGRjMTEzNjUxNzIiLCJhdWQiOiIyNGJqZTRqdWQ4aDNmOHJzbmtraGcwYmx2MSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJldmVudF9pZCI6IjczOTllODkxLTEzYTAtNDQwZS04ZTNhLTkyY2NmMDk0ZWRiYiIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjg2Njc1NTM2LCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAuZXUtY2VudHJhbC0xLmFtYXpvbmF3cy5jb21cL2V1LWNlbnRyYWwtMV9QOXJubnFpTHUiLCJjb2duaXRvOnVzZXJuYW1lIjoiOTQ5MTkzYjItYWVkNi00MWRlLTkzNmEtODBkYzExMzY1MTcyIiwiZXhwIjoxNjg2Njc5MTM2LCJpYXQiOjE2ODY2NzU1MzYsImVtYWlsIjoiZWludm9pY2Vwb3J0YWxAZ21haWwuY29tIn0.fP29YRRk27ePpsAzjKQv59s4k3tjgFokbzi473RMp9YQwPJ37qFyPeIdZD9XCZWyZ1p4Az1n9_X8xkbN8WQegCD0Odlyii7b4PSgn4b9yC7RwWpIAS5b5TBr3LIYy6cxr75KsyOKW32Qhf3EyTKC3C81FJ2IbBQ0Gm5JQw790W3RHH744Q4ywI9iIFqtLX0q8vFgwbHYjGYckwTC7xjsMf4O6-IsGH9x-2eaSwbwvDVNqimEHrTIoTDjO49FldiMD9H3d0AqoonBVXvBb5poxdpOvXGTmJkLsHQ5Fe0T8lUjKorT8iKfOa_diw7uQTUUl-pmmnUmNNqk_jvhzNnHiA', 'content-type': 'application/json', 'Host': 'overview.peoltechnologies.net', 'origin': 'https://ywi7o0pxhc.execute-api.eu-central-1.amazonaws.com', 'referer': 'https://ywi7o0pxhc.execute-api.eu-central-1.amazonaws.com/', 'sec-ch-ua': '"Not.A/Brand";v="8", "Chromium";v="114", "Google Chrome";v="114"', 'sec-ch-ua-mobile': '?0', 'sec-ch-ua-platform': '"Windows"', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'cross-site', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36', 'X-Amzn-Trace-Id': 'Root=1-6488a065-531ac28b5c3118ff6d22f302', 'X-Forwarded-For': '115.99.189.62', 'X-Forwarded-Port': '443', 'X-Forwarded-Proto': 'https'}}, 'stage-variables': {'schema': 'einvoice_db_portal', 'lambda_alias': 'dev', 'secreat': 'test/einvoice/secret', 'notification_email': 'elipotest@gmail.com', 'ocr_bucket_folder': 'old-dev/', 'cred_bucket': 'file-bucket-emp'}, 'context': {'account-id': '', 'api-id': '5ud4f0kv53', 'api-key': '', 'authorizer-principal-id': '', 'caller': '', 'cognito-authentication-provider': '', 'cognito-authentication-type': '', 'cognito-identity-id': '', 'cognito-identity-pool-id': '', 'http-method': 'POST', 'stage': 'einvoice-v1', 'source-ip': '115.99.189.62', 'user': '', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36', 'user-arn': '', 'request-id': '65124c6e-968f-4d14-bba3-e54f1c1740f0', 'resource-id': 'jrt2lh', 'resource-path': '/fetch-invoice'}}

# print(getSearchedInvoice(event , ' '))

#tested didnt get correct event ot check all statements
def getSapPoDetail(event, context):
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='ap-south-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )
    # secret = event["stage-variables"]["secreat"]
    # resp = client.get_secret_value(
    #     SecretId= secret
    # ) 
    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()
    
    # s3 = boto3.client("s3")
    
    output = {}
    
    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            if "ref_po_num" in event["params"]["querystring"]:
                po_number = event["params"]["querystring"]["ref_po_num"]
                
                mycursor.execute("select * from elipo_setting where key_name in ('sap_po_fetch_url', 'sap_password', 'sap_userid')")
                settings = mycursor.fetchall()

                user_settings = {}
    
                if settings:
                    for each in settings:
                        user_settings[each['key_name']] = each['value1']
    
                    del settings
                
                    # url = "http://182.72.219.94:8000/zgetpo/GetPo"
                s = requests.Session()
                s.headers.update({'Connection': 'keep-alive'})
                url = 'https://virtual-host1.apimanagement.us21.hana.ondemand.com:443/zinvoicepo/GetPo'
                params = { 'sap-client': '800'}
    
                headersFetch = { 'X-CSRF-TOKEN': 'Fetch' }
                y = s.get(url, auth=HTTPBasicAuth('DEVELOPER08', 'Peol@123'), headers=headersFetch, params=params, timeout=10)
                token = y.headers["X-CSRF-TOKEN"]
                
                if token:
                    headers = {"X-CSRF-TOKEN": token, 'Content-type': 'application/json'}
                    records = {
                        "ID": po_number
                    }
                    
                    x = s.post(url, json=records, auth=HTTPBasicAuth('DEVELOPER08', 'Peol@123'), headers=headers, params=params, timeout=10)
        
                    payload = x.json()
                    # payload = x.text[1:-1]
                    # payload = json.loads(payload)
                    
                    # payload = '[{"PO_NUMBER":"3000000004","COMP_CODE":"3000","DOC_TYPE":"EC","DELETE_IND":"","STATUS":"I","CREAT_DATE":20001102,"CREATED_BY":"CRMREMOTE","ITEM_INTVL":10,"VENDOR":"0000005550","LANGU":"E","LANGU_ISO":"EN","PMNTTRMS":"ZB01","DSCNT1_TO":14,"DSCNT2_TO":30,"DSCNT3_TO":45,"DSCT_PCT1":3.000,"DSCT_PCT2":2.000,"PURCH_ORG":"3000","PUR_GROUP":"013","CURRENCY":"USD","CURRENCY_ISO":"USD","EXCH_RATE":1.00000,"EX_RATE_FX":"","DOC_DATE":20001102,"VPER_START":0,"VPER_END":0,"WARRANTY":0,"QUOTATION":"","QUOT_DATE":0,"REF_1":"","SALES_PERS":"Mrs. Bornhorst","TELEPHONE":"62201","SUPPL_VEND":"","CUSTOMER":"","AGREEMENT":"","GR_MESSAGE":"","SUPPL_PLNT":"","INCOTERMS1":"","INCOTERMS2":"","COLLECT_NO":"","DIFF_INV":"","OUR_REF":"","LOGSYSTEM":"","SUBITEMINT":1,"PO_REL_IND":"","REL_STATUS":"","VAT_CNTRY":"","VAT_CNTRY_ISO":"","REASON_CANCEL":0,"REASON_CODE":"","RETENTION_TYPE":"","RETENTION_PERCENTAGE":0,"DOWNPAY_TYPE":"","DOWNPAY_AMOUNT":0,"DOWNPAY_PERCENT":0,"DOWNPAY_DUEDATE":0,"MEMORY":"","MEMORYTYPE":"","SHIPTYPE":"","HANDOVERLOC":"","SHIPCOND":"","POITEM":[{"PO_ITEM":1,"DELETE_IND":"","SHORT_TEXT":"Desk Pads","MATERIAL":"","MATERIAL_EXTERNAL":"","MATERIAL_GUID":"","MATERIAL_VERSION":"","EMATERIAL":"","EMATERIAL_EXTERNAL":"","EMATERIAL_GUID":"","EMATERIAL_VERSION":"","PLANT":"3200","STGE_LOC":"","TRACKINGNO":"","MATL_GROUP":"006","INFO_REC":"5500000127","VEND_MAT":"1450507","QUANTITY":1.000,"PO_UNIT":"ST","PO_UNIT_ISO":"PCE","ORDERPR_UN":"ST","ORDERPR_UN_ISO":"PCE","CONV_NUM1":1,"CONV_DEN1":1,"NET_PRICE":27.950000000,"PRICE_UNIT":1,"GR_PR_TIME":0,"TAX_CODE":"I0","BON_GRP1":"","QUAL_INSP":"","INFO_UPD":"B","PRNT_PRICE":"X","EST_PRICE":"","REMINDER1":0,"REMINDER2":0,"REMINDER3":0,"OVER_DLV_TOL":0,"UNLIMITED_DLV":"","UNDER_DLV_TOL":0,"VAL_TYPE":"","NO_MORE_GR":"","FINAL_INV":"","ITEM_CAT":"0","ACCTASSCAT":"K","DISTRIB":"","PART_INV":"","GR_IND":"X","GR_NON_VAL":"","IR_IND":"X","FREE_ITEM":"","GR_BASEDIV":"","ACKN_REQD":"","ACKNOWL_NO":"","AGREEMENT":"","AGMT_ITEM":"","SHIPPING":"","CUSTOMER":"","COND_GROUP":"","NO_DISCT":"","PLAN_DEL":1,"NET_WEIGHT":0,"WEIGHTUNIT":"","WEIGHTUNIT_ISO":"","TAXJURCODE":"PA0000000","CTRL_KEY":"","CONF_CTRL":"","REV_LEV":"","FUND":"","FUNDS_CTR":"","CMMT_ITEM":"","PRICEDATE":"","PRICE_DATE":20001102,"GROSS_WT":0,"VOLUME":0,"VOLUMEUNIT":"","VOLUMEUNIT_ISO":"","INCOTERMS1":"","INCOTERMS2":"","PRE_VENDOR":"","VEND_PART":"","HL_ITEM":0,"GR_TO_DATE":0,"SUPP_VENDOR":"","SC_VENDOR":"","KANBAN_IND":"","ERS":"","R_PROMO":"","POINTS":0,"POINT_UNIT":"","POINT_UNIT_ISO":"","SEASON":"","SEASON_YR":"","BON_GRP2":"","BON_GRP3":"","SETT_ITEM":"","MINREMLIFE":0,"RFQ_NO":"","RFQ_ITEM":0,"PREQ_NO":"","PREQ_ITEM":0,"REF_DOC":"","REF_ITEM":0,"SI_CAT":"","RET_ITEM":"","AT_RELEV":"","ORDER_REASON":"","BRAS_NBM":"","MATL_USAGE":"","MAT_ORIGIN":"","IN_HOUSE":"","INDUS3":"","INF_INDEX":"","UNTIL_DATE":0,"DELIV_COMPL":"","PART_DELIV":"","SHIP_BLOCKED":"","PREQ_NAME":"ARMANAGER","PERIOD_IND_EXPIRATION_DATE":"","INT_OBJ_NO":0,"PCKG_NO":0,"BATCH":"","VENDRBATCH":"","CALCTYPE":"","GRANT_NBR":"","CMMT_ITEM_LONG":"","FUNC_AREA_LONG":"","NO_ROUNDING":"","PO_PRICE":"","SUPPL_STLOC":"","SRV_BASED_IV":"","FUNDS_RES":"","RES_ITEM":0,"ORIG_ACCEPT":"","ALLOC_TBL":"","ALLOC_TBL_ITEM":0,"SRC_STOCK_TYPE":"","REASON_REJ":"","CRM_SALES_ORDER_NO":"","CRM_SALES_ORDER_ITEM_NO":0,"CRM_REF_SALES_ORDER_NO":"","CRM_REF_SO_ITEM_NO":"","PRIO_URGENCY":0,"PRIO_REQUIREMENT":0,"REASON_CODE":"","FUND_LONG":"","LONG_ITEM_NUMBER":"","EXTERNAL_SORT_NUMBER":0,"EXTERNAL_HIERARCHY_TYPE":"","RETENTION_PERCENTAGE":0,"DOWNPAY_TYPE":"","DOWNPAY_AMOUNT":0,"DOWNPAY_PERCENT":0,"DOWNPAY_DUEDATE":0,"EXT_RFX_NUMBER":"","EXT_RFX_ITEM":"","EXT_RFX_SYSTEM":"","SRM_CONTRACT_ID":"","SRM_CONTRACT_ITM":0,"BUDGET_PERIOD":"","BLOCK_REASON_ID":"","BLOCK_REASON_TEXT":"","SPE_CRM_FKREL":"","DATE_QTY_FIXED":"","GI_BASED_GR":"","SHIPTYPE":"","HANDOVERLOC":"","TC_AUT_DET":"","MANUAL_TC_REASON":"","FISCAL_INCENTIVE":"","FISCAL_INCENTIVE_ID":"","TAX_SUBJECT_ST":"","REQ_SEGMENT":"","STK_SEGMENT":""},{"PO_ITEM":2,"DELETE_IND":"","SHORT_TEXT":"Mouse Pads","MATERIAL":"","MATERIAL_EXTERNAL":"","MATERIAL_GUID":"","MATERIAL_VERSION":"","EMATERIAL":"","EMATERIAL_EXTERNAL":"","EMATERIAL_GUID":"","EMATERIAL_VERSION":"","PLANT":"3200","STGE_LOC":"","TRACKINGNO":"","MATL_GROUP":"006","INFO_REC":"5500000127","VEND_MAT":"2752661","QUANTITY":1.000,"PO_UNIT":"ST","PO_UNIT_ISO":"PCE","ORDERPR_UN":"ST","ORDERPR_UN_ISO":"PCE","CONV_NUM1":1,"CONV_DEN1":1,"NET_PRICE":10.950000000,"PRICE_UNIT":1,"GR_PR_TIME":0,"TAX_CODE":"I0","BON_GRP1":"","QUAL_INSP":"","INFO_UPD":"B","PRNT_PRICE":"X","EST_PRICE":"","REMINDER1":0,"REMINDER2":0,"REMINDER3":0,"OVER_DLV_TOL":0,"UNLIMITED_DLV":"","UNDER_DLV_TOL":0,"VAL_TYPE":"","NO_MORE_GR":"","FINAL_INV":"","ITEM_CAT":"0","ACCTASSCAT":"K","DISTRIB":"","PART_INV":"","GR_IND":"X","GR_NON_VAL":"","IR_IND":"X","FREE_ITEM":"","GR_BASEDIV":"","ACKN_REQD":"","ACKNOWL_NO":"","AGREEMENT":"","AGMT_ITEM":"","SHIPPING":"","CUSTOMER":"","COND_GROUP":"","NO_DISCT":"","PLAN_DEL":1,"NET_WEIGHT":0,"WEIGHTUNIT":"","WEIGHTUNIT_ISO":"","TAXJURCODE":"PA0000000","CTRL_KEY":"","CONF_CTRL":"","REV_LEV":"","FUND":"","FUNDS_CTR":"","CMMT_ITEM":"","PRICEDATE":"","PRICE_DATE":20001102,"GROSS_WT":0,"VOLUME":0,"VOLUMEUNIT":"","VOLUMEUNIT_ISO":"","INCOTERMS1":"","INCOTERMS2":"","PRE_VENDOR":"","VEND_PART":"","HL_ITEM":0,"GR_TO_DATE":0,"SUPP_VENDOR":"","SC_VENDOR":"","KANBAN_IND":"","ERS":"","R_PROMO":"","POINTS":0,"POINT_UNIT":"","POINT_UNIT_ISO":"","SEASON":"","SEASON_YR":"","BON_GRP2":"","BON_GRP3":"","SETT_ITEM":"","MINREMLIFE":0,"RFQ_NO":"","RFQ_ITEM":0,"PREQ_NO":"","PREQ_ITEM":0,"REF_DOC":"","REF_ITEM":0,"SI_CAT":"","RET_ITEM":"","AT_RELEV":"","ORDER_REASON":"","BRAS_NBM":"","MATL_USAGE":"","MAT_ORIGIN":"","IN_HOUSE":"","INDUS3":"","INF_INDEX":"","UNTIL_DATE":0,"DELIV_COMPL":"","PART_DELIV":"","SHIP_BLOCKED":"","PREQ_NAME":"ARMANAGER","PERIOD_IND_EXPIRATION_DATE":"","INT_OBJ_NO":0,"PCKG_NO":0,"BATCH":"","VENDRBATCH":"","CALCTYPE":"","GRANT_NBR":"","CMMT_ITEM_LONG":"","FUNC_AREA_LONG":"","NO_ROUNDING":"","PO_PRICE":"","SUPPL_STLOC":"","SRV_BASED_IV":"","FUNDS_RES":"","RES_ITEM":0,"ORIG_ACCEPT":"","ALLOC_TBL":"","ALLOC_TBL_ITEM":0,"SRC_STOCK_TYPE":"","REASON_REJ":"","CRM_SALES_ORDER_NO":"","CRM_SALES_ORDER_ITEM_NO":0,"CRM_REF_SALES_ORDER_NO":"","CRM_REF_SO_ITEM_NO":"","PRIO_URGENCY":0,"PRIO_REQUIREMENT":0,"REASON_CODE":"","FUND_LONG":"","LONG_ITEM_NUMBER":"","EXTERNAL_SORT_NUMBER":0,"EXTERNAL_HIERARCHY_TYPE":"","RETENTION_PERCENTAGE":0,"DOWNPAY_TYPE":"","DOWNPAY_AMOUNT":0,"DOWNPAY_PERCENT":0,"DOWNPAY_DUEDATE":0,"EXT_RFX_NUMBER":"","EXT_RFX_ITEM":"","EXT_RFX_SYSTEM":"","SRM_CONTRACT_ID":"","SRM_CONTRACT_ITM":0,"BUDGET_PERIOD":"","BLOCK_REASON_ID":"","BLOCK_REASON_TEXT":"","SPE_CRM_FKREL":"","DATE_QTY_FIXED":"","GI_BASED_GR":"","SHIPTYPE":"","HANDOVERLOC":"","TC_AUT_DET":"","MANUAL_TC_REASON":"","FISCAL_INCENTIVE":"","FISCAL_INCENTIVE_ID":"","TAX_SUBJECT_ST":"","REQ_SEGMENT":"","STK_SEGMENT":""}],"PORETURN":[],"LV_SHEET_NO":"","LV_NETVAL":0}]'
                    sap_errors = []
                    items = []
                    error_flag = False
                    
                    if payload:
                        # print(payload)
                        if payload[0]["PORETURN"]:
                            for each in payload[0]["PORETURN"]:
                                if each["TYPE"] == "E":
                                    error_flag = True
                                
                                err_dict = {
                                    'type' : each["TYPE"],                                    
                                    'msg' : each["MESSAGE"]
                                }
                                sap_errors.append(err_dict)
                                
                            output = sap_errors
                            
                            return{
                                'statuscode': 201,
                                'body': output
                            }
                        
                        values = []   
                        if payload[0]["POITEM"]:
                            res = [sub['PLANT'] for sub in payload[0]["POITEM"]]
                            if res:
                                format_strings = ','.join(['?'] * len(res))
                                
                                sqlQuery = "select code, description " \
                                    "from master " \
                                    "where master_id = '7' and code in (" + format_strings +")"
                                mycursor.execute(sqlQuery, tuple(res))
                                plants = mycursor.fetchall()
                            
                            for each in payload[0]["POITEM"]:
                                temp = ( po_number, each["MATERIAL"], each["SHORT_TEXT"], each["PO_ITEM"] )
                                values.append(temp)
                                
                                plant_desc = None
                                mat_no = None
                                
                                for row in plants:
                                    if row["code"] == each["PLANT"]:
                                        plant_desc = row["description"]
                                        
                                if str(each["ITEM_CAT"]) == str(9) and each["ACCTASSCAT"] == 'K':
                                    mycursor.execute("select material_no from material_master where material_name = ?", each["SHORT_TEXT"])
                                    material_det = mycursor.fetchone()
                                    
                                    if material_det:
                                        mat_no = material_det["material_no"]
                                        
                                if mat_no == None:
                                    mat_no = each["MATERIAL"]
                                        
                                row_item = {
                                    "po_item": each["PO_ITEM"],
                                    "material": mat_no,
                                    "materialdesc": each["SHORT_TEXT"],     
                                    "quantity": each["QUANTITY"],
                                    "unit": each["PO_UNIT"],
                                    "tax_code": each["TAX_CODE"],
                                    "plant": each["PLANT"],
                                    "plant_desc": plant_desc,
                                    "item_category": each["ITEM_CAT"],
                                    "net_price": each["NET_PRICE"],                            #each["ITEM_CAT"]    each["PSTYP"]
                                    "account_assign": each["ACCTASSCAT"]
                                }
                                items.append(row_item)
                                
                            header = {
                                "company_code": payload[0]["COMP_CODE"],
                                "currency": payload[0]["CURRENCY"],
                                "supplier_id": payload[0]["VENDOR"],
                                "total_amount": int(payload[0]["LV_NETVAL"]),
                                "sheet_no": (payload[0]["LV_SHEET_NO"]),     
                                "items": items
                            }
                            output = header
                        
                        mycursor.execute("select count(*) as count from po_detail where po_number = ?", po_number)
                        count = mycursor.fetchone()
                        
                        if count["count"] != 0: 
                            mycursor.execute("delete from po_detail where po_number = ?", po_number)
                        
                        sqlQuery = "insert into po_detail (po_number, material, material_desc, item_no) values {}"
                        # mycursor.executemany(sqlQuery.format(tuple(values)))
                        for row in values:
                            mycursor.execute(sqlQuery.format(tuple(row)))
                        
                        mydb.commit()
    
    except requests.exceptions.Timeout as msg:
        mydb.rollback()
        return {
            'statuscode': 500,
            'body': json.dumps("Resource temporarily unavailable!")
        }
        
    except requests.exceptions.TooManyRedirects as msg:
        mydb.rollback()
        return {
            'statuscode': 500, 
            'body': json.dumps("Too Many Redirects!")
        }
        
    except requests.exceptions.RequestException as msg:
        mydb.rollback()
        return {
            'statuscode': 500, 
            'body': json.dumps("Resource temporarily unavailable!")
        }
        
    except requests.exceptions.ConnectionError as msg:
        mydb.rollback()
        return {
            'statuscode': 500, 
            'body': json.dumps("Resource temporarily unavailable!")
        }
        
    except:
        return {
            'statuscode': 500,
            'body': json.dumps("Internal Fail")
        }

    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': output
    }
  
#event not found  
def deleteGroup(event, context):
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='ap-south-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )
    # secret = event["stage-variables"]["secreat"]
    # resp = client.get_secret_value(
    #     SecretId= secret
    # )  
    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()
    
    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            sqlQuery = "DELETE FROM " + dbScehma + ".group WHERE group_id = ?"
            values = (event["params"]["querystring"]["group_id"])
            mycursor.execute(sqlQuery, values)
            
            sqlQuery = "DELETE FROM dropdown WHERE value1 = ?"
            values = (event["params"]["querystring"]["group_id"])
            mycursor.execute(sqlQuery, values)
            
            msg = "Group ID " + event["params"]["querystring"]["group_id"] + " deleted"   
            
            mydb.commit()
            
    except:
        return {
            'statuscode': 500,
            'body': json.dumps("Delete Unsuccessful!")
        }
            
    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': json.dumps(msg)
    }

#didnt find a event to test
def getGroupDetails(event, context):
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='ap-south-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )

    # secret = event["stage-variables"]["secreat"]
    

    # resp = client.get_secret_value(
    #     SecretId= secret
    # )  

    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()

    records = {}

    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            group = []
            final_group = []
            member = []
            
            sqlQuery = 'select * from "GROUP" order by name'
            mycursor.execute(sqlQuery)
            temp = convertValuesTodict(mycursor.description, mycursor.fetchall())
            
            for row in temp:
                    rawRecord = {
                        "group_id": row["group_id"],
                        "name": row['name'],
                        'description': row['description'],
                        'member_count': row['member_count'],
                        'is_valid': row['is_valid'],
                        'members' : member
                    }
                    final_group.append(rawRecord)
            
            
            sqlQuery = 'SELECT g.group_id, m.member_id, m.fs_name, m.ls_name, m.profile_photo, m.email, m.position FROM "GROUP" as g inner join member m on g.group_id = m.group_id'
            # sqlQuery = "select * FROM  group"
            
            mycursor.execute(sqlQuery)
            
            group_list = list()
            
            temp = convertValuesTodict(mycursor.description, mycursor.fetchall())
            
            for row in temp:
                
                rawRecord_t = {
                    "group_id": row["group_id"],
                    "member_id":row['member_id'],
                    'member_name':row["fs_name"] + " " + row["ls_name"],
                    "profile_photo":row["profile_photo"],
                    'email':row["email"],
                    'position':row["position"]
                }
                group.append(rawRecord_t)
                
            group.sort(key=lambda i: i['group_id'])
            
            for row in final_group:
                temp1 = list()
                for row_t in group:
                    no1 = row_t["group_id"]
                    no2 = row["group_id"]
                    if row_t["group_id"] == row["group_id"]:
                    # if no1 == no2:
                        # print(row["group_id"],row_t["group_id"])
                        temp = {
                            'group_id': row['group_id'],
                            'member_id':row_t['member_id'],
                            "member_name":row_t['member_name'],
                            "profile_photo":row_t['profile_photo'],
                            'email':row_t["email"],
                            "position":row_t['position']
                        }
                        temp1.append(temp)
                        
                row["members"] = temp1
       
            records['Group'] = final_group   
            
    except:
        return {
            'statuscode': 500,
            'body': json.dumps("Failed to load groups"),
        }   
            
    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': records,
    }

# def get_stored_credentials(user_id):
            
#                 try:
#                     s3 = boto3.client("s3")
#                     encoded_file = s3.get_object(Bucket=elipo_bucket, Key=user_id)
#                     creds = pickle.loads(encoded_file["Body"].read())
#                     return creds
#                 except Exception as excep:
#                     creds = None

#         # print(str(excep))
#         # raise NoUserIdException(excep)


# def create_message(sender, to, cc, subject, message_text):
#     """Create a message for an email.

#     Args:
#     sender: Email address of the sender.
#     to: Email address of the receiver.
#     subject: The subject of the email message.
#     message_text: The text of the email message.

#     Returns:
#     An object containing a base64url encoded email object.
#     """

#     message = email.mime.text.MIMEText(message_text, 'html')
#     message['to'] = to
#     message['cc'] = cc
#     message['from'] = sender
#     message['subject'] = subject
#     encoded = base64.urlsafe_b64encode(message.as_string().encode("utf-8"))
#     return {'raw': encoded.decode("utf-8")}


# def send_message(service, user_id, message):
#     try:  
#         message = (service.users().messages().send(userId=user_id, body=message).execute())
#         return message
#     # except errors.HttpError as error:
#     except Exception as error:
#         print("An error occurred: ", error)

# def build_service(credentials):
#     http = httplib2.Http()
#     http = credentials.authorize(http)
#     return build('gmail', 'v1', http=http)  

# def sendMailNotifications(email, group, mycursor):
    # user_id = elipo_cred
    mycursor.execute("select * from elipo_setting where key_name = 'notification-mail' ")
    email_data = mycursor.fetchone()
    user_id = email_data["value1"]
    
    mail_cc = ''
    mail_subject = 'ELIPO Notification'
    mail_body = ''
    
    mail_body = '''<html>
            <body  >
        <div style=" max-width: 500px; margin: auto; padding: 10px; ">
                <div style=" width:100%; align-content: center;text-align: center;">
                    <img src="https://einvoice-public-images.s3.ap-south-1.amazonaws.com/ELIPO+logo.png" alt="Italian Trulli" style="vertical-align:middle; width: 140px;height:50px;text-align: center;"  >
                </div>
            <div style=" width:100%; align-content:left;text-align:left;">
                    <hr style="width:100%; text-align: center; border: 2px solid #0000001A;opacity: 0.5; border-radius: 2px;" >
                </div>
                <b>
                    <span style="vertical-align: middle;text-align: left;font: 600  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;" >
                        Hello User,
                    </span> 
                <div style=" width:100%; align-content: center;text-align: center;margin-top: 10px;">   
                    <span style="vertical-align: middle; align-content: center; font: 500 16px/23px Open Sans;letter-spacing: 0px;color:#000000;white-space: nowrap;opacity: 1;" >
                         Welcome to ELIPO
                    </span>
                    
                </div>
        
            <br>
            <div style=" max-width:800px; min-width: 100px;  text-align: center ; margin-top: 10px; font: 500  16px/23px Open Sans;letter-spacing: 0px;color: #000000;opacity: 1;">
                You have been assigned to {} group . You can login to ELIPO by clicking on the below link.
            </div>
            <br>
            <div style=" width:100%;align-content: center;text-align: center;">
                <a href="https://ywi7o0pxhc.execute-api.eu-central-1.amazonaws.com/production/login" target="_blank">
                    <button style="border: none;box-shadow: 1px 1px 5px 1px #5a9e9b; background:rgb(80, 219, 212) 0% 0% no-repeat padding-box; border-radius: 7px;opacity: 1;width:180px; height: 35px;outline: none;border: none;" > 
                        <span style="vertical-align: middle; text-align: left;font: 600 bold 16px/23px Open Sans;letter-spacing: 0px;color: whitesmoke;white-space: nowrap;opacity: 1;">Login to ELIPO</span>
                    </button>
                </a>
            </div>
        
            <br><br>
            <div style="width:100%;">
                <span style="vertical-align: middle; text-align: left;font: 500  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;">Happy Invoicing!</span>
            <br>
            <span style="vertical-align: middle; text-align: left;font: 500  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;">Regards,</span>
            <br>
            <span style="vertical-align: middle;text-align: left;font: 500  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;">Team ELIPO</span>
            </div>
        <div style=" width:100%; align-content:left;text-align:left;">
                    <hr style="width:100%; text-align: center; border: 2px solid #0000001A;opacity: 0.5; border-radius: 2px;" >
                </div>
        
            
            <div style="width:100%;align-content: center;text-align: center;">
                <span style=" text-align: center;font: 600 bold 16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 0.7;">This message was sent to you by ELIPO</span>
            </div>
            <div style="width:100%;align-content: center;text-align: center;">
                <img src="https://einvoice-public-images.s3.ap-south-1.amazonaws.com/elipo+logo_2.png" alt="Italian Trulli" style="text-align: center;width: 80px;height: 30px;" >
            </div>
            
            <br>
        </div>
            </body></html>'''.format(group)

    credentials = get_stored_credentials(user_id)

    if credentials and credentials.refresh_token is not None:
        service = build_service(credentials=credentials)
        message = create_message(sender=user_id, to=str(email), cc=mail_cc, subject=mail_subject, message_text=mail_body)
        send_message(service=service, user_id="me", message=message) 

#event nt found
def patchGroup(event, context):
    global dbScehma 
    dbScehma = ' DBADMIN '

    # client = boto3.client(
    # 'secretsmanager',
    # region_name='ap-south-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )
    # secret = event["stage-variables"]["secreat"]
    # resp = client.get_secret_value(
    #     SecretId= secret
    # ) 
    # secretDict = json.loads(resp['SecretString'])
    
    # global elipo_cred
    # elipo_cred = event["stage-variables"]["notification_email"]
    
    global elipo_bucket
    elipo_bucket = event["stage-variables"]["cred_bucket"]

    mydb = hdbcliConnect()
    
    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            if "description" in event["body-json"] and "name" in event["body-json"]:
                sqlQuery = 'update "GROUP" set description = ?, name = ? where group_id = ?'
                values = (event["body-json"]["description"], event["body-json"]["name"], event["params"]["querystring"]["group_id"]) 
                mycursor.execute(sqlQuery, values)
                
                sqlQuery = "update dropdown set value2 = ? where value1 = ? and drop_key = 'group' "
                values = (event["body-json"]["name"], event["params"]["querystring"]["group_id"])
                mycursor.execute(sqlQuery, values)
                
            elif "description" in event["body-json"]:
                sqlQuery = 'update "GROUP" set description = ? where group_id = ?'
                values = (event["body-json"]["description"],  event["params"]["querystring"]["group_id"])
                mycursor.execute(sqlQuery, values)
                
            elif "name" in event["body-json"]:
                sqlQuery = 'update"GROUP" set name = ? where group_id = ?'
                values = (event["body-json"]["name"], event["params"]["querystring"]["group_id"])
                mycursor.execute(sqlQuery, values)
                
                sqlQuery = "update dropdown set value2 = ? where value1 = ? and drop_key = 'group' "
                values = (event["body-json"]["name"], event["params"]["querystring"]["group_id"])
                mycursor.execute(sqlQuery, values)
            
            if "member_ids" in event["body-json"]:
                
                if len(event["body-json"]["member_ids"]) == 1:
                    
                    member_id = event["body-json"]["member_ids"][0]
                    
                    mycursor.execute("select (fs_name|| ' '|| ls_name) as mem_name, group_id, email from member where member_id = ?", member_id)
                    member_detail = mycursor.fetchone()
                    
                    values = (event["params"]["querystring"]["group_id"],member_id)
                    sqlQuery = "update member set group_id = ? where member_id = ?"
                    mycursor.execute(sqlQuery,values)
                    
                    values = (event["params"]["querystring"]["group_id"], member_id)
                    sqlQuery = "update member set group_id = '' where group_id = ? and member_id != ?"
                    mycursor.execute(sqlQuery, values)
                    
                    if member_detail["group_id"] != event["params"]["querystring"]["group_id"]:
                        sendMailNotifications(email=member_detail["email"] ,group=event["body-json"]["name"], mycursor=mycursor)
                    
                elif len(event["body-json"]["member_ids"]) > 1:
                    email = ""
                    
                    mycursor.execute("select member_id, group_id, email from member where member_id in {}".format(tuple(event["body-json"]["member_ids"])))
                    members_detail = mycursor.fetchall()
                    
                    for row in members_detail:
                        if int(row["group_id"]) != int(event["params"]["querystring"]["group_id"]):
                            email = email + str(row["email"]) + ", "
                            print(email)
                    
                    if email != "":
                        leng = len(email) - 2
                        email = email[0: leng]
                    
                    mycursor.execute("update member set group_id = '' where group_id = ? and member_id Not IN {}".format(tuple(event["body-json"]["member_ids"])),(event["params"]["querystring"]["group_id"]))
                    mycursor.execute("update member set group_id = ? where member_id IN {}".format(tuple(event["body-json"]["member_ids"])),(event["params"]["querystring"]["group_id"]))
                    
                    if email != "":
                        sendMailNotifications(email=email ,group=event["body-json"]["name"], mycursor=mycursor)
            
                elif len(event["body-json"]["member_ids"]) == 0:
                    
                    values = (event["params"]["querystring"]["group_id"],)
                    sqlQuery = "update member set group_id = '' where group_id = ?"
                    mycursor.execute(sqlQuery, values)
                    
            mydb.commit()
            
    except:
        mydb.rollback()
        return {
            'statuscode': 500,
            'body': json.dumps("Update Unsuccessful")  
        }
            
    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': json.dumps("Update Successful")
    }      

#event not found to test
def postGroupDetails(event, context):
                 
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='ap-south-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )

    # secret = event["stage-variables"]["secreat"]

    # resp = client.get_secret_value(
    #     SecretId= secret
    # )  

    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()

    record = {
        "name" : "",
        "description" : "",
        "member_count":"",
        "is_valid":"y"
    }
    
    try:
        
        for value in event["body-json"]:
            if value in record:
                record[value] = event["body-json"][value]
        
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            if "group_id" not in event["body-json"] and ( record["name"] != ' ' or record["name"] != None ):
            
                sqlQuery = 'INSERT INTO "GROUP" (name, description, member_count, is_valid) VALUES {}'
                values = ( record["name"], record["description"],  record["member_count"], record["is_valid"] )
                mycursor.execute(sqlQuery.format(tuple(values)))
                mycursor.execute('select count(*) from "GROUP"')
                # group_id = mycursor.lastrowid
                group_id = mycursor.fetchone()
                group_id = group_id[0]
                
                del sqlQuery
                del values
        
                sqlQuery = "INSERT INTO dropdown (drop_key, value1, value2) VALUES {}"
                values = ( 'group', group_id, record["name"] )
                mycursor.execute(sqlQuery.format(tuple(values)))
                
                
            # else:
            elif "group_id" in event["body-json"]:
                
                group_id = event["body-json"]["group_id"]
            
            # if len(event["body-json"]["member_ids"]) == 1:
            touple = tuple(event["body-json"]["member_ids"])
            

            if "member_ids" in event["body-json"]:
                
                if len(event["body-json"]["member_ids"]) == 1:
                    
                    member_id = event["body-json"]["member_ids"][0]
                    values = (group_id, member_id)
                    sqlQuery = "update member set group_id = ? where member_id = ?"
                    mycursor.execute(sqlQuery,values)
                    
                elif len(event["body-json"]["member_ids"]) > 1:
                    mycursor.execute("update member set group_id = ? where member_id IN {}".format(tuple(event["body-json"]["member_ids"])),(group_id))

                mydb.commit()
            
    except pymysql.err.IntegrityError as e:
        mydb.rollback()
        return {
            'statuscode': 500,
            'body': json.dumps("Group name already exists, please provide a different group name")
        }
            
    except:
        mydb.rollback()
        return {
            'statuscode': 500,
            'body': json.dumps("Group insertion failed!")
        }
            
    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': json.dumps("Record inserted!")
    }

#complex queries covert time zone funciton error
def getInboxApprovals(event, context):
    
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='eu-central-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )
    # secret = event["stage-variables"]["secreat"]
    # resp = client.get_secret_value(
    #     SecretId= secret
    # )  
    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()

    records = {}

    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            email = None
            edit = None
            
            if "userid" in event["params"]["querystring"]:
                email = event["params"]["querystring"]["userid"]
                
            if "invoice_no" in event["params"]["querystring"]:
                
                invoiceNo = event["params"]["querystring"]["invoice_no"] 
                
                values = (email,)
                mycursor.execute("select member_id, (fs_name||' '|| ls_name) as mem_name from   member where email = ?", values)
                member = mycursor.fetchone()
                        
                items = []
                invoice_files = []
                record = []
                approvers = []
                delegate_info = []
                refered_reply = []
                
                mycursor.execute("select file_id, name, mime_type, file_link from   file_storage where file_id = ?", event["params"]["querystring"]["invoice_no"])
                
                for row in mycursor:
                    record = {
                        "invoice_id" : row["file_id"],
                        "file_name" : row["name"],
                        "mime_type" : row["mime_type"],
                        "file_link" : row["file_link"]
                    }
                    invoice_files.append(record)
                    
                values = (member["member_id"], invoiceNo)
                mycursor.execute("select m.member_id, (m.fs_name|| ' '|| m.ls_name) as member_name, refer_comment, accepted_comment, sr_no " \
                	"from   member m " \
                    "inner join   delegate d " \
                    "on m.member_id = d.delegated_to " \
                    "where d.delegated_from = ? and d.is_refered = 'y' and d.invoice_id = ? order by every_time", values)
                refered = mycursor.fetchall()
                
                if refered:
                    for row in refered:
                        temp = {
                            "sr_no": row["sr_no"],
                            "refered_from_id": member["member_id"],
                            "refered_from_name": member["mem_name"],
                            "refered_to_id": row["member_id"],
                            "refered_to_name": row["member_name"] ,
                            "refer_comment": row["refer_comment"],
                            "reply_comment": row["accepted_comment"]
                        }
                        refered_reply.append(temp)
                
                values = (member["member_id"], invoiceNo)
                mycursor.execute("select m.member_id, (m.fs_name|| ' '|| m.ls_name) as member_name, refer_comment, accepted_comment, sr_no " \
                	"from   member m " \
                    "inner join   delegate d " \
                    "on m.member_id = d.delegated_from " \
                    "where d.delegated_to = ? and d.is_refered = 'y' and d.invoice_id = ? order by every_time", values)
                delegate_member = mycursor.fetchall()
                
                if delegate_member:
                    for row in delegate_member:
                        temp = {
                            "sr_no": row["sr_no"],
                            "refered_from_id": row["member_id"],
                            "refered_from_name": row["member_name"],
                            "refered_to_id": member["member_id"],
                            "refered_to_name": member["mem_name"],
                            "refer_comment": row["refer_comment"],
                            "status": "Refered",
                            "reply_comment": row["accepted_comment"]
                        }
                        delegate_info.append(temp)
                
                values = (event["params"]["querystring"]["invoice_no"],)
                mycursor.execute("select a.*, b.value2 from   invoice_header a " \
                    "inner join   dropdown b on a.document_type = b.value1 where a.invoice_no = ?", values)
                invoice_header = mycursor.fetchone()
                
                if invoice_header:
                    mycursor.execute("select department_name from   departmental_budget_master where department_id = ?", (invoice_header["department_id"],))
                    department = mycursor.fetchone()
                    
                if department:
                    department_name = department["department_name"]
                    
                else:
                    department_name = None
                mycursor.execute("select value1 from elipo_setting where key_name = 'country'")
                country = mycursor.fetchone()   
                records = {
                    "user_invoice_id": invoice_header["user_invoice_id"],
                    "invoice_no": invoice_header["invoice_no"],
                    "document_type" : invoice_header["value2"],
                    "gstin": invoice_header["gstin"],
                    "in_status": invoice_header["in_status"],
                    "country":country['value1'],
                    "from_supplier": invoice_header["from_supplier"],
                    "ref_po_num": invoice_header["ref_po_num"],
                    "company_code": invoice_header["company_code"],
                    "invoice_date": str(invoice_header["invoice_date"]),
                    "posting_date": str(invoice_header["posting_date"]),
                    "baseline_date": str(invoice_header["baseline_date"]),
                    "amount": invoice_header["amount"],
                    "currency": invoice_header["currency"],
                    "payment_method": invoice_header["payment_method"],
                    "gl_account": invoice_header["gl_account"],
                    "business_area" : invoice_header["business_area"],
                    "supplier_id" : invoice_header["supplier_id"],
                    "supplier_name" : invoice_header["supplier_name"],
                    "approver_id" : invoice_header["approver_id"],
                    "approver_comments" : invoice_header["approver_comments"],
                    "modified_date" : str(invoice_header["modified_date"]),
                    "cost_center" : invoice_header["cost_center"],
                    "taxable_amount" : invoice_header["taxable_amount"],
                    "discount_per" : invoice_header["discount_per"],
                    "total_discount_amount" : invoice_header["total_discount_amount"],
                    "is_igst" : invoice_header["is_igst"],
                    "tax_per" : invoice_header["tax_per"],
                    "cgst_tot_amt": invoice_header["cgst_tot_amt"],
                    "sgst_tot_amt": invoice_header["sgst_tot_amt"],
	                "igst_tot_amt": invoice_header["igst_tot_amt"],
                    "tds_per": invoice_header["tds_per"],
                    "tds_tot_amt": invoice_header["tds_tot_amt"],
                    "payment_terms" : invoice_header["payment_terms"],
                    "adjustment" : invoice_header["adjustment"],
                    "supplier_comments" : invoice_header['supplier_comments'],
                    "department_id": invoice_header["department_id"],
                    "department_name": department_name,
                    "app_comment": invoice_header["app_comment"],
                    "tcs": invoice_header["tcs"],
                    "internal_order": invoice_header["internal_order"],
                    "irn": invoice_header["irn"],
                    "items" : items,
                    "files" : invoice_files,
                    "refer_details": delegate_info,
                    "refer_comment": refered_reply
                }
                
                mycursor.execute("select * from   invoice_item where invoice_no = ?", values)
                
                for row in mycursor:
                    record = {
                      "item_no":row["item_no"],
                      "material":row["material"],
                      "material_desc":row["material_desc"],
                      "quantity":row["quantity"],
                      "unit":row["unit"],
                      "amount":row["amount"],
                      "currency": row["currency"],
                      "amt_per_unit" : row["amt_per_unit"],
                      "cgst_per": row["cgst_per"],
                      "cgst_amount":row["cgst_amount"],
                      "tax_code":row["tax_code"],
                      "ref_po_no":row["ref_po_no"],
                      "plant":row["plant"],
                      "discount":row["discount"],
                      "discount_amount" : row["discount_amount"],
                      "gross_amount" : row["gross_amount"],
                      "sgst_per": row["sgst_per"],
                      "sgst_amount": row["sgst_amount"],
                      "igst_per": row["igst_per"],
                      "igst_amount": row["igst_amount"],
                      "taxable_amount": row["taxable_amount"],
                      "tax_value_amount": row["tax_value_amount"],
                      "gl_account": row["gl_account"],
                      "gst_per": row["gst_per"],
                      "hsn_code": row["hsn_code"]
                      }
                    items.append(record)
                    
                mycursor.execute("select member_id, group_id from   member where email = ?", event["params"]["querystring"]["userid"])
                member = mycursor.fetchone()
                
                sqlQuery = "update   approval set working_person = ? where ((isgroup = 'y' and approver = ?) or (isgroup = 'n' and approver = ?)) and invoice_no = ?"
                values = (member['member_id'], member['group_id'], member['member_id'], event["params"]["querystring"]["invoice_no"])
                mycursor.execute(sqlQuery, values)
                
                mydb.commit()
                    
                records["items"] = items

            elif "condn" in event["body-json"]:
                
                val_list = []
                pos = 0
                condn = ""
                records = {}
                
                refered_inv = []
                member_ids = []
                reply_list = []
                delegate_list = []

                for row in event["body-json"]["condn"]:

                    condn = condn + " and "

                    if str(row["operator"]) == "like":
                        val_list.append("%" + row["value"] + "%")
                        condn = condn + str(row["field"]) + " " + str(row["operator"]) + " " + "?"
                    elif str(row["operator"]) == "between":
                        val_list.append(row["value"])
                        val_list.append(row["value2"])
                        condn = condn + " " + str(row["field"]) + " between ? and ? "
                    else:
                        val_list.append(row["value"])
                        condn = condn + str(row["field"]) + " " + str(row["operator"]) + " " + "?"

                mycursor.execute("select member_id, delegate_to, until from   member where email = ?", event["params"]["querystring"]["userid"])
                member = mycursor.fetchone()

                mycursor.execute("select d.*,(m.fs_name||' '||m.ls_name) as member_name " \
                	"from   delegate d " \
                	"left join   member m " \
                    "on d.delegated_from = m.member_id " \
                	"where d.delegated_to = ? and (d.delegate_until >= CURDATE() or d.is_refered = 'y')", member['member_id'])
                delegated = mycursor.fetchall()
                
                if delegated:
                    values = []
                    for row in delegated:
                        if row["is_accepted"] == 'n':
                            if row["is_refered"] == 'n':
                                member_ids.append(row["delegated_from"])
                                
                            else:
                                values.append(row["delegated_from"])
                                refered_inv.append(row["invoice_id"])
                                
                            if row["is_refered"] == 'y':
                                delegate_list.append( {
                                    "refered_from_id":row["delegated_from"],
                                    "invoice_no": row["invoice_id"],
                                    "refered_from_name": row["member_name"],
                                    "refered_to_id": member["member_id"]
                                } )
                                
                        elif row["is_accepted"] == 'y':
                            reply_list.append( {
                                    "refered_from_id":row["delegated_from"],
                                    "invoice_no": row["invoice_id"],
                                    "refered_from_name": row["member_name"],
                                    "refered_to_id": member["member_id"],
                                    "accepted_comment": row["accepted_comment"],
                                    "request_comment": row["refer_comment"]
                                } )

                member_ids.append(member['member_id'])
                format_strings_mem = ','.join(['?'] * len(member_ids))

                sqlQuery = "select group_id FROM   member where member_id in ({})".format(format_strings_mem)
                mycursor.execute(sqlQuery, tuple(member_ids))
                grp_details = mycursor.fetchall()
                groups = [sub['group_id'] for sub in grp_details]

                format_strings_grp = ','.join(['?'] * len(groups))

                if member_ids and groups:

                    sqlQuery = "select invoice_no from   approval where " \
                               "(( isgroup = 'y' and approver in ({}) ) or ( isgroup = 'n' and approver in ({}) )) " \
                               "and ((pre_approval = 'y' or approval_level = 1 ) or approval_type = 'parallel') " \
                               "and isapproved = 'n'"
                    sqlQuery = sqlQuery.format(format_strings_grp, format_strings_mem)

                    values = tuple(groups + member_ids)
                    mycursor.execute(sqlQuery, values)
                    invoice_tup = mycursor.fetchall()
                    res = [sub['invoice_no'] for sub in invoice_tup]

                elif groups:

                    sqlQuery = "select invoice_no from   approval where isgroup = 'y' " \
                               "and approver in ({}) and ((pre_approval = 'y' or approval_level = 1 ) or approval_type = 'parallel') " \
                               "and isapproved = 'n'" .format(format_strings_grp)

                    mycursor.execute(sqlQuery, tuple(groups))
                    invoice_tup = mycursor.fetchall()
                    res = [sub['invoice_no'] for sub in invoice_tup]

                elif member_ids:

                    sqlQuery = "select invoice_no from   approval where isgroup = 'n' " \
                               "and approver in ({}) and ((pre_approval = 'y' or approval_level = 1 ) or approval_type = 'parallel') " \
                               "and isapproved = 'n'".format( format_strings_mem) + condn

                    mycursor.execute(sqlQuery, tuple(member_ids))
                    invoice_tup = mycursor.fetchall()
                    res = [sub['invoice_no'] for sub in invoice_tup]

                if res:
                    res = res + refered_inv
                    format_strings = ','.join(['?'] * len(res))
                    
                    if len(res) == 1:
                        mycursor.execute("select attach_id, file_id, name, mime_type, file_link from   file_storage where file_id = ?", res[0])
                        file = mycursor.fetchall()
                    elif len(res) > 1:
                        mycursor.execute("select attach_id, file_id, name, mime_type, file_link from   file_storage where file_id in {}".format(tuple(res))) 
                        file = mycursor.fetchall()

                    sqlQuery = "select invoice_no, invoice_date, user_invoice_id, amount, utctolocal(modified_date, 'UTC' ) as modified_date, supplier_id, " \
                    	"(m.fs_name|| ' '|| m.ls_name ) as modified_by, vm.vendor_name " \
                    	"FROM   invoice_header " \
                        "left join   vendor_master vm " \
                        "on supplier_id = vm.vendor_no " \
                        "inner join   member m " \
                        "on working_person = m.member_id " \
                    	"where in_status = 'inapproval' and invoice_no in ({})" .format(format_strings)
                    sqlQuery = sqlQuery + condn
                    
                    res = res + val_list
                    mycursor.execute(sqlQuery, tuple(res))

                    invoices = []

                    for row in mycursor:
                        
                        refer_details = []
                        if row["invoice_no"] in refered_inv:
                            for each in delegate_list:
                                if row["invoice_no"] == each["invoice_no"]:
                                    refer_details.append(each)
                                    
                        refered_reply = []
                        for sub in reply_list:
                            if row["invoice_no"] == sub["invoice_no"]:
                                refered_reply.append(sub)
                                
                        files = []
                        for data in file:
                            if str(row["invoice_no"]) == str(data["file_id"]):
                                temp = {
                                    "file_name" : data["name"],
                                    "mime_type" : data["mime_type"],
                                    "file_link" : data["file_link"]
                                }
                                files.append(temp)
                        
                        record = {
                            "invoice_no": row["invoice_no"],
                            "invoice_date": str(row["invoice_date"]),
                            "user_invoice_id": row["user_invoice_id"],
                            "amount": row["amount"],
                            "modified_date": str(row["modified_date"]),
                            "modified_by": row["modified_by"],
                            "supplier_id": row["supplier_id"],
                            "supplier_name": row["vendor_name"],
                            "invoice_files": files,
                            "refer_details": refer_details,
                            "refered_reply": refered_reply
                        }
                        invoices.append(record)
                    records["invoices"] = sorted(invoices, key = lambda i: i['invoice_no'],reverse=True)

                else:
                    invoices = []
                    records["invoices"] = invoices
                  
            else:
                
                invoice_files = []
                member_ids = []
                refered_inv = []
                delegate_list = []
                reply_list = []

                mycursor.execute("select member_id, delegate_to, until from   member where email = ?",event["params"]["querystring"]["userid"])
                member = mycursor.fetchone()
                
                mycursor.execute("select d.*, (m.fs_name||' '|| m.ls_name) as member_name " \
                	"from   delegate d " \
                	"left join   member m " \
                    "on d.delegated_from = m.member_id " \
                	"where d.delegated_to = ? and (d.delegate_until >= current_date or d.is_refered = 'y')", member['member_id'])
                delegated = mycursor.fetchall()
                
                if delegated:
                    values = []
                    for row in delegated:
                        if row["is_accepted"] == 'n':
                            if row["is_refered"] == 'n':
                                member_ids.append(row["delegated_from"])
                                
                            else:
                                values.append(row["delegated_from"])
                                refered_inv.append(row["invoice_id"])
                                
                            if row["is_refered"] == 'y':
                                delegate_list.append( {
                                    "refered_from_id":row["delegated_from"],
                                    "invoice_no": row["invoice_id"],
                                    "refered_from_name": row["member_name"],
                                    "refered_to_id": member["member_id"]
                                } )
                                
                        elif row["is_accepted"] == 'y':
                            reply_list.append( {
                                    "refered_from_id":row["delegated_from"],
                                    "invoice_no": row["invoice_id"],
                                    "refered_from_name": row["member_name"],
                                    "refered_to_id": member["member_id"],
                                    "accepted_comment": row["accepted_comment"],
                                    "request_comment": row["refer_comment"]
                                } )

                member_ids.append(member['member_id'])

                format_strings_mem = ','.join(['?'] * len(member_ids))

                sqlQuery = "select group_id FROM   member where member_id in ({})" .format(format_strings_mem)
                mycursor.execute(sqlQuery, tuple(member_ids))
                grp_details = mycursor.fetchall()
                groups = [sub['group_id'] for sub in grp_details]

                format_strings_grp = ','.join(['?'] * len(groups))
                
                invoice_tup = None
                
                if member_ids and groups:

                    sqlQuery = "select invoice_no, refer_completed from   approval where (( isgroup = 'y' and approver in ({}) ) or ( isgroup = 'n' and approver in ({}) )) " \
                        "and ((pre_approval = 'y' or approval_level = 1 ) or approval_type = 'parallel' or approval_type = 'single'  or  " \
		                "(approval_type = 'series' and referred_approver = 'y')) and isapproved = 'n' and refer_lock = 'n'"
                    sqlQuery = sqlQuery.format(format_strings_grp, format_strings_mem)

                    values = tuple(groups + member_ids)
                    mycursor.execute(sqlQuery, values)
                    invoice_tup = mycursor.fetchall()

                elif groups:

                    sqlQuery = "select invoice_no, refer_completed from   approval where isgroup = 'y' " \
                               "and approver in ({}) and ((pre_approval = 'y' or approval_level = 1 ) or approval_type = 'parallel' or approval_type = 'single') " \
                               "and isapproved = 'n' and refer_lock = 'n'".format(format_strings_grp)

                    mycursor.execute(sqlQuery, tuple(groups))
                    invoice_tup = mycursor.fetchall()

                elif member_ids:

                    sqlQuery = "select invoice_no, refer_completed from   approval where isgroup = 'n' " \
                               "and approver in ({}) and ((pre_approval = 'y' or approval_level = 1 ) or approval_type = 'parallel') " \
                               "and isapproved = 'n' and refer_lock = 'n'" .format(format_strings_mem)

                    mycursor.execute(sqlQuery, tuple(member_ids))
                    invoice_tup = mycursor.fetchall()
                    
                res = []
                refered_invoice_rply = []
                if invoice_tup:
                    for sub in invoice_tup:
                        res.append(sub["invoice_no"])
                        
                        if sub["refer_completed"] == 'y':
                            refered_invoice_rply.append(sub["invoice_no"])
                
                if delegate_list:
                    for each in delegate_list:
                        res.append(each['invoice_no'])
                        
                if res:
                    res = res + refered_inv
                    format_strings = ','.join(['?'] * len(res))
                    
                    sqlQuery = "select file_id, name, mime_type, file_link " \
                        "from   file_storage " \
                        "where file_id in ({}) order by file_id desc".format(format_strings)
                    mycursor.execute(sqlQuery, tuple(res))
                    file = mycursor.fetchall()
                    
                    for row in file:
                        record = {
                            "invoice_id" : row["file_id"], 
                            "file_name" : row["name"],
                            "mime_type" : row["mime_type"],
                            "file_link" : row["file_link"]
                        }
                        invoice_files.append(record)
                    
                    sqlQuery = "select a.invoice_no, a.user_invoice_id, a.invoice_date, a.amount, a.currency, utctolocal(a.modified_date, 'UTC' ) as modified_date, " \
                        "b.fs_name, b.ls_name, c.vendor_name " \
                    	"FROM   invoice_header a " \
                        "left join   member b " \
                        "on a.working_person = b.member_id " \
                        "left join   vendor_master c " \
                        "on a.supplier_id = c.vendor_no " \
                    	"where in_status = 'inapproval' and invoice_no in ({}) order by a.invoice_no desc" .format(format_strings)
                    mycursor.execute(sqlQuery, tuple(res))

                    invoices = []

                    for row in mycursor:
                        refer_details = []
                        if row["invoice_no"] in refered_inv:
                            for each in delegate_list:
                                if row["invoice_no"] == each["invoice_no"]:
                                    refer_details.append(each)
                                    
                        refered_reply = []
                        for sub in reply_list:
                            if row["invoice_no"] == sub["invoice_no"]:
                                refered_reply.append(sub)
                        
                        files = []
                        for data in invoice_files:
                            
                            if str(row["invoice_no"]) == str(data["invoice_id"]):
                                temp = {
                                    "file_name" : data["file_name"],
                                    "mime_type" : data["mime_type"],
                                    "file_link" : data["file_link"]
                                }
                                files.append(temp)
                                
                        record = {
                            "invoice_no": row["invoice_no"],
                            "user_invoice_id": row["user_invoice_id"],
                            "invoice_date": str(row["invoice_date"]),
                            "amount": row["amount"],
                            "currency": row["currency"],
                            "supplier_name": row["vendor_name"],
                            "modified_date": str(row["modified_date"]),
                            "modified_by": str(row["fs_name"]) + " " + str(row["ls_name"]),
                            "invoice_files": files,
                            "refer_details": refer_details,
                            "refered_reply": refered_reply
                        }
                        invoices.append(record)
                    records["invoices"] = invoices

                else:
                    invoices = []
                    records["invoices"] = invoices 

    except:
        mydb.rollback()   
        return {
            'statuscode': 500,
            'body': json.dumps("Internal Failure")
        }

    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': records
    }
  
    
# event = {'body-json': {}, 'params': {'path': {}, 'querystring': {'userid': 'einvoiceportal@gmail.com'}, 'header': {'accept': 'application/json, text/plain, */*', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'en-US,en;q=0.9', 'Authorization': 'eyJraWQiOiJ1RXlLMTdnUjUzTVVMcXUrYkRsQUZ2NHRSUTR0VVM5KzM4NlwvZnpxMWorQT0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiI5NDkxOTNiMi1hZWQ2LTQxZGUtOTM2YS04MGRjMTEzNjUxNzIiLCJhdWQiOiIyNGJqZTRqdWQ4aDNmOHJzbmtraGcwYmx2MSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJldmVudF9pZCI6IjEwOTIwNDUyLTZhYzAtNGNmZC04OWQ3LTIwNTFkODRmNmU3MyIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjg2ODA2OTkwLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAuZXUtY2VudHJhbC0xLmFtYXpvbmF3cy5jb21cL2V1LWNlbnRyYWwtMV9QOXJubnFpTHUiLCJjb2duaXRvOnVzZXJuYW1lIjoiOTQ5MTkzYjItYWVkNi00MWRlLTkzNmEtODBkYzExMzY1MTcyIiwiZXhwIjoxNjg2ODEwNTg5LCJpYXQiOjE2ODY4MDY5OTAsImVtYWlsIjoiZWludm9pY2Vwb3J0YWxAZ21haWwuY29tIn0.lZSNWrOF-QgaJt-1PTRkdagvmASZikbd7klWEaQiBapb2wnZCRvLV6PTibHmBi8LykVCmQgzvwrrPp4QqTaFwfK7zxKrIT5RyrWxXhosKQtQ5VRyMKCDiHI0PXIYUeleYghePZLhclgPvFT1lSUhq8n0cr26LQwmWP6NT75rRCeEzo-hr3FXQQqnpMkC7erVaMe94cUcL9w1APXr3mMYJxHTG3Al9n-0gML1TMGqNzdc0Npz9OZEIkoatUPJdAKOGbye3F5AvtQMKMLCJHDZsTd5JuySLZ9OREajizjwxYvpeAzTNkRCvkzOVSN-K9wMMQ7X1teeUmfcxv_TWF7rLA', 'content-type': 'application/json', 'Host': 'overview.peoltechnologies.net', 'origin': 'https://ywi7o0pxhc.execute-api.eu-central-1.amazonaws.com', 'referer': 'https://ywi7o0pxhc.execute-api.eu-central-1.amazonaws.com/', 'sec-ch-ua': '"Not.A/Brand";v="8", "Chromium";v="114", "Google Chrome";v="114"', 'sec-ch-ua-mobile': '?0', 'sec-ch-ua-platform': '"Windows"', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'cross-site', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36', 'X-Amzn-Trace-Id': 'Root=1-648aa1d2-5ae7898c16b45426033d6490', 'X-Forwarded-For': '49.207.51.244', 'X-Forwarded-Port': '443', 'X-Forwarded-Proto': 'https'}}, 'stage-variables': {'schema': 'einvoice_db_portal', 'lambda_alias': 'dev', 'secreat': 'test/einvoice/secret', 'notification_email': 'elipotest@gmail.com', 'ocr_bucket_folder': 'old-dev/', 'cred_bucket': 'file-bucket-emp'}, 'context': {'account-id': '', 'api-id': '5ud4f0kv53', 'api-key': '', 'authorizer-principal-id': '', 'caller': '', 'cognito-authentication-provider': '', 'cognito-authentication-type': '', 'cognito-identity-id': '', 'cognito-identity-pool-id': '', 'http-method': 'POST', 'stage': 'einvoice-v1', 'source-ip': '49.207.51.244', 'user': '', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36', 'user-arn': '', 'request-id': 'bf00a5d7-7b8c-4767-90ef-aeb6ec0b77b0', 'resource-id': 'vi859p', 'resource-path': '/inbox'}}
# print(getInboxApprovals(event, ' '))

# event = {
#     "body-json" : {
#         "condn": [
#                 {
#                     "field": "company_code",
#                     "operator": "=",
#                     "value": "1000"
#                 }
#         ]
#     },
#   "params" : {
#       "querystring" : {
#           "userid" : "einvoiceportal@gmail.com"
#       }
#   }
# }
# context = ""

# print(lambda_handler(event,context))

#working fine for event  passed
def deleteInvoiceLog(event, context):
    
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='eu-central-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )
    # secret = event["stage-variables"]["secreat"]
    # resp = client.get_secret_value(
    #     SecretId= secret
    # )
    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()
    
    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            if "invoice_no" in event["params"]["querystring"]:
                sqlQuery = "DELETE FROM invoice_log WHERE invoice_no = ?"
                values = (event["params"]["querystring"]["invoice_no"])
                mycursor.execute(sqlQuery, values)  
                
            elif "userid" in event["params"]["querystring"]:
                sqlQuery = "select member_id from member where email = ?"
                values = (event["params"]["querystring"]["userid"],)
                mycursor.execute(sqlQuery, values)
                member = mycursor.fetchone()
                
                values = (member["member_id"],)
                mycursor.execute("delete FROM invoice_log WHERE member_id = ? ", values)
                
            mydb.commit()
            
    except:
        return {
            'statuscode': 500,
            'body': json.dumps("unable to delete")
        }
            
    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': json.dumps("Delete Successful!")
    }
# event = {'body-json': {}, 'params': {'path': {}, 'querystring': {'userid': 'einvoiceportal@gmail.com'}, 'header': {'accept': 'application/json, text/plain, */*', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'en-US,en;q=0.9', 'Authorization': 'eyJraWQiOiJ1RXlLMTdnUjUzTVVMcXUrYkRsQUZ2NHRSUTR0VVM5KzM4NlwvZnpxMWorQT0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiI5NDkxOTNiMi1hZWQ2LTQxZGUtOTM2YS04MGRjMTEzNjUxNzIiLCJhdWQiOiIyNGJqZTRqdWQ4aDNmOHJzbmtraGcwYmx2MSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJldmVudF9pZCI6ImZkYTRhYWJmLWMyNzQtNGFhZS1hZDUyLTNlMjBhOGE1MmFhYiIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjg3MTQ3MzcyLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAuZXUtY2VudHJhbC0xLmFtYXpvbmF3cy5jb21cL2V1LWNlbnRyYWwtMV9QOXJubnFpTHUiLCJjb2duaXRvOnVzZXJuYW1lIjoiOTQ5MTkzYjItYWVkNi00MWRlLTkzNmEtODBkYzExMzY1MTcyIiwiZXhwIjoxNjg3MTUwOTcyLCJpYXQiOjE2ODcxNDczNzIsImVtYWlsIjoiZWludm9pY2Vwb3J0YWxAZ21haWwuY29tIn0.ZbcqC9IXDcZUbxkuJvgzsvq2LKOauvvwKyL9sSmprQiMhzSwJ0iZVwq177ETiD_TRdEndHoMiXKWyi7RX2QHWAkFESl6IZpQIap3dapb32P8L7mkXcWFFRUc902BRgj9eETV7eACfmp40mhKws2ejdtY-13kEbIvk5GN6-jrCESInjKx5qHbePA-YkY9vCb_Re54YKFX5aW0SEzszf2-QI2x13uwMQo1NvuPX72cToagNDXA_JW1bzi871vqP-6Bmg1tSvYvwoTYBHTSakrV7faurRB5q9jCNxz7XojWJvqzAn1x5wNKlNm7IUs4foGVs5TDObml8mXExfq2qXMYJg', 'Host': 'overview.peoltechnologies.net', 'origin': 'https://ywi7o0pxhc.execute-api.eu-central-1.amazonaws.com', 'referer': 'https://ywi7o0pxhc.execute-api.eu-central-1.amazonaws.com/', 'sec-ch-ua': '"Not.A/Brand";v="8", "Chromium";v="114", "Google Chrome";v="114"', 'sec-ch-ua-mobile': '?0', 'sec-ch-ua-platform': '"Windows"', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'cross-site', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36', 'X-Amzn-Trace-Id': 'Root=1-648fdb5e-3739d1685a33ca5f41b604f6', 'X-Forwarded-For': '49.207.52.138', 'X-Forwarded-Port': '443', 'X-Forwarded-Proto': 'https'}}, 'stage-variables': {'schema': 'einvoice_db_portal', 'lambda_alias': 'dev', 'secreat': 'test/einvoice/secret', 'notification_email': 'elipotest@gmail.com', 'ocr_bucket_folder': 'old-dev/', 'cred_bucket': 'file-bucket-emp'}, 'context': {'account-id': '', 'api-id': '5ud4f0kv53', 'api-key': '', 'authorizer-principal-id': '', 'caller': '', 'cognito-authentication-provider': '', 'cognito-authentication-type': '', 'cognito-identity-id': '', 'cognito-identity-pool-id': '', 'http-method': 'DELETE', 'stage': 'einvoice-v1', 'source-ip': '49.207.52.138', 'user': '', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36', 'user-arn': '', 'request-id': 'd288ce77-113a-407b-8303-cec71d3dfe8e', 'resource-id': 'qzviv3', 'resource-path': '/invoice-log'}}
# print(deleteInvoiceLog(event, ' '))
#event not found 
def getErrorLog(event, context):
    
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='ap-south-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )

    # secret = event["stage-variables"]["secreat"]

    # resp = client.get_secret_value(
    #     SecretId= secret
    # ) 

    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()
    
    records = []
                
    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            if "invoice_no" not in event["params"]["querystring"]:
                mycursor.execute("SELECT a.*, (b.fs_name|| ' '||b.ls_name) as member_name FROM  invoice_log a left join   member b on a.member_id = b.member_id")
                
                for row in mycursor:
                    data = {
                        "invoice_no": row["invoice_no"],
                        "entry_timestamp": str(row["entry_timestamp"]),
                        "member_id": row["member_id"],
                        "member_name": row["member_name"]
                    }
                    records.append(data)
                    
            else:
                
                invoice_no = event["params"]["querystring"]["invoice_no"]
                mycursor.execute("select * from   invoice_log where invoice_no = ?", invoice_no)
                invoice = mycursor.fetchone()
                # invoice = convertValuesTodict(mycursor.description,invoice)
                # invoice = invoice[0]
                
                if invoice:
                    msg = "This invoice is currently edited by Member ID " + str(invoice["member_id"])
                    records = {
                        "flag": "y",
                        "msg": msg
                    }
                    
                else:
                    records = {
                        "flag": "n"
                    }
            
    except :
        return {
            'statusCode': 500,
            'body': json.dumps("Internal Failure")
        }
            
    finally:
        mydb.close()
        
    return {
        'statusCode': 200,
        'body': records
    }

#working fine for event passed    
def deleteMasterDetails(event, context):
    
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='ap-south-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )

    # secret = event["stage-variables"]["secreat"]

    # resp = client.get_secret_value(
    #     SecretId= secret
    # )  

    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()
    # print(event)

    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            if len(event["params"]["querystring"]["codes"].split(',')) == 1:
                values = (event["params"]["querystring"]["master_id"],event["params"]["querystring"]["codes"])
                mycursor.execute("DELETE FROM master WHERE master_id = ? and code = ?",values)
            else:
                mycursor.execute("DELETE FROM master WHERE master_id = ? and code in {}".format(tuple(event["params"]["querystring"]["codes"].split(','))),(event["params"]["querystring"]["master_id"]))
            
            mydb.commit()
            
            msg = "Code" + event["params"]["querystring"]["codes"] + " deleted" 
            
    except:
        
        return {
            'statuscode': 500,
            'body': json.dumps("unable to delete")
        }
            
    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': json.dumps(msg)
    }
# event = {'body-json': {}, 'params': {'path': {}, 'querystring': {'codes': '25526', 'master_id': '1'}, 'header': {'accept': 'application/json, text/plain, */*', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'en-US,en;q=0.9', 'Authorization': 'eyJraWQiOiJ1RXlLMTdnUjUzTVVMcXUrYkRsQUZ2NHRSUTR0VVM5KzM4NlwvZnpxMWorQT0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiI5NDkxOTNiMi1hZWQ2LTQxZGUtOTM2YS04MGRjMTEzNjUxNzIiLCJhdWQiOiIyNGJqZTRqdWQ4aDNmOHJzbmtraGcwYmx2MSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJldmVudF9pZCI6ImQ4MjE1ZTJiLWRjNzAtNGQ0NS1iMWQ2LTA4NDYxMGJjNTRjZSIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjYyNTUwMDA4LCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAuZXUtY2VudHJhbC0xLmFtYXpvbmF3cy5jb21cL2V1LWNlbnRyYWwtMV9QOXJubnFpTHUiLCJjb2duaXRvOnVzZXJuYW1lIjoiOTQ5MTkzYjItYWVkNi00MWRlLTkzNmEtODBkYzExMzY1MTcyIiwiZXhwIjoxNjYyNTUzNjA4LCJpYXQiOjE2NjI1NTAwMDgsImVtYWlsIjoiZWludm9pY2Vwb3J0YWxAZ21haWwuY29tIn0.TCLTue_92FocpzmhNUsRqjLX2MNYI6r8NDXw31mIfoHQeAWMIpmZqYxjUnMckjKUwHcE3VJvEz4BWdWMyUIF3xT1EsXTZDNmKyNZQOYadd8Mj1hhaMXQXyqR8lSveEqCqrDf-M7NMevIQKkOq-xQA2lPAThetjUrZ_A85gIkCxYNbdqOE_M-Bk9DzRlmiQ5YlnJxlOUrSQUnTOlHx7IimsPyd10xUbF0mOBfQ4WhF6Pl4vtmf3pxzpptoXXPbqMlDvDssqVDoeTp9bPuR4DELQow5P48xfB92wDgji4D99yAOgNEkUA_Tx6KCbwb1ceXDm28HqTQs1lpuXE6M6DMVg', 'Host': 'overview.peoltechnologies.net', 'origin': 'https://ywi7o0pxhc.execute-api.eu-central-1.amazonaws.com', 'referer': 'https://ywi7o0pxhc.execute-api.eu-central-1.amazonaws.com/', 'sec-ch-ua': '"Google Chrome";v="105", "Not)A;Brand";v="8", "Chromium";v="105"', 'sec-ch-ua-mobile': '?0', 'sec-ch-ua-platform': '"Windows"', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'cross-site', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 'X-Amzn-Trace-Id': 'Root=1-631880ec-023e00737ccfcf753c223744', 'X-Forwarded-For': '49.206.131.186', 'X-Forwarded-Port': '443', 'X-Forwarded-Proto': 'https'}}, 'stage-variables': {'schema': 'einvoice_db_portal', 'lambda_alias': 'dev', 'secreat': 'test/einvoice/secret', 'notification_email': 'elipotest@gmail.com', 'ocr_bucket_folder': 'old-dev/', 'cred_bucket': 'file-bucket-emp'}, 'context': {'account-id': '', 'api-id': '5ud4f0kv53', 'api-key': '', 'authorizer-principal-id': '', 'caller': '', 'cognito-authentication-provider': '', 'cognito-authentication-type': '', 'cognito-identity-id': '', 'cognito-identity-pool-id': '', 'http-method': 'DELETE', 'stage': 'einvoice-v1', 'source-ip': '49.206.131.186', 'user': '', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 'user-arn': '', 'request-id': 'b00bb280-7303-4a0a-a99f-cfcb6c2daea6', 'resource-id': 'vbpofh', 'resource-path': '/master'}}
# print(deleteMasterDetails(event, ' '))
#working but column names not converted to uppercase
def getMasterDetails(event, context):
            
    global dbScehma 

    dbScehma = ' DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='ap-south-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )

    # secret = event["stage-variables"]["secreat"]

    # resp = client.get_secret_value(
    #     SecretId= secret
    # ) 

    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()
    # print(event)
    
    master = []

    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)


            if "querystring" in event["params"]:
                
                if "master_id" in event["params"]["querystring"]:
                    
                    if event["params"]["querystring"]["master_id"] == "4":
                        
                        mycursor.execute("select * from vendor_master")
                        
                        for row in mycursor:
                            record = {
                                "master_id" : event["params"]["querystring"]["master_id"],
                                "vendor_no" : row["vendor_no"], 
                                "vendor_name" : row["vendor_name"], 
                                "gst_treatment" : row["gst_treatment"], 
                                "gstin_uin" : row["gstin_uin"], 
                                "source_of_supply" : row["source_of_supply"], 
                                "currency" : row["currency"], 
                                "payment_terms" : row["payment_terms"], 
                                "tds" : row["tds"], 
                                "gst_per" : row["gst_per"], 
                                "pan" : row["pan"]
                            }
                            master.append(record)
                            
                    elif event["params"]["querystring"]["master_id"] == "8":
                        
                        mycursor.execute("select * from material_master")
                        
                        for row in mycursor:
                            record = {
                                "master_id" : event["params"]["querystring"]["master_id"],
                                "material_no" : row["material_no"], 
                                "material_name" : row["material_name"], 
                                "gst_per" : row["gst_per"], 
                                "unit_price" : row["unit_price"], 
                                "gl_account" : row["gl_account"]
                            }
                            master.append(record)
                            
                    else:
                    
                        sqlQuery = "select * from master where master_id = ?"
                        values = (event["params"]["querystring"]["master_id"],)
                        mycursor.execute(sqlQuery, values)
                        temp = mycursor.fetchall()
                        # temp = convertValuesTodict(mycursor.description,mycursor.fetchall())
                        for row in temp:
                            record = {
                                'master_id' : row["master_id"],
                                'master_name': row["master_name"],
                                'code': row["code"],
                                'description': row["description"],
                                'tax_treatement':row['TAX_TREATEMENT']
                            }
                            master.append(record)
    
    except:
        return {
            'statuscode': 500,
            'body': json.dumps("Unknown Error while fetching")
        }
        
    finally:
        mydb.close()
    
    return {
        'statuscode': 200,
        'body': master
    }

#working fine for event passed
def patchMasterDetails(event, context):
    global dbScehma 
    dbScehma = ' DBADMIN '

    # client = boto3.client(
    # 'secretsmanager',
    # region_name='ap-south-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )
    # secret = event["stage-variables"]["secreat"]
    # resp = client.get_secret_value(
    #     SecretId= secret
    # )
    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()
    
    record = {
        "code": "",
        "description": "",
        "tax_treatement":"",
        "vendor_no": "",
        "vendor_name": "",
        "gst_treatment": "",
        "gstin_uin": "",
        "source_of_supply": "",
        "currency": "",
        "payment_terms": "",
        "tds": "",
        "gst_per": "",
        "pan": "",
        "material_no": "", 
        "material_name": "", 
        "gst_per": "", 
        "unit_price": "", 
        "gl_account": ""
    }
    try:
        for value in event["body-json"]:
            if value in record:
                record[value] = event["body-json"][value]
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)

            if event["params"]["querystring"]["master_id"] == "8":
                sqlQuery = "update material_master set material_name = ?, gst_per = ?, unit_price = ?, gl_account = ? where material_no = ?"
                values = (record["material_name"], record["gst_per"], record["unit_price"], record["gl_account"], record["material_no"])
                mycursor.execute(sqlQuery, values)
                
            elif event["params"]["querystring"]["master_id"] == "4":
                sqlQuery = "update vendor_master set vendor_name = ?, gst_treatment = ?, gstin_uin = ?, source_of_supply = ?, currency = ?, " \
                        "payment_terms = ?, tds = ?, gst_per = ?, pan = ? where vendor_no = ?"
                values = ( record["vendor_name"], record["gst_treatment"], record["gstin_uin"], record["source_of_supply"], record["currency"],
                            record["payment_terms"], record["tds"], record["gst_per"], record["pan"], record["vendor_no"] )
                mycursor.execute(sqlQuery, values)
            
            if "description" in event["body-json"] and "code" in event["body-json"]:
                
                if 'tax_treatement' in event["body-json"]:
                    sqlQuery = "update master set code = ?, description = ? , tax_treatement = ? where master_id = ? and code = ?"
                    values = (record["code"], record["description"], record["tax_treatement"],  event["params"]["querystring"]["master_id"], event["params"]["querystring"]["code"])
                else:
                    sqlQuery = "update master set code = ?, description = ? where master_id = ? and code = ?"
                    values = (record["code"], record["description"],  event["params"]["querystring"]["master_id"], event["params"]["querystring"]["code"])
                
                mycursor.execute(sqlQuery, values)
                
                msg = "Code " + event["params"]["querystring"]["code"] + " updated to " + str(event["body-json"]["code"]) + " " + event["body-json"]["description"]
                
            elif "code" in event["body-json"]:
                
                sqlQuery = "update master set code = ? where master_id = ? and code = ?"
                
                values = (record["code"],  event["params"]["querystring"]["master_id"], event["params"]["querystring"]["code"])
                
                mycursor.execute(sqlQuery, values)
                
                msg = "Code " + event["params"]["querystring"]["code"] + " updated to " + event["body-json"]["code"]
                
            elif "description" in event["body-json"]:
                
                sqlQuery = "update master set description = ? where master_id = ? and code = ?"
                
                values = (record["description"],  event["params"]["querystring"]["master_id"], event["params"]["querystring"]["code"])
                
                mycursor.execute(sqlQuery, values)
                
                msg = "Code " + event["params"]["querystring"]["code"] + " updated Description " + event["body-json"]["description"]

            
            
            # msg = "Code " + event["params"]["querystring"]["code"] + " updated"  
            
            mydb.commit()
            
    except:
        
        return {
            'statuscode': 500,
            'body': json.dumps("Internal Failure")
        }
            
    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': json.dumps("Successfully updated")
    }
# event = {'body-json': {'code': 'PC', 'description': 'Piece', 'tax_treatement': None}, 'params': {'path': {}, 'querystring': {'code': 'PC', 'master_id': '6'}, 'header': {'accept': 'application/json, text/plain, */*', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'en-US,en;q=0.9', 'Authorization': 'eyJraWQiOiJ1RXlLMTdnUjUzTVVMcXUrYkRsQUZ2NHRSUTR0VVM5KzM4NlwvZnpxMWorQT0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiI5NDkxOTNiMi1hZWQ2LTQxZGUtOTM2YS04MGRjMTEzNjUxNzIiLCJhdWQiOiIyNGJqZTRqdWQ4aDNmOHJzbmtraGcwYmx2MSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJldmVudF9pZCI6ImRmYzI5MTVjLTIxZmQtNGQwZS04N2I5LWJkNzNmMDQ1MWM5MCIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjU4Mjk2MjY2LCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAuZXUtY2VudHJhbC0xLmFtYXpvbmF3cy5jb21cL2V1LWNlbnRyYWwtMV9QOXJubnFpTHUiLCJjb2duaXRvOnVzZXJuYW1lIjoiOTQ5MTkzYjItYWVkNi00MWRlLTkzNmEtODBkYzExMzY1MTcyIiwiZXhwIjoxNjU4Mjk5ODY2LCJpYXQiOjE2NTgyOTYyNjYsImVtYWlsIjoiZWludm9pY2Vwb3J0YWxAZ21haWwuY29tIn0.lklz1vXJ46ZvWPxNlSZ9Mtc1DkjN1ISFkkhS-X6nhWoRD741mXBkWSdQhsyBlafTcrjob6zlrHa8h7jDt2wxyQO6YchYe7MH7YZv5eL5AmtuTA9Mv4XGGe1h24nxMeEEtzFzdtJEq6ZT3ytrTH5nHCACcdyLQQsDlQobiI-82kRt68jvgGe3olYQTcKQV1K29Ya_-cpUWtITFXG6b8ycFFo-VfkDS9WLU3EmPhVlbRzvTTgJDvczzuPCV3SbKYB4TUhhO_ZTYuodrVXcWDZG1c3tkTF4gm9fauFXvAz7QgkHszY1CNbv_Lu-Xwbv_XRMHNlDTg_duiUV2l3odCXUoQ', 'content-type': 'application/json', 'Host': 'overview.peoltechnologies.net', 'origin': 'https://ywi7o0pxhc.execute-api.eu-central-1.amazonaws.com', 'referer': 'https://ywi7o0pxhc.execute-api.eu-central-1.amazonaws.com/', 'sec-ch-ua': '".Not/A)Brand";v="99", "Google Chrome";v="103", "Chromium";v="103"', 'sec-ch-ua-mobile': '?0', 'sec-ch-ua-platform': '"Windows"', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'cross-site', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36', 'X-Amzn-Trace-Id': 'Root=1-62d79a44-460d5e0364f3a7bb67100702', 'X-Forwarded-For': '49.206.135.166', 'X-Forwarded-Port': '443', 'X-Forwarded-Proto': 'https'}}, 'stage-variables': {'schema': 'einvoice_db_portal', 'lambda_alias': 'dev', 'secreat': 'test/einvoice/secret', 'notification_email': 'elipotest@gmail.com', 'ocr_bucket_folder': 'old-dev/', 'cred_bucket': 'file-bucket-emp'}, 'context': {'account-id': '', 'api-id': '5ud4f0kv53', 'api-key': '', 'authorizer-principal-id': '', 'caller': '', 'cognito-authentication-provider': '', 'cognito-authentication-type': '', 'cognito-identity-id': '', 'cognito-identity-pool-id': '', 'http-method': 'PATCH', 'stage': 'einvoice-v1', 'source-ip': '49.206.135.166', 'user': '', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36', 'user-arn': '', 'request-id': '442abe7b-587f-4858-bc0c-b9d05bda8e20', 'resource-id': 'vbpofh', 'resource-path': '/master'}}
# print(patchMasterDetails(event, ' '))
#working fine for event
def postMasterDetails(event, context):
    
    global dbScehma 
    dbScehma = ' DBADMIN '
  
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='ap-south-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )

    # secret = event["stage-variables"]["secreat"]

    # resp = client.get_secret_value(
    #     SecretId= secret
    # )

    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()

    try:
        
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            msg = "Inserted Successfully!"
            if "master_id" not in event["body-json"]:
                
                if "codes" in event["body-json"] and "master_name" in event["body-json"]:
                    
                    sqlQuery = "select * from master where master_name = ?"
                    values = (event["body-json"]["master_name"],)
                      
                    mycursor.execute(sqlQuery, values)
                      
                    if mycursor.rowcount > 0:
                        return {
                            'statuscode': 500,
                            'body': json.dumps("Master already Available")
                        }
                        
                    mycursor.execute("SELECT max(master_id) as cnt FROM master")
                    
                    distinct_masters = mycursor.fetchone() 
                    
                    new_master = distinct_masters["cnt"] + 1
            
                    values = []
                
                    for row in event["body-json"]["codes"]:
                        touple = (new_master, row["code"], event["body-json"]["master_name"], row["description"])
                        values.append(touple)
                    
                    
                    sqlQuery = "INSERT INTO master (master_id, code, master_name, description) VALUES (?, ?, ?, ? )"
                    
                    mycursor.executemany(sqlQuery, values)
                    
                    values = ('master', new_master, event["body-json"]["master_name"])
                    
                    sqlQuery = "INSERT INTO dropdown (drop_key, value1, value2) VALUES (?, ?, ?)"
            
                    mycursor.execute(sqlQuery, values)
                
                    # master_id = mycursor.lastrowid
                    
            elif "codes" in event["body-json"]:
                
                if "import_entries" in event["params"]["querystring"] and event["body-json"]["master_id"] == "4":
                    mycursor.execute("delete from vendor_master")
                    
                elif "import_entries" in event["params"]["querystring"] and event["body-json"]["master_id"] == "8":
                    mycursor.execute("delete from material_master")
                    
                elif "import_entries" in event["params"]["querystring"]:
                    sqlQuery = "delete from master where master_id = ?"
                    masterid = (event["body-json"]["master_id"],)
                    mycursor.execute(sqlQuery, masterid)
                    
                sqlQuery = "select value2 from dropdown where drop_key = 'master' and value1 = ?"
                masterid = (event["body-json"]["master_id"],)
                
                mycursor.execute(sqlQuery, masterid)
                mast = mycursor.fetchone()
                
                master_name = mast["value2"]
                
                values = []
                if event["body-json"]["master_id"] == "4":
                    sqlQuery = "insert into vendor_master (vendor_no, vendor_name, gst_treatment, gstin_uin, source_of_supply, currency, " \
                        "payment_terms, tds, gst_per, pan) values (?, ?, ?, ?, ?, ?, ?, ? , ?, ?)"
                    for row in event["body-json"]["codes"]:
                        touple = (row["vendor_no"], row["vendor_name"], row["gst_treatment"], row["gstin_uin"], row["source_of_supply"], row["currency"],
                                    row["payment_terms"], row["tds"], row["gst_per"], row["pan"])
                        values.append(touple)
                        mycursor.execute(sqlQuery, touple)
                    # sqlQuery = "insert into vendor_master (vendor_no, vendor_name, gst_treatment, gstin_uin, source_of_supply, currency, " \
                    #     "payment_terms, tds, gst_per, pan) values (?, ?, ?, ?, ?, ?, ?, ? , ?, ?)"
                        
                elif event["body-json"]["master_id"] == "8":
                    sqlQuery = "insert into material_master (material_no, material_name, gst_per, unit_price, gl_account)" \
                        "values (?, ?, ?, ?, ?)"
                    for row in event["body-json"]["codes"]:
                        touple = (row["material_no"], row["material_name"], row["gst_per"], row["unit_price"], row["gl_account"])
                        values.append(touple)
                        mycursor.execute(sqlQuery, touple)
                    # sqlQuery = "insert into material_master (material_no, material_name, gst_per, unit_price, gl_account)" \
                    #     "values (?, ?, ?, ?, ?)"
                    
                else:
                    sqlQuery = "INSERT INTO master (master_id, code, master_name, description) VALUES (?, ?, ?, ? )"
                    for row in event["body-json"]["codes"]:
                        touple = (int(event["body-json"]["master_id"]), row["code"], master_name, row["description"])
                        values.append(touple)
                        mycursor.execute(sqlQuery, touple)
                    # sqlQuery = "INSERT INTO master (master_id, code, master_name, description) VALUES (?, ?, ?, ? )"
                
                # mycursor.executemany(sqlQuery, values)
              
            mydb.commit()
            
    except pymysql.err.IntegrityError as e:
        mydb.rollback()
        msg = "Duplicate entry code"
        return {
            'statuscode': 500,
            'body': json.dumps(msg)
        }
            
    except Exception as e:
        mydb.rollback()
        msg =  str(e) 
        return {
            'statuscode': 500,
            'body': json.dumps('inserted')
        }
            
    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': json.dumps(msg)
    }

# event = {'body-json': {'master_id': '1', 'codes': [{'code': 'cc', 'description': 'ii', 'tax_treatement': 'india'}]}, 'params': {'path': {}, 'querystring': {}, 'header': {'accept': 'application/json, text/plain, */*', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'en-US,en;q=0.9', 'Authorization': 'eyJraWQiOiJ1RXlLMTdnUjUzTVVMcXUrYkRsQUZ2NHRSUTR0VVM5KzM4NlwvZnpxMWorQT0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiI5NDkxOTNiMi1hZWQ2LTQxZGUtOTM2YS04MGRjMTEzNjUxNzIiLCJhdWQiOiIyNGJqZTRqdWQ4aDNmOHJzbmtraGcwYmx2MSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJldmVudF9pZCI6IjdmMGYzMGM3LWYzMWEtNGVjYy05MzQzLWQ4NDYxNDYwNWI3NCIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjY2MjYxMzAzLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAuZXUtY2VudHJhbC0xLmFtYXpvbmF3cy5jb21cL2V1LWNlbnRyYWwtMV9QOXJubnFpTHUiLCJjb2duaXRvOnVzZXJuYW1lIjoiOTQ5MTkzYjItYWVkNi00MWRlLTkzNmEtODBkYzExMzY1MTcyIiwiZXhwIjoxNjY2MjY0OTAzLCJpYXQiOjE2NjYyNjEzMDMsImVtYWlsIjoiZWludm9pY2Vwb3J0YWxAZ21haWwuY29tIn0.Fz_VpmvuGgNHkK8KljMr2aaYF3kh80eLholQGbqqxDgi4b_TtOYp00WsYldgTy8HJMMhiNFai6atHsLzN2SAPzXViuCUhV9JdWhWA0JsYgwNEz28t2uTyJcaZ1gkKgUMqhURawFQYE7BNzbZzX7k9qKynxp0BLjTZOpqnJmDAbVr2WMOdmuW42sK2PspgiWqLTqxV3jhUrR8fKonixSV0ch2qEGm67EG8ipZgUtw0weqxn6jYMurcPgX9gGsyBYQl8HkEhcX-e2sOgbuHlx2m1ckhGE17coGbEP7XvE_91KQW0FetT5kC0QqjBXIJuAaTh5aKtYaIWm43JEuWovGMA', 'content-type': 'application/json', 'Host': 'overview.peoltechnologies.net', 'origin': 'http://localhost:4200', 'referer': 'http://localhost:4200/', 'sec-ch-ua': '"Chromium";v="106", "Google Chrome";v="106", "Not;A=Brand";v="99"', 'sec-ch-ua-mobile': '?0', 'sec-ch-ua-platform': '"Windows"', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'cross-site', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 'X-Amzn-Trace-Id': 'Root=1-6351226c-6ddca6e569dfb5d82f980c50', 'X-Forwarded-For': '49.206.133.109', 'X-Forwarded-Port': '443', 'X-Forwarded-Proto': 'https'}}, 'stage-variables': {'schema': 'einvoice_db_portal', 'lambda_alias': 'dev', 'secreat': 'test/einvoice/secret', 'notification_email': 'elipotest@gmail.com', 'ocr_bucket_folder': 'old-dev/', 'cred_bucket': 'file-bucket-emp'}, 'context': {'account-id': '', 'api-id': '5ud4f0kv53', 'api-key': '', 'authorizer-principal-id': '', 'caller': '', 'cognito-authentication-provider': '', 'cognito-authentication-type': '', 'cognito-identity-id': '', 'cognito-identity-pool-id': '', 'http-method': 'POST', 'stage': 'einvoice-v1', 'source-ip': '49.206.133.109', 'user': '', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 'user-arn': '', 'request-id': '7a9272fd-1385-4914-b4a3-4963edfa7e90', 'resource-id': 'vbpofh', 'resource-path': '/master'}}
# print(postMasterDetails(event, ' '))

#event not found
def deleteMemberDetail(event, context):
    
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='ap-south-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )

    # secret = event["stage-variables"]["secreat"]

    # resp = client.get_secret_value(
    #     SecretId= secret
    # ) 

    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()

    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            # cognito = boto3.client('cognito-idp') 
            
            # response = cognito.admin_delete_user(
            #     UserPoolId='eu-central-1_P9rnnqiLu',
            #     Username='bb7eecc4-3ad5-4f68-936c-dc4ae1ce9a25'
            # )

            if "member_id" in event["params"]["querystring"]:
                mycursor.execute("delete from member where member_id = ?", event["params"]["querystring"]["member_id"])
                mydb.commit() 
                
    except:
        return {
            'statuscode': 500,
            'body': json.dumps("unable to delete")
        }
                   
    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': json.dumps("Delete Successful!"),
    }


#tested statements working fine didnt find correct event to check all statements
def getMemberDetails(event, context):
        global dbScehma 
        dbScehma = ' DBADMIN '
        
        # client = boto3.client(
        # 'secretsmanager',
        # region_name='eu-central-1',
        # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
        # aws_secret_access_key='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' )
        # secret = event["stage-variables"]["secreat"]
        # resp = client.get_secret_value(
        #     SecretId= secret
        # )
        # secretDict = json.loads(resp['SecretString'])

        mydb = hdbcliConnect()

        records = {}
        row2 = None
        
        try:
            with mydb.cursor() as mycursor:
                defSchemaQuery = "set schema " + dbScehma
                mycursor.execute(defSchemaQuery)
                
                member = []
                
                if "vendor_member" in event["params"]["querystring"]:
                    
                    sqlQuery = "SELECT vendor_name FROM vendor_master where member_id = ?"
                    mycursor.execute(sqlQuery, event["params"]["querystring"]["vendor_member"])
                    vendor_mem = mycursor.fetchone()
                    vendor_men = convertValuesTodict(mycursor.description, vendor_men)
                    vendor_men = vendor_men[0]
                    
                    if vendor_mem:
                        retMsg = {
                            "flag": "n",   
                            "msg": "Member already exists in Vendor " + vendor_mem["vendor_name"]
                        }
                        
                        return {
                            'statuscode': 201,
                            'body': retMsg
                        }
                        
                    else:
                        retMsg = {
                            "flag": "y",
                            "msg": "Member is avaliable!"
                        }
                        
                        return {
                            'statuscode': 201,
                            'body': retMsg
                        }
                elif "search_string" in event["params"]["querystring"] and "role" in event["params"]["querystring"]:
                    
                    sqlQuery = "SELECT *, value2 FROM member inner join dropdown on user_type = value1 where (fs_name like ? or ls_name like ?) and user_type = ?"
                    temp = event["params"]["querystring"]["search_string"] + "%%"
                    userRole = event["params"]["querystring"]["role"]
                    values = ( temp , temp, userRole )
                    mycursor.execute(sqlQuery, values)
                    temp = convertValuesTodict(mycursor.description, mycursor.fetchall())
                    
                    for row in temp:
                        record = {
                            'member_id': row['member_id'],
                            'department_id': row['department_id'],
                            'fs_name': row['fs_name'],
                            'ls_name': row['ls_name'],
                            'profile_photo' : row['profile_photo'],
                            'email': row['email'], 
                            'group_id': row['group_id'],
                            'position': row['value2']
                        }
                        member.append(record)
                    records['Member'] = member  
                    
                elif "search_string" in event["params"]["querystring"]:
                    
                    sqlQuery = "SELECT *, value2 FROM member inner join dropdown on user_type = value1 where fs_name like ? or ls_name like ?"
                    temp = event["params"]["querystring"]["search_string"] + "%%"
                    values = ( temp , temp )
                    mycursor.execute(sqlQuery, values)
                    temp = convertValuesTodict(mycursor.description, mycursor.fetchall())
                    
                    for row in temp:
                        record = {
                            'member_id': row['member_id'],
                            'department_id': row['department_id'],
                            'fs_name': row['fs_name'],
                            'ls_name': row['ls_name'],
                            'profile_photo' : row['profile_photo'],
                            'email': row['email'], 
                            'group_id': row['group_id'],
                            'position': row['value2']
                        }
                        member.append(record)
                    records['Member'] = member  
                
                elif "member_id" in event["params"]["querystring"]:
                    
                    sqlQuery = 'select m.member_id, (fs_name|| ' '|| ls_name) as member_name, m.group_id, g.name ' \
                        'from member m ' \
                        'left join "GROUP" g ' \
                        'on m.group_id = g.group_id ' \
                        'where m.member_id = ?'
                    values = event["params"]["querystring"]["member_id"]
                    mycursor.execute(sqlQuery, values)
                    records = mycursor.fetchone()
                    
                    
                elif "refer_list" in event["params"]["querystring"]:
                    userid = ""
                    if "userid" in event["params"]["querystring"]:
                        userid = event["params"]["querystring"]["userid"]
                        
                    mycursor.execute("SELECT m.member_id, m.department_id, m.fs_name, m.ls_name, m.profile_photo, m.email, m.user_type, m.group_id, d.value2 " \
                        "from member m " \
                        "left OUTER join dropdown d " \
                        "on m.user_type = d.value1 " \
                        "where m.user_type in ('fh', 'cfo', 'fc') and m.email != ?" \
                        "order by m.fs_name", userid)
                    temp = convertValuesTodict(mycursor.description, mycursor.fetchall())
                    
                    for row in temp:
                        record = {
                            'member_id': row['member_id'],
                            'department_id': row['department_id'],
                            'name': row['fs_name'] + " " + row['ls_name'],
                            'profile_photo' : row['profile_photo'],
                            'user_type': row["user_type"],
                            'group_id': row["group_id"],
                            'user_type_description': row["value2"]
                        }
                        member.append(record)
                    records['Member'] = member 
                    
                elif "userid" in event["params"]["querystring"]:
                    
                    sqlQuery = "select *, value2 from member inner join dropdown on user_type = value1 where email = ?"
                    values = event["params"]["querystring"]["userid"]
                    mycursor.execute(sqlQuery, values)
                    row = mycursor.fetchone()
                    
                    if row:
                        if str(row["delegate_to"]) != "" or str(row["delegate_to"]) != "0":
                            
                            sqlQuery = "select fs_name, ls_name, email, value2 from member inner join dropdown on user_type = value1 where member_id = ?"
                            values = (row["delegate_to"],)
                            mycursor.execute(sqlQuery, values)
                            row1 = mycursor.fetchone()
                        
                        if row["user_type"] == "superadmin":
                            mycursor.execute("select value2 from dropdown where drop_key = 'my-company-details' and value1 = 'gstin' ")
                            row2 = mycursor.fetchone()
                        
                        records = {
                            'member_id': row['member_id'],
                            'department_id': row["department_id"],
                            'fs_name': row['fs_name'],
                            'ls_name': row['ls_name'],
                            'profile_photo' : row['profile_photo'],
                            'email': row['email'], 
                            'position': row['value2'],
                            'password':row["password"],
                            'until':str(row["until"]),
                            'delegate_to':row["delegate_to"],
                            'delegate_email':"",
                            'delegate_name':"",
                            'gstin': ""
                        }
                        
                        if row1 != None:
                            records["delegate_email"] = row1["email"]
                            records["delegate_name"] = row1["fs_name"] + " " + row1["ls_name"]
                        
                        if row2 != None:
                            records["gstin"] = row2["value2"]
                    
                else:
                    mycursor.execute("SELECT m.member_id, m.department_id, m.fs_name, m.ls_name, m.profile_photo, m.user_type, m.group_id, d.value2 from member m left OUTER join dropdown d on m.user_type = d.value1")
                    temp = convertValuesTodict(mycursor.description, mycursor.fetchall())
                    
                    for row in temp:
                        record = {
                            'member_id': row['member_id'],
                            'department_id': row['department_id'],
                            'name': str(row['fs_name']) + " " + str(row['ls_name']),
                            'profile_photo' : row['profile_photo'],
                            'user_type': row["user_type"],
                            'group_id': row["group_id"],
                            'user_type_description': row["value2"]
                        }
                        member.append(record)
                    records['Member'] = member    
                
        except :
            return{
            'statuscode': 500,
            'body': "Internal Failure",  
            }
            
        finally:
            mydb.close()

        return {
            'statuscode': 200,
            'body': records,
        }  
        
def patchMemberDetails(event, context):
    
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='ap-south-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )
    # secret = event["stage-variables"]["secreat"]
    # resp = client.get_secret_value(
    #     SecretId= secret
    # )
    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()
    
    record = {
        'fs_name' : "",
        'ls_name' : "",
        'user_id' : "",
        'email' : "",
        'password' : "",
        'delegate_to' :"",
        'until' :"",
        'gstin' : ""
    }
    
    for value in event["body-json"]:
        if value in record:
            record[value] = event["body-json"][value]
                
    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            member_id = event["params"]["querystring"]["member_id"]
            
            values = (member_id, )
            mycursor.execute("select member_id, user_type, email from member where member_id = ?", values)
            usertype = mycursor.fetchone()
            
            if usertype and usertype['user_type'] == "admin":
                values = (record['gstin'], )
                mycursor.execute("update dropdown set value2 = ? where drop_key = 'my-company-details' and value1 = 'gstin'", values)

            sqlQuery = "update member set fs_name = ?, ls_name = ?, user_id = ?, password = ?, " \
                " delegate_to = ?, until = ? where member_id = ?"
            
            values = (record["fs_name"], record["ls_name"], record["user_id"], 
                        record["password"], record["delegate_to"], record["until"],
                        member_id)
                        
            mycursor.execute(sqlQuery, values)
            
            if record["until"] != None:
                until = datetime.datetime.strptime("2020-10-15", '%Y-%m-%d')
                
            else:
                until = datetime.datetime.strptime(record["until"], '%Y-%m-%d')
            
            now = datetime.datetime.strptime(str(datetime.date.today()), '%Y-%m-%d')
            
            if until >= now:
            
                values = (record["delegate_to"], member_id)  
                
                mycursor.execute("delete from delegate where delegated_to = ? and delegated_from = ?", values)
                
                values = (record["delegate_to"], member_id, record["until"])
                
                mycursor.execute("INSERT INTO delegate ( delegated_to, delegated_from, delegate_until) VALUES( ?, ?, ? )", values)
             
            else:
                values = (record["delegate_to"], member_id)  
                
                mycursor.execute("delete from delegate where delegated_to = ? and delegated_from = ?", values)
                
            msg = "Member ID" + event["params"]["querystring"]["member_id"] + " updated"
              
            mydb.commit()
            
    except:
        return {
            'statuscode': 500,
            'body': json.dumps("unable to modify")
        }
            
    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': msg,
    }
# event = {'body-json': {'fs_name': 'Komal', 'ls_name': 'Seth', 'gstin': '', 'user_id': 'KomalSeth', 'email': 'abhishek.p@peolsolutions.com', 'password': '', 'until': '0000-00-00'}, 'params': {'path': {}, 'querystring': {'member_id': '150'}, 'header': {'accept': 'application/json, text/plain, */*', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'en-US,en;q=0.9', 'Authorization': 'eyJraWQiOiJ1RXlLMTdnUjUzTVVMcXUrYkRsQUZ2NHRSUTR0VVM5KzM4NlwvZnpxMWorQT0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiIyOGZkNTdhMy0xZTdjLTQ4MDAtODFmZC04ZjI1NWY0NTY5OGYiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiaXNzIjoiaHR0cHM6XC9cL2NvZ25pdG8taWRwLmV1LWNlbnRyYWwtMS5hbWF6b25hd3MuY29tXC9ldS1jZW50cmFsLTFfUDlybm5xaUx1IiwiY29nbml0bzp1c2VybmFtZSI6IjI4ZmQ1N2EzLTFlN2MtNDgwMC04MWZkLThmMjU1ZjQ1Njk4ZiIsImF1ZCI6IjI0YmplNGp1ZDhoM2Y4cnNua2toZzBibHYxIiwiZXZlbnRfaWQiOiIxZDhhYjNjZC1lNmVmLTQ0YjctYjEyZC1iYmNhMzUyZTdmZjEiLCJ0b2tlbl91c2UiOiJpZCIsImF1dGhfdGltZSI6MTY2MDYzOTEyOSwibmFtZSI6IkFiaGlzaGVrIiwiZXhwIjoxNjYwNjQyNzI5LCJpYXQiOjE2NjA2MzkxMjksImZhbWlseV9uYW1lIjoiUCIsImVtYWlsIjoiYWJoaXNoZWsucEBwZW9sc29sdXRpb25zLmNvbSJ9.avGngnVsfnhukl783w_CrO1IJ00HPZgFuGga9-UTnfKK2MtpvYvro4gRvqQJceGRDxDZH-BV9b1a6goXm4NfUAkwt4jpjqiF3WcYmvajj2UA-384EsFSEL2UNhA3nMQoqKrDV86ESWoTAMKSsNADnWF8lRjYc19knR-44KKpOC70kHh_mNjnybT7S10Ujvx_zmuU_dOm0uiuzrKtDuFfpdt7w0eN3shQu4U7x3kz79fNVbtoeu0im3aspwPZwLln4OC71k1RlgqPRAoU8AWlrJupmNBOtGSCwtbgQPVkoOJJj61rBrcNmTLfIEWpH708F-4JQ5pdyJVfYjMK-SA0cQ', 'content-type': 'application/json', 'Host': 'overview.peoltechnologies.net', 'origin': 'https://ywi7o0pxhc.execute-api.eu-central-1.amazonaws.com', 'referer': 'https://ywi7o0pxhc.execute-api.eu-central-1.amazonaws.com/', 'sec-ch-ua': '"Chromium";v="104", " Not A;Brand";v="99", "Google Chrome";v="104"', 'sec-ch-ua-mobile': '?0', 'sec-ch-ua-platform': '"Windows"', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'cross-site', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36', 'X-Amzn-Trace-Id': 'Root=1-62fb57f8-0757e30044c02e2d12508475', 'X-Forwarded-For': '49.206.130.86', 'X-Forwarded-Port': '443', 'X-Forwarded-Proto': 'https'}}, 'stage-variables': {'schema': 'einvoice_db_portal', 'lambda_alias': 'dev', 'secreat': 'test/einvoice/secret', 'notification_email': 'elipotest@gmail.com', 'ocr_bucket_folder': 'old-dev/', 'cred_bucket': 'file-bucket-emp'}, 'context': {'account-id': '', 'api-id': '5ud4f0kv53', 'api-key': '', 'authorizer-principal-id': '', 'caller': '', 'cognito-authentication-provider': '', 'cognito-authentication-type': '', 'cognito-identity-id': '', 'cognito-identity-pool-id': '', 'http-method': 'PATCH', 'stage': 'einvoice-v1', 'source-ip': '49.206.130.86', 'user': '', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36', 'user-arn': '', 'request-id': '8f4c8e0f-2d27-4b78-8111-16449ac8afb8', 'resource-id': '8g9cm8', 'resource-path': '/member'}}

# print(patchMemberDetails(event , ' '))

# def get_stored_credentials(user_id):
#     try:
#         s3 = boto3.client("s3")
#         encoded_file = s3.get_object(Bucket="file-bucket-emp", Key=user_id)
#         creds = pickle.loads(encoded_file["Body"].read())
#         return creds
#     except Exception as excep:
#         creds = None


# def create_message(sender, to, cc, subject, message_text):
#     """Create a message for an email.

#     Args:
#     sender: Email address of the sender.
#     to: Email address of the receiver.
#     subject: The subject of the email message.
#     message_text: The text of the email message.

#     Returns:
#     An object containing a base64url encoded email object.
#     """

#     message = email.mime.text.MIMEText(message_text, 'html')
#     # message = email.mime.message.MIMEMessage(message_text)
#     message['to'] = to
#     message['cc'] = cc
#     message['from'] = sender
#     message['subject'] = subject
#     # print(message)
#     # return {'raw': base64.urlsafe_b64encode(message.as_string())}
#     encoded = base64.urlsafe_b64encode(message.as_string().encode("utf-8"))
#     return {'raw': encoded.decode("utf-8")}


# def send_message(service, user_id, message):
#     try:
#         message = (service.users().messages().send(userId=user_id, body=message).execute())
#         print("Message Id: ", message['id'])
#         return message
#     except Exception as error:
#         print("An error occurred: ", error)


# def build_service(credentials):
#     http = httplib2.Http()
#     http = credentials.authorize(http)
#     return build('gmail', 'v1', http=http)


# def sendMailNotifications(emails, user, mycursor):
    # user_id = "elipotest@gmail.com"
    mycursor.execute("select * from elipo_setting where key_name = 'notification-mail' ")
    email_data = mycursor.fetchone()
    user_id = email_data["value1"]

    mail_cc = ''
    mail_subject = 'ELIPO Registration & verification'
    mail_body = ''

    mail_body = '''<html>
            <body  >
        <div style="  max-width: 500px; margin: auto; padding: 10px; ">
                <div style=" width:100%; align-content: center;text-align: center;">
                    <img src="https://einvoice-public-images.s3.ap-south-1.amazonaws.com/ELIPO+logo.png" alt="Italian Trulli" style="vertical-align:middle; width: 140px;height:50px;text-align: center;"  >
                </div>
        	<div style=" width:100%; align-content:left;text-align:left;">
                    <hr style="width:100%; text-align: center; border: 2px solid #0000001A;opacity: 0.5; border-radius: 2px;" >
                </div>
            <b>

            <span style="vertical-align: middle;text-align: left;font: 600   16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;" >
                Dear Admin,
            </span> 
            <br><br>
            <span style="vertical-align: middle;text-align: left;font: 500 16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;" >
                A New User has registered on ELIPO.
            </span> 
            <br>
            <span style="vertical-align: middle;text-align: left;font: 500 16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;" >
                Please Assign Role
            </span> 
            <br>
            <span style="vertical-align: middle;text-align: left;font: 600   16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;" >
                User ID: <span style="vertical-align: middle;text-align: left;font: 500  15px/22px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;"> {}</span>
            </span> 

            <br>

            <br>
            <div style=" width:100%;align-content: center;text-align: center;">
                <a href="https://ywi7o0pxhc.execute-api.eu-central-1.amazonaws.com/production/login" target="_blank">
                    <button style="border: none;box-shadow: 1px 1px 5px 1px #5a9e9b; background:rgb(80, 219, 212) 0% 0% no-repeat padding-box; border-radius: 7px;opacity: 1;width:180px; height: 35px;outline: none;border: none;" > 
                        <span style="vertical-align: middle; text-align: left;font: 600   16px/23px Open Sans;letter-spacing: 0px;color: whitesmoke;white-space: nowrap;opacity: 1;">Login to ELIPO</span>
                    </button>
                </a>
            </div>

            <br><br>
            <div style="width:100%;">
            <span style="vertical-align: middle; text-align: left;font: 500  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;">Regards,</span>
            <br>
            <span style="vertical-align: middle;text-align: left;font: 500  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;">Team ELIPO</span>
            </div>
        <div style=" width:100%; align-content:left;text-align:left;">
                    <hr style="width:100%; text-align: center; border: 2px solid #0000001A;opacity: 0.5; border-radius: 2px;" >
                </div>


            <div style="width:100%;align-content: center;text-align: center;">
                <span style=" text-align: center;font: 600   16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 0.7;">This message was sent to you by ELIPO</span>
            </div>
            <div style="width:100%;align-content: center;text-align: center;">
                <img src="https://einvoice-public-images.s3.ap-south-1.amazonaws.com/elipo+logo_2.png" alt="Italian Trulli" style="text-align: center;width: 80px;height: 30px;" >
            </div>

            <br>
        </div>
    </body></html>'''.format(user['name'])

    credentials = get_stored_credentials(user_id)

    if credentials and credentials.refresh_token is not None:
        service = build_service(credentials=credentials)

        message = create_message(sender="mosbyted116@gmail.com", to=emails, cc=mail_cc, subject=mail_subject,
                                 message_text=mail_body)
        send_message(service=service, user_id="me", message=message)

# working fine for event 
def postMemberDetails(event, context):
    print(event)

    # client = boto3.client('secretsmanager', region_name="ap-south-1")
    global dbScehma
    # secret = event["stage-variables"]["secreat"]

    # resp = client.get_secret_value(
    #     # SecretId= secret
    #     SecretId="enterpriseModelDev"
    # )

    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()
    
    record = {
        "name": "",
        "family_name": "Test",
        "password": "",
        "email": "",
        "position": "",
        "group_id": "",
        "is_valid": "y",
        "created_on": "",
        "user_id": "",
        "delegate_to": "",
        "until": "",
        "sub": "",
        "cognito:email_alias": "",
        "cognito:user_status": "",
        "email_verified": ""
    }

    user_id = ""

    try:
        for value in event["request"]["userAttributes"]:
            if value in record:
                record[value] = event["request"]["userAttributes"][value]

        pool_id = event["userPoolId"]
        user_id = event["userName"]

        with mydb.cursor() as mycursor:

            dbScehma = ' DBADMIN '

            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)

            if record["cognito:user_status"] == "CONFIRMED" and record["email_verified"] == "true":

                sqlQuery = "INSERT INTO member (fs_name, ls_name, password, email, position, group_id, is_valid, created_on, " \
                           " user_id, delegate_to, until) VALUES {}"

                c = "@"
                res = record["email"].find(c)
                # today = date.today()
                now = datetime.datetime.now()
                today = now.strftime("%Y-%m-%d")
                print(today)
                fname = record["email"][0:res]
                values = (
                record["name"], record["family_name"], record["password"], record["email"], record["position"],
                record["group_id"], record["is_valid"], today, user_id, record["delegate_to"],
                record["until"])

                mycursor.execute(sqlQuery.format(tuple(values)))
                mycursor.execute("select count(*) from member")
                member_id = mycursor.fetchone()
                member_id = member_id[0]

                ret_msg = "Member added with ID : " + str(member_id)

                mycursor.execute(
                    "select email from member where user_type in ('admin', 'superadmin')")
                admins = mycursor.fetchall()

                emails = ''

                mydb.commit()

                if admins:
                    for index, each in enumerate(admins):
                        if index == 0:
                            emails = str(each['email'])
                            continue

                        emails += "," + str(each['email'])

                if emails:
                    user = {'name': record["name"] + ' ' + record["family_name"],
                            'email': record["email"]
                            }
                    sendMailNotifications(emails=emails, user=user, mycursor=mycursor)

            else:

                ret_msg = "Member not added"

    except Exception as e:
        mydb.rollback()
        return event

    finally:
        mydb.close()

    return event
# event = {'version': '1', 'region': 'eu-central-1', 'userPoolId': 'eu-central-1_P9rnnqiLu', 'userName': '002f243a-0fed-415e-bff0-4d6dbb9acea8', 'callerContext': {'awsSdkVersion': 'aws-sdk-unknown-unknown', 'clientId': '24bje4jud8h3f8rsnkkhg0blv1'}, 'triggerSource': 'PostConfirmation_ConfirmSignUp', 'request': {'userAttributes': {'sub': '002f243a-0fed-415e-bff0-4d6dbb9acea8', 'email_verified': 'true', 'cognito:user_status': 'CONFIRMED', 'cognito:email_alias': 'pankaj.kurade@peolsolutions.com', 'name': 'Pankaj', 'family_name': 'Kurade', 'email': 'pankaj.kurade@peolsolutions.com'}}, 'response': {}}
# print(postMemberDetails(event , ' '))


#sql statements working fine
def getNpoRuleDetail(event, context):
    
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # print(event)
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='ap-south-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )
    # secret = event["stage-variables"]["secreat"]
    # resp = client.get_secret_value(
    #     SecretId= secret
    # )
    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()
    
    decider = {
        'discount' : 0,
        'amount' : 0,
        'cost_center' : "",
        'currency' : "",
        'gl_account' : "",
        'npo' : "",
        'vendor_no': "",
        'department_id': "",
        'item_category': [],
        'document_type': ""
    }
    
    try:
        for value in event["body-json"]["decider"]:
            if value in decider:
                decider[value] = event["body-json"]["decider"][value]
                
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            mycursor.execute("SELECT * FROM elipo_setting")
            settings = mycursor.fetchall()
            
            user_settings = {}

            if settings:
                for each in settings:
                    user_settings[each['key_name']] = each['value1']

                del settings
            
            if user_settings["approval_rules"] == 'on' and (user_settings["invoice_posting"] == 'on' or user_settings["invoice_posting"] == 'off'):
                flag = None
                records = {}
                rule_ids = []
                
                mycursor.execute("SELECT a.* FROM rule a inner join rule_snro b on a.rule_id = b.rule_id where b.is_approval = 'y' and a.is_on = 'y'")
                all_rules = mycursor.fetchall()
    
                for row in all_rules:
                    if row["decider"] == "npo":
                        rule_ids.append(row["rule_id"])
                
                rule_ids = set(rule_ids)
                rule_ids = list(rule_ids)
                
                rule = []
                default = []
    
                for ruleID in rule_ids:
                    rules = [] 
                    noOfRules = 0
                    countMatches = 0
    
                    for row in all_rules:
                        if row["rule_id"] == ruleID:
                            noOfRules += 1
                            if row['decider_type'] == "number":
    
                                if row['decider'] == "amount" or row["decider"] == "discount":
                                    d_value = float(decider[row['decider']])
                                    
                                else:
                                    d_value = int(decider[row['decider']])
    
                                if row['operator'] == "=" and d_value == int(row['d_value']):
                                    countMatches += 1
                                    
                                elif row['operator'] == ">" and d_value > int(row['d_value']):
                                    countMatches += 1
                                    
                                elif row['operator'] == "<" and d_value < int(row['d_value']):
                                    countMatches += 1
                                    
                                elif row['operator'] == "between" and int(row['d_value']) <= d_value <= int(row['d_value2']):
                                    countMatches += 1
    
                            elif row['decider_type'] == "string":
                                if row["decider"] == "item_category":
                                    for each in decider["item_category"]:
                                        if each == str(row['d_value']):
                                            countMatches += 1
                                            break
    
                                elif decider[row['decider']] == str(row['d_value']):
                                    countMatches += 1
                    
                    if noOfRules == countMatches and noOfRules != 0:
                        flag = True
                        rule.append(ruleID)
    
                if rule:
                    format_strings = ','.join(['?'] * len(rule))
                    sqlQuery = "select distinct * from rule_approver where rule_key in ({}) ".format(format_strings)
                    mycursor.execute(sqlQuery, tuple(rule))
                    approvers = mycursor.fetchall()
    
                    for row in approvers:
                        if row["approver"] == 999999999:
                            if user_settings["invoice_posting"] == 'on':
                                records = {
                                    "flag": 'y',
                                    "msg": "Send to ERP"
                                }
                            elif user_settings["invoice_posting"] == 'off':
                                records = {
                                    "flag": 'y',
                                    "msg": "Submit"
                                }
                            break
    
                if not records:
                    records = {
                        "flag": 'n',
                        "msg": "Send for Approval"
                    }
            
            elif user_settings["approval_rules"] == 'off' and user_settings["invoice_posting"] == 'on':
                records = {
                    "flag": 'y',
                    "msg": "Send to ERP"
                }
                
            elif user_settings["approval_rules"] == 'off' and user_settings["invoice_posting"] == 'off':
                records = {
                    "flag": 'y',
                    "msg": "Submit"
                }
                
    except:
        return {
            'statuscode': 500,
            'body': json.dumps("Internal Failure")   
        }
            
    finally:
        mydb.close()
        
    return {
            'statuscode': 200,
            'body': records
        }


# def getNpoRuleDetail(event, context):
    
    # global dbScehma 
    # dbScehma = event["stage-variables"]["schema"]
    
    # # print(event)
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='ap-south-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )
    # secret = event["stage-variables"]["secreat"]
    # resp = client.get_secret_value(
    #     SecretId= secret
    # )
    # secretDict = json.loads(resp['SecretString'])

    # mydb = pymysql.connect(
    #     host=secretDict['host'],
    #     user=secretDict['username'],
    #     passwd=secretDict['password'],
    #     database=secretDict['dbname'],
    #     charset='utf8mb4',
    #     cursorclass=pymysql.cursors.DictCursor
    # )
    
    # decider = {
    #     'discount' : 0,
    #     'amount' : 0,
    #     'cost_center' : "",
    #     'currency' : "",
    #     'gl_account' : "",
    #     'npo' : "",
    #     'vendor_no': "",
    #     'department_id': "",
    #     'item_category': [],
    #     'document_type': ""
    # }
    
    # try:
    #     for value in event["body-json"]["decider"]:
    #         if value in decider:
    #             decider[value] = event["body-json"]["decider"][value]
                
    #     with mydb.cursor() as mycursor:
    #         defSchemaQuery = "use " + dbScehma
    #         mycursor.execute(defSchemaQuery)
            
    #         mycursor.execute("SELECT * FROM elipo_setting")
    #         settings = mycursor.fetchall()
            
    #         user_settings = {}

    #         if settings:
    #             for each in settings:
    #                 user_settings[each['key_name']] = each['value1']

    #             del settings
            
    #         if user_settings["approval_rules"] == 'on' and (user_settings["invoice_posting"] == 'on' or user_settings["invoice_posting"] == 'off'):
    #             flag = None
    #             records = {}
    #             rule_ids = []
                
    #             mycursor.execute("SELECT a.* FROM rule a inner join rule_snro b on a.rule_id = b.rule_id where b.is_approval = 'y' and a.is_on = 'y'")
    #             all_rules = mycursor.fetchall()
    
    #             for row in all_rules:
    #                 if row["decider"] == "npo":
    #                     rule_ids.append(row["rule_id"])
                
    #             rule_ids = set(rule_ids)
    #             rule_ids = list(rule_ids)
                
    #             rule = []
    #             default = []
    
    #             for ruleID in rule_ids:
    #                 rules = [] 
    #                 noOfRules = 0
    #                 countMatches = 0
    
    #                 for row in all_rules:
    #                     if row["rule_id"] == ruleID:
    #                         noOfRules += 1
    #                         if row['decider_type'] == "number":
    
    #                             if row['decider'] == "amount" or row["decider"] == "discount":
    #                                 d_value = float(decider[row['decider']])
                                    
    #                             else:
    #                                 d_value = int(decider[row['decider']])
    
    #                             if row['operator'] == "=" and d_value == int(row['d_value']):
    #                                 countMatches += 1
                                    
    #                             elif row['operator'] == ">" and d_value > int(row['d_value']):
    #                                 countMatches += 1
                                    
    #                             elif row['operator'] == "<" and d_value < int(row['d_value']):
    #                                 countMatches += 1
                                    
    #                             elif row['operator'] == "between" and int(row['d_value']) <= d_value <= int(row['d_value2']):
    #                                 countMatches += 1
    
    #                         elif row['decider_type'] == "string":
    #                             if row["decider"] == "item_category":
    #                                 for each in decider["item_category"]:
    #                                     if each == str(row['d_value']):
    #                                         countMatches += 1
    #                                         break
    
    #                             elif decider[row['decider']] == str(row['d_value']):
    #                                 countMatches += 1
                    
    #                 if noOfRules == countMatches and noOfRules != 0:
    #                     flag = True
    #                     rule.append(ruleID)
    
    #             if rule:
    #                 format_strings = ','.join(['?'] * len(rule))
    #                 sqlQuery = "select distinct * from rule_approver where rule_key in (?) " % format_strings
    #                 mycursor.execute(sqlQuery, tuple(rule))
    #                 approvers = mycursor.fetchall()
    
    #                 for row in approvers:
    #                     if row["approver"] == 999999999:
    #                         if user_settings["invoice_posting"] == 'on':
    #                             records = {
    #                                 "flag": 'y',
    #                                 "msg": "Send to ERP"
    #                             }
    #                         elif user_settings["invoice_posting"] == 'off':
    #                             records = {
    #                                 "flag": 'y',
    #                                 "msg": "Submit"
    #                             }
    #                         break
    
    #             if not records:
    #                 records = {
    #                     "flag": 'n',
    #                     "msg": "Send for Approval"
    #                 }
            
    #         elif user_settings["approval_rules"] == 'off' and user_settings["invoice_posting"] == 'on':
    #             records = {
    #                 "flag": 'y',
    #                 "msg": "Send to ERP"
    #             }
                
    #         elif user_settings["approval_rules"] == 'off' and user_settings["invoice_posting"] == 'off':
    #             records = {
    #                 "flag": 'y',
    #                 "msg": "Submit"
    #             }
                
    # except:
    #     return {
    #         'statuscode': 500,
    #         'body': json.dumps("Internal Failure")   
    #     }
            
    # finally:
    #     mydb.close()
        
    # return {
    #         'statuscode': 200,
    #         'body': records
    #     }


def getOverviewDetails(event, context):
    
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='eu-central-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )

    # secret = event["stage-variables"]["secreat"]

    # resp = client.get_secret_value(
    #     SecretId= secret
    # )  

    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()

    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
    
            sqlQuery = "SELECT invoice_no, in_status, amount, due_date " \
                "FROM invoice_header " \
                "where in_status != 'tosap' or in_status != 'deleted'"
            
            mycursor.execute(sqlQuery)
            raw_data = mycursor.fetchall() 
            raw_data = convertValuesTodict(mycursor.description, raw_data)

            due_amount = 0
            over_due_amount = 0
            payable_amount_today = 0
            payable_within_7days = 0

            if raw_data:

                for row in raw_data:
                    today = date.today()
                    

                    if row["due_date"] != None and type(row["due_date"]) is not str:
                        
                        noOfDueDays = (row["due_date"] - today).days
                        if today <= row["due_date"]:
                            due_amount = due_amount + float(row["amount"])

                        elif today > row["due_date"]:
                            over_due_amount = over_due_amount + float(row["amount"])
                        
                        if today == row["due_date"]:
                            payable_amount_today = payable_amount_today + float(row["amount"])
                        
                        if noOfDueDays <= 7 and noOfDueDays >= 0:
                            payable_within_7days = payable_within_7days + float(row["amount"])

            overview = {
                "total_payable": due_amount + over_due_amount,
                "current_payable": due_amount,
                "over_due_amount": over_due_amount,
                "payable_by_today": payable_amount_today,
                "payable_within_7days": payable_within_7days
            }
            
    except :
        return {
            'statuscode': 500,
            'body': json.dumps("Internal Error")
        }

    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': overview
    }



class FailedToCreateApprocalsException(Exception):
    """"""  

def notify_approvers(members, body):
    pass

class ApprovalException(Exception):
    pass

class SapPostException(Exception):
    pass

class ErpPostException(Exception):
    pass








def patchInvoiceStatus(event, context):
    
    
    
    def get_stored_credentials(user_id):
        
        global ocr_bucket_folder
        
        try:
            s3 = boto3.client("s3")
            encoded_file = s3.get_object(Bucket=elipo_bucket, Key=ocr_bucket_folder+user_id)
            creds = pickle.loads(encoded_file["Body"].read())
            return creds
        except Exception as excep:
            creds = None
            # print(str(excep))
            # raise NoUserIdException(excep)
            
    def create_message(sender, to, cc, subject, message_text):
            """Create a message for an email.

            Args:
            sender: Email address of the sender.
            to: Email address of the receiver.
            subject: The subject of the email message.
            message_text: The text of the email message.

            Returns:
            An object containing a base64url encoded email object.
            """

            message = MIMEText(message_text, 'html')
            # message = email.mime.message.MIMEMessage(message_text)
            message['to'] = to
            message['cc'] = cc
            message['from'] = sender
            message['subject'] = subject
            # return {'raw': base64.urlsafe_b64encode(message.as_string())}
            encoded = base64.urlsafe_b64encode(message.as_string().encode("utf-8"))
            return {'raw': encoded.decode("utf-8")}
        
    def send_message(service, user_id, message):
            try:
                message = (service.users().messages().send(userId=user_id, body=message).execute())
                # print("Message Id: ", message['id'])
                return message
            # except errors.HttpError as error:
            except Exception as error:
                print("An error occurred: ", error)
        
    def build_service(credentials):
            http = httplib2.Http()
            http = credentials.authorize(http)
            return build('gmail', 'v1', http=http)

    def sendMailNotifications(invoice_id, mycursor, status, email, by=None):

        # user_id = elipo_email
        mycursor.execute("select * from elipo_setting where key_name = 'notification-mail' ")
        email_data = mycursor.fetchone()
        user_id = email_data["value1"]

        mail_cc = ''
        mail_subject = 'ELIPO Notification'
        mailbody_text = ''

        if not by:
            by = ''

        values = (status,)
        mycursor.execute("select * from rule_notification where invoice_status = ?", values)
        notification = mycursor.fetchone()

        text1 = 'Approved'

        if status == 'approval-reject':
            text1 = 'Rejected '
            
        if status == 'referred':
            text1 = 'Referred '

        if notification:
            mail_cc = notification['mail_cc']
            mail_subject = notification["subject"]
            mailbody_text = notification["body"]
                    
        mail_body = '''<html>
                <body  >
            <div style="  max-width: 500px; margin: auto; padding: 10px; ">
                    <div style=" width:100%; align-content: center;text-align: center;">
                        <img src="https://einvoice-public-images.s3.ap-south-1.amazonaws.com/ELIPO+logo.png" alt="Italian Trulli" style="vertical-align:middle; width: 140px;height:50px;text-align: center;"  >
                    </div>
                <div style=" width:100%; align-content:left;text-align:left;">
                        <hr style="width:100%; text-align: center; border: 2px solid #0000001A;opacity: 0.5; border-radius: 2px;" >
                    </div>
                <b>
                    
                <span style="vertical-align: middle;text-align: left;font: 600  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;" >
                    Dear User,
                </span> 
                <br><br>
                <span style="vertical-align: middle;text-align: left;font: 600  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;" >
                    Invoice No: <span style="font: 500  15px/22px ;">{},</span>
                </span> 
            
                <br>
                <span style="vertical-align: middle;text-align: left;font: 600  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;" >
                    {} By : <span style="vertical-align: middle;text-align: left;font: 500  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;"> {},</span> 
                </span> 
                </b> 
                <br>
                <span style="vertical-align: middle; text-align: left;font: 500  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;"> {} </span>
                <br>
                <br>
                <div style=" width:100%;align-content: center;text-align: center; ">
                    <a href="https://ywi7o0pxhc.execute-api.eu-central-1.amazonaws.com/production/login" target="_blank">
                        <button style="border: none;box-shadow: 1px 1px 5px 1px #5a9e9b; background:rgb(80, 219, 212) 0% 0% no-repeat padding-box; border-radius: 7px;opacity: 1;width:180px; height: 35px;outline: none;border: none;" > 
                            <span style="vertical-align: middle; text-align: left;font: 600 16px/23px Open Sans;letter-spacing: 0px;color: whitesmoke;white-space: nowrap;opacity: 1;">Login to ELIPO</span>
                        </button>
                    </a>
                </div>
            
                <br><br>
                <div style="width:100%;">
                <span style="vertical-align: middle; text-align: left;font: 500  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;">Regards,</span>
                <br>
                <span style="vertical-align: middle;text-align: left;font: 500  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;">Team ELIPO</span>
                </div>
            <div style=" width:100%; align-content:left;text-align:left;">
                        <hr style="width:100%; text-align: center; border: 2px solid #0000001A;opacity: 0.5; border-radius: 2px;" >
                    </div>
            
                
                <div style="width:100%;align-content: center;text-align: center;">
                    <span style=" text-align: center;font: 600 16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 0.7;">This message was sent to you by ELIPO</span>
                </div>
                <div style="width:100%;align-content: center;text-align: center;">
                    <img src="https://einvoice-public-images.s3.ap-south-1.amazonaws.com/elipo+logo_2.png" alt="Italian Trulli" style="text-align: center;width: 80px;height: 30px;" >
                </div>
                
                <br>
            </div>
                </body></html>'''.format(invoice_id, text1, by, mailbody_text)   


        credentials = get_stored_credentials(user_id)

        if credentials and credentials.refresh_token is not None:

            service = build_service(credentials=credentials)
            message = create_message(sender="raj.gupta@peolsolutions.com", to=email, cc=mail_cc, subject=mail_subject, message_text=mail_body)
            send_message(service=service, user_id="me", message=message)


    def erp_operations(user_settings, invoice_no, mycursor, working_person, is_mannually):

        erp_responce = None
        responce = None


        if user_settings['invoice_posting'] == "on":
            if user_settings['user_erp'] == "sap":
                erp_responce = sap_post_invoice(invoice_no=invoice_no, mycursor=mycursor, simulation="")
                responce = erp_responce[0]["INVOICE_NO"]
                after_erppost_audit(mycursor=mycursor,
                                    invoice_no=invoice_no,
                                    erp_invoiceno=erp_responce[0]["INVOICE_NO"],
                                    working_person=working_person,
                                    is_mannually=is_mannually)

            elif user_settings['user_erp'] == "zoho":
                zoho_invoice_post(invoice_no=invoice_no, mycursor=mycursor)
                responce = "ZOHO123"

        else:
            responce = "erpPostingOff"     

        return responce


    def sap_post_invoice(invoice_no, mycursor):
        
        s3 = boto3.client("s3")
        items = []
        records = []
        upload_attach = []
        values = invoice_no

        time = datetime.datetime.now()
        current_time = time.strftime("%H:%M:%S")
        
        mycursor.execute("select value1 from elipo_setting where key_name = 'attach_to_erp' ")
        post_attach = mycursor.fetchone()

        mycursor.execute("select * from invoice_header where invoice_no = ?", values)
        invoice_header = mycursor.fetchone()
        
        mycursor.execute("select name, file_path, mime_type from file_storage where file_id = ?", values)
        file = mycursor.fetchall()
        
        if post_attach["value1"] == 'on':
            indicator = None
        
            if file:
                try:
                    for row in file:
                        file_obj = s3.get_object(Bucket=row["file_path"], Key=row["name"])
                        file_content = file_obj["Body"].read()
                        file_content = str(base64.b64encode(file_content))
                        length = len(file_content)
                        file_content = file_content[2:length - 1]
                        data = {
                            "file_content": file_content,
                            "mime_type": row["mime_type"]
                        }
                        upload_attach.append(data)
        
                    indicator = True
        
                except Exception as e:
                    print("process didn't stopped", e)
        
            if not indicator:
                file_content = None
                upload_attach.append({
                    "file_content": "None",
                    "mime_type": "None"
                })
                
        elif post_attach["value1"] == 'off':
            file_content = None
            upload_attach.append({
                "file_content": "None",
                "mime_type": "None"
            })

        mycursor.execute("select a.*, mm.material_no " \
            "from invoice_item a " \
            "left join material_master mm " \
            "on a.material = mm.material_no or a.material_desc = mm.material_name " \
            "where invoice_no = ? order by a.item_no", values)
        
        creditDebitInd = ""
        if invoice_header:
            if invoice_header["npo"] == "y":
                creditDebitInd = "S"
            else:
                if invoice_header["document_type"] == "RE" or invoice_header["document_type"] == "KG":
                    creditDebitInd = ""
                else:
                    creditDebitInd = "X"
            
        for index, row in enumerate(mycursor):
            
            if row["material_no"] == None:
                materialName = row["material"].upper()
            else:
                materialName = row["material_no"].upper()
                
            if row["ebelp"] == None or row["ebelp"] == "":
                ebelp_data = (index + 1) * 10
            else:
                ebelp_data = row["ebelp"]
                
            record = {
                "Belnr": " ",
                "Gjahr": " ",
                "Buzei": row["item_no"],
                "Ebeln": invoice_header["ref_po_num"],
                "Ebelp": ebelp_data,
                "Matnr": materialName,
                "Wrbtr": str(row["gross_amount"]),
                "BWKEY": row["plant"],
                "Shkzg": creditDebitInd,
                "Mwskz": row["gst_per"],
                "Menge": int(row["quantity"]),
                "Bstme": row["unit"]
            }
            items.append(record)

        if invoice_header:
            baseline_date = str(invoice_header["baseline_date"]) + "T" + current_time
            posting_date = str(invoice_header["posting_date"]) + "T" + current_time
            invoice_date = str(invoice_header["invoice_date"]) + "T" + current_time
            
            if invoice_header["document_type"] == "RE" or invoice_header["document_type"] == "SU":
                invoice_ind = "X"
            else:
                invoice_ind = ""
                
            mycursor.execute("select value1 from elipo_setting where key_name = 'npo_tcode' ")
            npoTcode = mycursor.fetchone()
            
            
            postingFlag = None
            if npoTcode:
                if npoTcode["value1"] == "FB60":
                    postingFlag = "X"
                else:
                    postingFlag = ""
                    
            invoice_date = ''.join(invoice_date.split("-"))  
            invoice_date = invoice_date[:8]
            posting_date = ''.join(posting_date.split("-"))  
            posting_date = posting_date[:8]
            baseline_date = ''.join(baseline_date.split("-")) 
            baseline_date = baseline_date[:8]
            records = {
                "Belnr": " ",
                "Gjahr": " ",
                "Blart": "RE",
                "Xrech": invoice_ind,
                "Bldat": invoice_date,
                "Budat": posting_date,
                "Bukrs": invoice_header["company_code"],
                "Lifnr": invoice_header["supplier_id"],
                "Waers": invoice_header["currency"],
                "Xmwst": "",
                "Rmwwr": str(invoice_header["amount"]),
                "Mwskz_bnk": invoice_header["tax_per"],
                "Zfbdt": baseline_date,
                "InvoicehToitem": items,
                "Simu": "",
                "NpoPosting": postingFlag,
                "Attachment": upload_attach
            }
            print(records)
            
        mycursor.execute("select * from elipo_setting where key_name in ('sap_posting_url', 'sap_password', 'sap_userid')")
        sap_settings = mycursor.fetchall()

        sap_post_setting = {}
        
        if sap_settings:
            for each in sap_settings:
                sap_post_setting[each['key_name']] = each['value1']
        
            del sap_settings

        try: 
            s = requests.Session()
            s.headers.update({'Connection': 'keep-alive'})
        
            # url = "http://182.72.219.94:8000/zinvoiceno1/InvoicePost"
            url = sap_post_setting["sap_posting_url"]
            url = "https://virtual-host1.apimanagement.us21.hana.ondemand.com:443/zinvoicebp/invoicebp"
            params = {'sap-client': '800'}
        
            headersFetch = {'X-CSRF-TOKEN': 'Fetch'}
            y = s.get(url, auth=HTTPBasicAuth("DEVELOPER08","Peol@123"), headers=headersFetch, params=params, timeout=30)
            token = y.headers['x-csrf-token']
        
            headers = {"X-CSRF-TOKEN": token, 'Content-type': 'application/json'}
            # sap_responce = s.post(url, json=records, auth=HTTPBasicAuth("DEVELOPER08","Peol@123"), headers=headers, params=params, timeout=30)
            sap_responce = s.post(url, json=records, auth=HTTPBasicAuth("DEVELOPER08", "Peol@123"), headers=headers, params=params, timeout=30)
            responce = sap_responce.json()
            
            print(responce)
            error_list = []
            sap_errors = []
            error_flag = False
        
            for count, each in enumerate(responce[0]["RET"], 1):
                if each['TYPE'] == 'E':
                    error_flag = True
        
                if each['TYPE'] == 'W':
                    mycursor.execute("select is_warning_set from invoice_header where invoice_no = ?", invoice_no)
                    warning_flag = mycursor.fetchall()
                    if warning_flag["is_warning_set"] == 'n':
                        mycursor.execute("update invoice_header set is_warning_set = 'y' where invoice_no = ?", invoice_no)
                        error_flag = True
        
                err_dict = {
                    'type': each['TYPE'],
                    'msg': each['MESSAGE']
                }
                sap_errors.append(err_dict)
                error_dict = (str(invoice_no), str(count), each["TYPE"], each["MESSAGE"])
                error_list.append(error_dict)
        
            if error_flag == True:
                msg = "While posting error was generated please check the error log!"
                err_responce = {
                    "sap_errors": sap_errors,
                    "msg": msg
                }
                raise SapPostException(err_responce)
        
            else:
                return responce[0]["INVOICE_NO"]
                
        except requests.exceptions.Timeout as msg:
            mydb.rollback()
            return {
                'statuscode': 500, 
                'body': json.dumps("Resource temporarily unavailable!")
            }
        
        except requests.exceptions.HTTPError as msg:
            mydb.rollback()
            return {
                'statuscode': 500, 
                'body': json.dumps("Resource temporarily unavailable!")
            }
            
        except requests.exceptions.TooManyRedirects as msg:
            mydb.rollback()
            return {
                'statuscode': 500, 
                'body': json.dumps("Too Many Redirects!")
            }
            
        except requests.exceptions.RequestException as msg:
            return {
                'statuscode': 500, 
                'body': json.dumps("Resource temporarily unavailable!")
            }
            
        except requests.exceptions.ConnectionError as msg:
            mydb.rollback()
            return {
                'statuscode': 500, 
                'body': json.dumps("Resource temporarily unavailable!")
            }
        

    def zoho_invoice_post(mycursor, invoice_no):
        zoho_invoice = {'line_items': []}

        # s3 = boto3.client("s3")

        values = (invoice_no,)

        mycursor.execute("select * from invoice_header where invoice_no = ?", values)
        invoice_header = mycursor.fetchone()

        if invoice_header:

            mycursor.execute("select a.*, mm.material_no " \
                            "from invoice_item a " \
                            "left join material_master mm " \
                            "on a.material = mm.material_no or a.material_desc = mm.material_name " \
                            "where invoice_no = ? order by a.item_no", values)
            items = mycursor.fetchall

            if items:
                for index, row in enumerate(mycursor):
                    item_id = ''

                    if row["material_no"] == None:
                        item_id = row["material"].upper()

                    else:
                        item_id = row["material_no"].upper()

                    zoho_item = {}
                    zoho_item['item_id'] = item_id
                    zoho_item['quantity'] = row["quantity"]
                    zoho_item['rate'] = float(row['amt_per_unit'])
                    zoho_item['unit'] = row['unit']

                    zoho_invoice['line_items'].append(zoho_item)

            zoho_invoice['invoice_number'] = invoice_header['user_invoice_id']
            zoho_invoice['customer_id'] = invoice_header['supplier_id']
            # zoho_invoice["contact_persons"]: [ "1597715000000303029" ]
            zoho_invoice['date'] = str(invoice_header["invoice_date"])
            zoho_invoice['due_date'] = str(invoice_header["baseline_date"])
            zoho_invoice['currency_id'] = invoice_header["currency"]
            # zoho_invoice['currency_code'] = invoice_header["currency"]
            # zoho_invoice['gst_no'] = 788

            req = requests.Session()

            url = "https://accounts.zoho.com/oauth/v2/token"

            headers = {
                'Content-Type': "application/x-www-form-urlencoded"
            }

            params = {
                'redirect_uri': "http://example.com/yourcallback",
                'client_id': "1000.M9VQW4HBX0KMZILVA2QO1GJXF0HCFX",
                'client_secret': "00ebd763b7e68be7ee65d89d641e93130f1ea44201",
                'refresh_token': "1000.0f0c53563239b7e47e760c8dc270c288.a1f05395858255b0b339aa168806f6ec",
                'grant_type': "refresh_token"
            }

            access_token = req.post(url=url, headers=headers, params=params)

            if access_token.status_code == 200:
                access_token = access_token.json()

                url = "https://invoice.zoho.com/api/v3/invoices"

                headers = {
                    # 'Content-Type': "application/x-www-form-urlencoded;charset=UTF-8",
                    'Authorization': "Zoho-oauthtoken " + str(access_token['access_token'])
                }

                params = {
                }
                # "customer_id": "1597715000000303001",
                # "contact_persons": ["1597715000000303029"],

                body = {
                    "JSONString": json.dumps(zoho_invoice),
                }

                responce = requests.post(url=url, params=params, headers=headers, data=body)

                # print(responce.json())
                dbdh = responce.json()
                print(responce.status_code)

                if responce.status_code != 200:

                    erp_errors = []

                    if responce.status_code == 400:
                        error = json.loads(responce.text)

                        erp_errors.append({
                            'type': error['code'],
                            'msg': error['message']
                        })
                        msg = "While posting error was generated please check the error log!"
                        err_responce = {
                            "sap_errors": erp_errors,
                            "msg": msg
                        }
                        raise ErpPostException(erp_errors)

                # zoho_invoice_post(mycursor=mycursor, invoice_no=3122)


    def getUsrEmails(mycursor, groups=None, members=None):

        emails = None
        emails_str = ""

        if groups:
            format_strings_grp = ','.join(['?'] * len(groups))
        if members:
            format_strings_mem = ','.join(['?'] * len(members))

        if members and groups:
            mix = members + groups
            mycursor.execute("select email from member where member_id in ({}) or group_id in ({})".format(format_strings_mem, format_strings_grp), tuple(mix))
            emails = mycursor.fetchall()

        elif groups:
            mycursor.execute("select email from member where group_id in ({})".format(format_strings_grp), tuple(groups))
            emails = mycursor.fetchall()

        else:
            mycursor.execute("select email from member where member_id in ({})".format(format_strings_mem), tuple(members))
            emails = mycursor.fetchall()

        if emails:
            for index, each in enumerate(emails):
                if index == 0:
                    emails_str = str(each['email'])
                    continue

                emails_str += "," + str(each['email'])

        return  emails_str

    global dbScehma 
    dbScehma = ' DBADMIN '

    # client = boto3.client(
    # 'secretsmanager',
    # region_name='ap-south-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )

    # secret = event["stage-variables"]["secreat"]
    
    # global elipo_email
    # elipo_email = event["stage-variables"]["notification_email"]
    
    global elipo_bucket
    elipo_bucket = event["stage-variables"]["cred_bucket"]
    
    global ocr_bucket_folder
    ocr_bucket_folder = event["stage-variables"]["ocr_bucket_folder"]

    # resp = client.get_secret_value(
    #     SecretId=secret
    # )

    # secretDict = json.loads(resp['SecretString'])
    
    mydb = hdbcliConnect()

    msg = "Action not performed!"
    records = {}
    print(event)
    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)

            mycursor.execute("SELECT * FROM elipo_setting")
            settings = mycursor.fetchall()

            user_settings = {}

            if settings:
                for each in settings:
                    user_settings[each['key_name']] = each['value1']

                del settings

            invoice_no = event["params"]["querystring"]["invoice_no"]
            status = event["params"]["querystring"]["in_status"]
            email = event["params"]["querystring"]["userid"]
            time_taken = event["params"]["querystring"]["time_taken"]

            if (status == "tosap" or (status == "rejected" and "approver_comments" in event["body-json"]) or (status == "refer" and "refer_id" in event["params"]["querystring"] 
                and "refer_comment" in event["body-json"])):


                if "approver_comments" in event["body-json"]:
                    comments = event["body-json"]["approver_comments"]
                else:
                    comments = ""

                mycursor.execute("select member_id, group_id, (fs_name || ' ' ||ls_name) as member_name from member where email = ?", email)
                member = mycursor.fetchone()

                # sqlQuery = "select approver_id FROM approver where member_id = ?"
                # values = (member["member_id"])
                # mycursor.execute(sqlQuery, values)
                # approver = mycursor.fetchone()

                approval = None

                if member['member_id'] and member['group_id']:
                    sqlQuery = "select * from approval where (( isgroup = 'y' and approver = ? ) or ( isgroup = 'n' and approver = ? )) " \
                        "and (isapproved = 'n' or approval_type = 'parallel') and invoice_no = ?"
                    values = (member['group_id'], member['member_id'], invoice_no)
                    mycursor.execute(sqlQuery, values)
                    approval = mycursor.fetchone()

                elif member['member_id']:
                    sqlQuery = "select * from approval where isgroup = 'n' and approver = ? and (isapproved = 'n' or approval_type = 'parallel') and invoice_no = ?"
                    values = (member['member_id'], invoice_no)
                    mycursor.execute(sqlQuery, values)
                    approval = mycursor.fetchone()

                elif member['group_id']:
                    sqlQuery = "select * from approval where isgroup = 'y' and approver = ? and (isapproved = 'n' or approval_type = 'parallel') and invoice_no = ?"
                    values = (member['group_id'], invoice_no)
                    mycursor.execute(sqlQuery, values)
                    approval = mycursor.fetchone()

                if approval is not None:

                    if approval["isapproved"] == "n" and (approval['approval_type'] == 'parallel' or approval["pre_approval"] == 'y' or int(approval["approval_level"]) == 1):

                        sqlQuery = "select * from invoice_header where invoice_no = ?"
                        values = (invoice_no,)
                        mycursor.execute(sqlQuery, values)
                        invoiceheader = mycursor.fetchone()
                        
                        if invoiceheader and invoiceheader["document_type"] == 'RE':
                            documentType = "Invoice "
                            
                        elif invoiceheader and invoiceheader["document_type"] == 'KG':
                            documentType = "Credit Memo "
                            
                        elif invoiceheader and invoiceheader["document_type"] == 'SU':
                            documentType = "Debit Memo "

                        if status == "tosap":

                            sqlQuery = "update approval set isapproved = 'y', time_taken = ?, accept_comment = ? where invoice_no = ? and approval_level = ?"
                            values = (time_taken, comments, approval['invoice_no'], approval['approval_level'])
                            mycursor.execute(sqlQuery, values)

                            sqlQuery = "select * from approval where isapproved = 'n' and invoice_no = ? and approval_level != ?"
                            values = (invoice_no, approval['approval_level'])
                            mycursor.execute(sqlQuery, values)
                            remaining = mycursor.fetchone()

                            if not remaining:

                                if invoiceheader and invoiceheader['from_supplier'] == 'y':
                                    sup_status = "approved"
                                else:
                                    sup_status = ""
                                    
                                sqlQuery = "update invoice_header set in_status = ?, sup_status = ?, end_date = current_timestamp where invoice_no = ?"
                                values = (status, sup_status, invoice_no)
                                mycursor.execute(sqlQuery, values)

                                if user_settings['invoice_posting'] == "on":
                                    if user_settings['user_erp'] == "sap":
                                        erp_responce = sap_post_invoice(invoice_no=invoice_no, mycursor=mycursor)
                                        responce = erp_responce  
                                        print("responce", responce)
                                        
                                        if "statuscode" in responce:
                                            mydb.rollback()
                                            return {
                                                'statuscode': 500,
                                                'body': json.dumps(responce["body"])
                                            }
                                        
                                    elif user_settings['user_erp'] == "zoho":
                                        responce = "ZOHO123"
                                    
                                    if comments == "" or comments == None:
                                        msg_cmnt = str(documentType) + str(invoice_no) + " Approved and Submitted to ERP with " + str(documentType) + str(responce) + " by " + str(member["member_name"])
                                    else:
                                        msg_cmnt = str(documentType) + str(invoice_no) + " Approved with comment '" + comments + "' and Submitted to ERP with " + str(documentType) + str(responce) + " by " + str(member["member_name"])
                                    
                                    msg = str(documentType) + str(responce) + " created in ERP for " + str(documentType) + str(invoice_no)
                                    
                                else:
                                    responce = None
                                    if comments == "" or comments == None:
                                        msg_cmnt = str(documentType) + "Approved and Accepted by " + str(member["member_name"])
                                    else:
                                        msg_cmnt = str(documentType) + "Approved with comment '" + comments + "' and Accepted by " + str(member["member_name"])
                                        
                                    msg = str(documentType) + str(invoice_no) + " Submitted." 

                                sqlQuery = "insert into invoice_audit (invoice_no, prev_status, new_status, working_person, msg) values (?, ?, ?, ?, ?)"
                                values = (invoice_no, "inapproval", "tosap", member['member_id'], msg_cmnt)
                                mycursor.execute(sqlQuery, values)

                                sqlQuery = "INSERT INTO approval_history (isgroup,approver_id,invoice_no,member_id,approval_level,approval_type,entry_date, " \
                                    "in_status, time_taken, accept_comment) VALUES (?, ?,?,?,?,?,?,?,?,?)"
                                values = ( approval['isgroup'], approval['approver'], approval['invoice_no'], member['member_id'], approval['approval_level'], 
                                approval['approval_type'], approval['entry_date'], "approved", approval['time_taken'], comments)
                                mycursor.execute(sqlQuery, values)

                                sqlQuery = "delete from approval where invoice_no = ?"
                                values = (invoice_no,)
                                mycursor.execute(sqlQuery, values)

                                sqlQuery = "update invoice_header set sap_invoice_no = ?, end_date = CURRENT_TIMESTAMP where invoice_no = ? "
                                values = (responce, invoice_no)
                                print(sqlQuery, values)
                                mycursor.execute(sqlQuery, values) 

                                email_adres = None
                                if invoiceheader['working_person']:
                                    templist = []
                                    templist.append(invoiceheader['working_person'])
                                    email_adres = getUsrEmails(mycursor=mycursor, members=templist)

                                if email_adres:
                                    sendMailNotifications(invoice_id=invoice_no, mycursor=mycursor, status='approval-tosap', email= email_adres, by=member['member_name'])

                            else:

                                sqlQuery = "INSERT INTO approval_history (isgroup,approver_id, invoice_no,member_id,approval_level,approval_type,entry_date, " \
                                    "in_status, time_taken, accept_comment) VALUES (?,?,?,?,?,?,?,?,?,?)"
                                values = (approval['isgroup'], approval['approver'], approval['invoice_no'], member['member_id'], approval['approval_level'], approval['approval_type'], 
                                    approval['entry_date'], "approved", time_taken, comments)
                                mycursor.execute(sqlQuery, values)

                                sqlQuery = "insert into invoice_audit (invoice_no, prev_status, new_status, working_person, msg) values (?, ?, ?, ?, ?)"
                                
                                if comments == None or comments == "":
                                    msg_cmnt = str(documentType) + "approved by " + str(member["member_name"])
                                else:
                                    msg_cmnt = str(documentType) + "approved with comment '" + comments + "' by " + str(member["member_name"])
                                    
                                values = (invoice_no, "inapproval", "inapproval", member['member_id'], msg_cmnt)
                                mycursor.execute(sqlQuery, values)

                                level = int(approval["approval_level"]) + 1
                                values = (invoice_no, level)
                                mycursor.execute("update approval set pre_approval = 'y' where invoice_no = ? and approval_level = ?", values)

                                if approval['approval_type'] != 'parallel':
                                    values = (invoice_no, level)
                                    mycursor.execute("select isgroup, approver from approval where invoice_no = ? and approval_level = ?",values)
                                    multiple_app = mycursor.fetchall()

                                    groups = []
                                    members = []

                                    for row in multiple_app:
                                        if row['isgroup'] == 'y': 
                                            groups.append(row['approver'])

                                        else:
                                            members.append(row['approver'])

                                    email_adres = getUsrEmails(mycursor=mycursor, groups=groups, members=members)

                                    if email_adres:
                                        sendMailNotifications(invoice_id=invoice_no, mycursor=mycursor, status="next_approval", email=email_adres, by=member['member_name'])

                                msg = str(documentType) + str(invoice_no) + " is approved and sent for next approval"

                        elif status == "rejected":

                            if invoiceheader and invoiceheader['from_supplier'] == 'y':
                                sup_status = "rejected"
                            else:
                                sup_status = ""

                            sqlQuery = "update invoice_header set in_status = ?, sup_status = ?, approver_comments = ? where invoice_no = ?"
                            values = (status, sup_status, comments, invoice_no)
                            mycursor.execute(sqlQuery, values) 

                            # sqlQuery = "INSERT INTO approval_history (isgroup,approver_id,invoice_no, member_id,approval_level,approval_type,entry_date, in_status, " \
                            #     " time_taken) VALUES (?,?,?,?,?,?,?,?,?)"
                            # values = (approval['isgroup'], approval['approver'], approval['invoice_no'], member['member_id'], approval['approval_level'], approval['approval_type'],
                            #     approval['entry_date'], "rejected", time_taken)
                            # mycursor.execute(sqlQuery, values)

                            sqlQuery = "insert into invoice_audit (invoice_no, prev_status, new_status, working_person, msg) values (?, ?, ?, ?, ?)"
                            msg_cmnt = str(documentType) + "rejected by " + str(member["member_name"])
                            values = (invoice_no, "inapproval", "rejected", member['member_id'], msg_cmnt)
                            mycursor.execute(sqlQuery, values)

                            sqlQuery = "delete from approval where invoice_no = ?"
                            values = (invoice_no,)
                            mycursor.execute(sqlQuery, values)

                            sqlQuery = "delete from approval_history where invoice_no = ?"
                            values = (invoice_no,)
                            mycursor.execute(sqlQuery, values)

                            sqlQuery = "delete from delegate where invoice_id = ?"
                            values = (invoice_no,)
                            mycursor.execute(sqlQuery, values)
                            
                            email_adres = None
                            if invoiceheader['working_person']:
                                templist = []
                                templist.append(invoiceheader['working_person'])
                                email_adres = getUsrEmails(mycursor=mycursor, members=templist)

                            msg = str(documentType) + str(invoice_no) + " rejected"

                            if email_adres:
                                # sendMailNotifications(invoice_id=invoice_no, mycursor=mycursor, status="rejected")
                                sendMailNotifications(invoice_id=invoice_no, mycursor=mycursor, status='approval-reject', email=email_adres, by=member['member_name'])

                        elif status == "delegate":
                            pass
                            # if email:
                            #     # pass
                            #     values = (email,)
                            #     mycursor.execute(
                            #         "SELECT member_id, delegate_to FROM member where email = ?",
                            #         values)
                            #     delegator = mycursor.fetchone()
                            #
                            #     if delegator is not None:
                            #
                            #         until_date = datetime.date.today() + datetime.timedelta(days=2)
                            #         values = (delegator["delegate_to"], delegator["member_id"], invoice_no, until_date)
                            #         mycursor.execute(
                            #             "INSERT INTO delegate (delegated_to, delegated_from, invoice_id, delegate_until) VALUES (?, ?, ?, ?)",
                            #             values)
                            #
                            #         sqlQuery = "insert into invoice_audit (invoice_no, prev_status, new_status, working_person, msg) values (?, ?, ?, ?, ?)"
                            #         msg_cmnt = "Invoice delegated to Member ID " + str(delegator["member_id"])
                            #         values = (invoice_no, "inapproval", "inapproval", delegator['member_id'], msg_cmnt)
                            #         mycursor.execute(sqlQuery, values)
                            #
                            #         msg = "Invoice delegated successfully"
                            #
                            #     else:
                            #         msg = "Provide User id"

                        elif status == 'refer': 

                            refer_member_id = event["params"]["querystring"]["refer_id"]
                            refer_comment = event["body-json"]["refer_comment"]

                            sqlQuery = "update approval set refer_lock = 'y' where approval_level = ? and invoice_no = ? " \
                                "and ( isgroup = 'y' or ( isgroup = 'n' and approver != ?)) "
                            values = (approval["approval_level"], approval['invoice_no'], member["member_id"])
                            mycursor.execute(sqlQuery, values)

                            # this select statement is to check if the invoice was refered by same member to others
                            values = (member["member_id"], invoice_no)
                            mycursor.execute("select * from delegate where delegated_from = ? and invoice_id = ? and is_refered = 'y'", values)
                            if_delegated = mycursor.fetchone()

                            if not if_delegated:
                                if approval["isgroup"] == 'y':
                                    sqlQuery = "INSERT INTO approval (isgroup, approver, invoice_no, isapproved, approval_level, approval_type, escalate_date, " \
                                       " rule_id, refer_lock, referred_approver) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
                                    values = ('n', member["member_id"], approval["invoice_no"], approval["isapproved"], approval["approval_level"], approval["approval_type"],
                                        approval["escalate_date"], approval["rule_id"], 'n', 'y')
                                    mycursor.execute(sqlQuery, values)
                            else:

                                if approval["isgroup"] == 'y':
                                    values = (member['member_id'], invoice_no)
                                    mycursor.execute("select * from approval where isgroup = 'n' and approver = ? and invoice_no = ?", values)
                                    entrycheck = mycursor.fetchone()  

                                    if not entrycheck:
                                        sqlQuery = "INSERT INTO approval (isgroup, approver, invoice_no, isapproved, approval_level, approval_type, escalate_date, " \
                                                    " rule_id, refer_lock, referred_approver) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
                                        values = ('n', member["member_id"], approval["invoice_no"], approval["isapproved"], approval["approval_level"], approval["approval_type"],
                                                    approval["escalate_date"], approval["rule_id"], 'n', 'y')
                                        mycursor.execute(sqlQuery, values)            

                            values = (refer_member_id, member["member_id"], invoice_no, 'y', refer_comment)
                            mycursor.execute("INSERT INTO delegate (delegated_to, delegated_from, invoice_id, is_refered, " \
                                "refer_comment) VALUES (?, ?, ?, ?, ?)", values)

                            values = (refer_member_id, )
                            mycursor.execute("select member_id, group_id, (fs_name || ' '|| ls_name) as member_name, email from member where member_id = ?", values)
                            refer_mem = mycursor.fetchone()

                            if refer_mem:
                                email_adres = refer_mem["email"]

                            sqlQuery = "insert into invoice_audit (invoice_no, prev_status, new_status, working_person, msg) values (?, ?, ?, ?, ?)"
                            msg_cmnt = str(documentType) + "referred by " + str(member["member_name"]) + " to " + str(refer_mem["member_name"]) 
                            values = (invoice_no, "inapproval", "inapproval", member['member_id'], msg_cmnt)
                            mycursor.execute(sqlQuery, values)

                            msg = str(documentType) + str(invoice_no) + " Refered Successfully!"

                            if email_adres:
                                sendMailNotifications(invoice_id=invoice_no, mycursor=mycursor, status='referred', email=email_adres, by=member['member_name'])

                        mydb.commit()
  
                    else:
                        if approval["pre_approval"] != 'y':
                            msg = "Previous approval is pending" 
                            
                        else:
                            msg = "Already Approved"

                else:
                    msg = "No approval created for this invoice"

            else:
                msg = "Provide all mandotory fields"

    except SapPostException as er:
        mydb.rollback()
        return {
            'statuscode': 300,
            'body': sap_errors
            # 'body': err_responce
        }
        
    except requests.exceptions.Timeout as msg:
        mydb.rollback()
        return {
            'statuscode': 500, 
            'body': json.dumps("Resource temporarily unavailable!")
        }
        
    except requests.exceptions.TooManyRedirects as msg:
        mydb.rollback()
        return {
            'statuscode': 500, 
            'body': json.dumps("Too Many Redirects!")
        }
        
    except requests.exceptions.RequestException as msg:
        mydb.rollback()
        return {
            'statuscode': 500, 
            'body': json.dumps("Resource temporarily unavailable!")
        }
        
    except requests.exceptions.ConnectionError as msg:
        mydb.rollback()
        return {
            'statuscode': 500, 
            'body': json.dumps("Resource temporarily unavailable!")
        }
    
    except Exception as e:
        mydb.rollback()
        return {
            'statuscode': 500,
            'body': json.dumps("Internal Error!")   
        } 

    finally: 
        mydb.close()

    if not msg:
        msg = ""

    return {
        'statuscode': 200,
        'body': json.dumps(msg)
    }
# event = {
#     'params': {
#         'querystring': {
#             'invoice_no': 1166,
#             'userid': 'meghana.aiyappa@peolsolutions.com',
#             # 'in_status': 'tosap',
#             'in_status': 'rejected',
#             'time_taken': 1
#         }
#     },
#     'body-json': {
#         'approver_comments': "testing for accept case"
#     },
#     'stage-variables': {
#         'secreat': 'test/einvoice/secret'
#     }
# }

# context = ""

# responce = lambda_handler(event=event, context=context)

# print(responce)    
# event =  {'body-json': {}, 'params': {'path': {}, 'querystring': {'in_status': 'tosap', 'invoice_no': '8490', 'time_taken': '237', 'userid': 'ekta.shrivastava@peolsolutions.com'}, 'header': {'accept': 'application/json, text/plain, */*', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'en-US,en;q=0.9', 'Authorization': 'eyJraWQiOiJ1RXlLMTdnUjUzTVVMcXUrYkRsQUZ2NHRSUTR0VVM5KzM4NlwvZnpxMWorQT0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJkOWY5MWVjZC05YTIyLTRhNzAtOGRlNS00YTJkZmQyZDkxOTkiLCJhdWQiOiIyNGJqZTRqdWQ4aDNmOHJzbmtraGcwYmx2MSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJldmVudF9pZCI6ImQwMGQyMWE3LTQ3OTItNDNlYy1hOTBkLWZjNWFjZTY0NDQyZCIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjU3MDg3NjIyLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAuZXUtY2VudHJhbC0xLmFtYXpvbmF3cy5jb21cL2V1LWNlbnRyYWwtMV9QOXJubnFpTHUiLCJjb2duaXRvOnVzZXJuYW1lIjoiZDlmOTFlY2QtOWEyMi00YTcwLThkZTUtNGEyZGZkMmQ5MTk5IiwiZXhwIjoxNjU3MDkxMjIyLCJpYXQiOjE2NTcwODc2MjIsImVtYWlsIjoiZWt0YS5zaHJpdmFzdGF2YUBwZW9sc29sdXRpb25zLmNvbSJ9.Bxr_AZf-T-4Igv1-QCGAbRkhr2MKcA1KhJyxP9yQivQWVJTQVQJWMvCIYqEtbwRNMKEAYZkl3nYarAJWpXg8Pd8Gn_yuygA3-B1oqM0qrEC40-6wuDL0754O49lgmuNFXsdLOMQ_PzAV6jETZYBzgH5IBaDDlmWWbV0iv6dkrE40D493jAcEuy-YLva1FVIiSzoRA0pm6ZuEbT8bfj6rwuJs8nJZ6010QBtEDRBS6K21irci8bGsmg7nthjYsC2e6bL4QQuplsIVaNb8J_YLgOy3SQ_evrDEJ567DnK57rb-KHB5DvMkCefOhSlssxIX1itb00WZD2zIJc-DjKefhA', 'content-type': 'application/json', 'Host': 'overview.peoltechnologies.net', 'origin': 'https://ywi7o0pxhc.execute-api.eu-central-1.amazonaws.com', 'referer': 'https://ywi7o0pxhc.execute-api.eu-central-1.amazonaws.com/', 'sec-ch-ua': '".Not/A)Brand";v="99", "Google Chrome";v="103", "Chromium";v="103"', 'sec-ch-ua-mobile': '?0', 'sec-ch-ua-platform': '"Windows"', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'cross-site', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36', 'X-Amzn-Trace-Id': 'Root=1-62c52835-43c55f77322d591e11338c9f', 'X-Forwarded-For': '49.206.135.134', 'X-Forwarded-Port': '443', 'X-Forwarded-Proto': 'https'}}, 'stage-variables': {'schema': 'einvoice_db_portal', 'lambda_alias': 'dev', 'secreat': 'test/einvoice/secret', 'notification_email': 'elipotest@gmail.com', 'ocr_bucket_folder': 'old-dev/', 'cred_bucket': 'file-bucket-emp'}, 'context': {'account-id': '', 'api-id': '5ud4f0kv53', 'api-key': '', 'authorizer-principal-id': '', 'caller': '', 'cognito-authentication-provider': '', 'cognito-authentication-type': '', 'cognito-identity-id': '', 'cognito-identity-pool-id': '', 'http-method': 'PATCH', 'stage': 'einvoice-v1', 'source-ip': '49.206.135.134', 'user': '', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36', 'user-arn': '', 'request-id': 'c215b153-60a6-414a-b507-20833938151f', 'resource-id': 'ke8uzw', 'resource-path': '/post-invoice'}}
# event = {'body-json': {'approver_comments': 'test'}, 'params': {'path': {}, 'querystring': {'in_status': 'tosap', 'invoice_no': '9598', 'time_taken': '0', 'userid': 'ekta.shrivastava@peolsolutions.com'}, 'header': {'accept': 'application/json, text/plain, */*', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'en-US,en;q=0.9', 'Authorization': 'eyJraWQiOiJ1RXlLMTdnUjUzTVVMcXUrYkRsQUZ2NHRSUTR0VVM5KzM4NlwvZnpxMWorQT0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJkOWY5MWVjZC05YTIyLTRhNzAtOGRlNS00YTJkZmQyZDkxOTkiLCJhdWQiOiIyNGJqZTRqdWQ4aDNmOHJzbmtraGcwYmx2MSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJldmVudF9pZCI6ImM1NDY4NTBlLWZlNzAtNGFlZi1hN2RhLWViZTRkOWE3ODEwZiIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjg2MjAyMjEyLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAuZXUtY2VudHJhbC0xLmFtYXpvbmF3cy5jb21cL2V1LWNlbnRyYWwtMV9QOXJubnFpTHUiLCJjb2duaXRvOnVzZXJuYW1lIjoiZDlmOTFlY2QtOWEyMi00YTcwLThkZTUtNGEyZGZkMmQ5MTk5IiwiZXhwIjoxNjg2MjA1ODEyLCJpYXQiOjE2ODYyMDIyMTIsImVtYWlsIjoiZWt0YS5zaHJpdmFzdGF2YUBwZW9sc29sdXRpb25zLmNvbSJ9.feiAX6GKbym55WF6qxl6vtKXvZxOqQB9EAeZRjmq54tXPnWDyklIyBbGxUHUIHiLxkl6uYmOsZ5FwJmi5Gkh-Idm02Hui5SY5xnUb5WCTRxjeKiHN-F9hTpaiMLrkR3NfGXhM487QGwt_KrqZzSs9AZ0Kai2rzDEqqktmrUiv4HwBukOtyejnQbF5QOK8tWMLjaL7FQ6REI6Msh3-TBNEHX1k-geeVYwaVLqi4Y6ZTKrTApH-paHJkXaa0DZ3CTcC7w64T2YZkKZyucBrSt4EnoV1oKSUeTolWrNxsFEUXmNpzsF0D3i4RykqNBzlo56kbb8q-LLtvEz1bJEcbhqEw', 'content-type': 'application/json', 'Host': 'overview.peoltechnologies.net', 'origin': 'https://ywi7o0pxhc.execute-api.eu-central-1.amazonaws.com', 'referer': 'https://ywi7o0pxhc.execute-api.eu-central-1.amazonaws.com/', 'sec-ch-ua': '"Not_A Brand";v="99", "Google Chrome";v="109", "Chromium";v="109"', 'sec-ch-ua-mobile': '?0', 'sec-ch-ua-platform': '"Windows"', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'cross-site', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', 'X-Amzn-Trace-Id': 'Root=1-64816784-6dd9459c44cd41eb1ec471c2', 'X-Forwarded-For': '27.7.113.115', 'X-Forwarded-Port': '443', 'X-Forwarded-Proto': 'https'}}, 'stage-variables': {'schema': 'einvoice_db_portal', 'lambda_alias': 'dev', 'secreat': 'test/einvoice/secret', 'notification_email': 'elipotest@gmail.com', 'ocr_bucket_folder': 'old-dev/', 'cred_bucket': 'file-bucket-emp'}, 'context': {'account-id': '', 'api-id': '5ud4f0kv53', 'api-key': '', 'authorizer-principal-id': '', 'caller': '', 'cognito-authentication-provider': '', 'cognito-authentication-type': '', 'cognito-identity-id': '', 'cognito-identity-pool-id': '', 'http-method': 'PATCH', 'stage': 'einvoice-v1', 'source-ip': '27.7.113.115', 'user': '', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', 'user-arn': '', 'request-id': '22bf9bf1-a051-46d2-b03e-ca8068a537d9', 'resource-id': 'ke8uzw', 'resource-path': '/post-invoice'}}

# print(patchInvoiceStatus(event , ' ')) 

class FailedToCreateApprocalsException(Exception):
    """"""


def notify_approvers(members, body):
    pass


class ApprovalException(Exception):
    pass


class SapPostException(Exception):
    pass


class ErpPostException(Exception):
    pass


# invoice_id = 856
# decider = {
#                 'discount': 0,
#                 'amount': 150001.24,
#                 'cost_center': '1000',
#                 'currency': 'INR',
#                 'gl_account': '113310',
#                 'npo': 'n',
#                 'vendor_no': '2000000075',
#                 'department_id': '13',
#                 'item_category': ['0']
#             }

# with mydb.cursor() as mycursor:
#     print(create_approvals(mycursor, invoice_id, decider))

#didnt fnd crt event to test insert statements
def postInvoiceDetail(event, context):
    

    def after_approval_audit(mycursor, invoice_no, working_person, is_mannually, documentType):
        sqlQuery = "insert into invoice_audit (invoice_no, prev_status, new_status, working_person, msg) values (?, ?, ?, ?, ?)"

        if is_mannually:
            msg_cmnt = "New " + documentType + str(invoice_no) + " Manually Created and Sent for Approval by " + working_person["member_name"]

        else:
            msg_cmnt = documentType + str(invoice_no) + " Sent for Approval by " + working_person["member_name"]

        values = (invoice_no, "", "inapproval", working_person['member_id'], msg_cmnt)
        mycursor.execute(sqlQuery, values)


    def after_erppost_audit(mycursor, invoice_no, erp_invoiceno, working_person, is_mannually, documentType):

        sqlQuery = "insert into invoice_audit (invoice_no, prev_status, new_status, working_person, msg) values (?, ?, ?, ?, ?)"

        if is_mannually:
            msg_cmnt = "New " + documentType + str(invoice_no) + " Created Manually and Submitted to ERP with " + documentType + "No. " + str(erp_invoiceno) + " by " + working_person["member_name"]

        else:
            msg_cmnt = documentType + str(invoice_no) + " Submitted to ERP with " + documentType + "No. " + str(erp_invoiceno) + " by " + str(working_person["member_name"])

        values = (invoice_no, "", "tosap", working_person['member_id'], msg_cmnt)
        mycursor.execute(sqlQuery, values)

        values = (erp_invoiceno, invoice_no)

        mycursor.execute(
            "update invoice_header set in_status = 'tosap', sap_invoice_no = ?, sup_status = 'approved', end_date = CURRENT_TIMESTAMP where invoice_no = ?",values)

        mycursor.execute("select * from rule_notification where invoice_status = 'npo-create-toerp'")
        notification = mycursor.fetchone()

        message_body = documentType + str(invoice_no) + " submitted to ERP"

        if notification and notification['mail_cc']:
            sendMailNotifications(invoice_id=invoice_no, mycursor=mycursor, emails=notification['mail_cc'], body1=message_body, user=working_person)


    def erp_operations(user_settings, invoice_no, mycursor, working_person, decider, is_mannually, documentType):

        sim_responce = None
        erp_responce = None
        responce = None

        # user_settings['user_erp'] = "zoho"
        try:
            if user_settings['po_validation'] == "on":
                if user_settings['user_erp'] == "sap":
                    # print("simu")
                    sim_responce = sap_post_invoice(invoice_no=invoice_no, mycursor=mycursor, simulation="X")
                elif user_settings['user_erp'] == "zoho":
                    sim_responce = True
                    pass
            else:
                sim_responce = True

            if user_settings["approval_rules"] == "on":
                created = None
                if sim_responce or sim_responce == '':
                    created = create_approvals(mycursor=mycursor, invoice_id=invoice_no, decider=decider, working_person=working_person, documentType=documentType)

                    if created == False:
                        if user_settings['invoice_posting'] == "on":
                            if user_settings['user_erp'] == "sap":
                                # print("post")
                                erp_responce = sap_post_invoice(invoice_no=invoice_no, mycursor=mycursor, simulation="")
                                responce = erp_responce
                                after_erppost_audit(mycursor=mycursor,
                                                    invoice_no=invoice_no,
                                                    erp_invoiceno=erp_responce,
                                                    working_person=working_person,
                                                    documentType=documentType,
                                                    is_mannually=is_mannually)

                            elif user_settings['user_erp'] == "zoho":
                                zoho_invoice_post(invoice_no=invoice_no, mycursor=mycursor)
                                responce = "ZOHO123"

                        else:
                            responce = "erpPostingOff"

                    else:
                        responce = None
                        after_approval_audit(mycursor=mycursor,
                                            invoice_no=invoice_no,
                                            working_person=working_person,
                                            is_mannually=is_mannually,
                                            documentType=documentType)
            else:
                if user_settings['invoice_posting'] == "on":
                    if user_settings['user_erp'] == "sap":
                        erp_responce = sap_post_invoice(invoice_no=invoice_no, mycursor=mycursor, simulation="")
                        responce = erp_responce
                    elif user_settings['user_erp'] == "zoho":
                        zoho_invoice_post(invoice_no=invoice_no, mycursor=mycursor)
                        responce = "ZOHO123"
                else:
                    responce = "erpPostingOff"
        
            return responce
        
        except requests.exceptions.Timeout as msg:
            # mydb.rollback()
            return {
                'statuscode': 500,
                'body': json.dumps("Resource temporarily unavailable!")
            }

        except requests.exceptions.TooManyRedirects as msg:
            # mydb.rollback()
            return {
                'statuscode': 500,
                'body': json.dumps("Too Many Redirects!")
            }

        except requests.exceptions.RequestException as msg:
            # mydb.rollback()
            return {
                'statuscode': 500,
                'body': json.dumps("Resource temporarily unavailable!")
            }

        except requests.exceptions.ConnectionError as msg:
            # mydb.rollback()
            return {
                'statuscode': 500,
                'body': json.dumps("Resource temporarily unavailable!")
            }
        

    def sap_post_invoice(invoice_no, mycursor, simulation):
        s3 = boto3.client("s3")
        upload_attach = []

        items = []
        records = []
        values = invoice_no

        time = datetime.datetime.now()
        current_time = time.strftime("%H:%M:%S")
        
        mycursor.execute("select value1 from elipo_setting where key_name = 'attach_to_erp' ")
        post_attach = mycursor.fetchone()
        post_attach = convertValuesTodict(mycursor.description, post_attach)
        post_attach = post_attach[0]
        post_attach["value1"] = "on"
        
        
        if simulation == 'X':
            mycursor.execute("delete from sap_error_log where invoice_no = ?", values)

        mycursor.execute("select * from invoice_header where invoice_no = ?", values)
        invoice_header = mycursor.fetchone()

        mycursor.execute("select name, file_path, mime_type from file_storage where file_id = ?", values)
        file = mycursor.fetchall()
        
        if post_attach["value1"] == 'on':
            indicator = None
        
            if file:
                try:
                    for row in file:
                        file_obj = s3.get_object(Bucket=row["file_path"], Key=row["name"])
                        file_content = file_obj["Body"].read()
                        file_content = str(base64.b64encode(file_content))
                        length = len(file_content)
                        file_content = file_content[2:length - 1]
                        data = {
                            "file_content": file_content,
                            "mime_type": row["mime_type"]
                        }
                        upload_attach.append(data)
        
                    indicator = True
        
                except Exception as e:
                    print("process didn't stopped", e)
        
            if not indicator:
                file_content = None
                upload_attach.append({
                    "file_content": "None",
                    "mime_type": "None"
                })
                
        elif post_attach["value1"] == 'off':
            file_content = None
            upload_attach.append({
                "file_content": "None",
                "mime_type": "None"
            })

        mycursor.execute("select a.*, mm.material_no " \
            "from invoice_item a " \
            "left join material_master mm " \
            "on a.material = mm.material_no or a.material_desc = mm.material_name " \
            "where invoice_no = ? order by a.item_no", values)
        
        creditDebitInd = ""
        if invoice_header:
            if invoice_header["npo"] == "y":
                creditDebitInd = "S"
            else:
                if invoice_header["document_type"] == "RE":
                    creditDebitInd = ""
                elif invoice_header["document_type"] == "SU":
                    creditDebitInd = "X"
                else:   
                    creditDebitInd = ""
            
        for index, row in enumerate(mycursor):
            
            if str(row["item_category"]) != '9':
                if row["material_no"] == None:
                    materialName = row["material"].upper()
                else:
                    materialName = row["material_no"].upper()
                    
            else:
                materialName = ""
                
            if row["ebelp"] == None or row["ebelp"] == "":
                ebelp_data = (index + 1) * 10
            else:
                ebelp_data = row["ebelp"]
            
            if str(row["item_category"]) == '9':
                quantity = ""
                unit = ""
            
            else:
                quantity = row["quantity"]
                unit = row["unit"]
            
            record = {
                "Belnr": " ",
                "Gjahr": " ",
                "Buzei": row["item_no"],
                "Ebeln": invoice_header["ref_po_num"],
                "Ebelp": ebelp_data,
                "Matnr": materialName,
                "Wrbtr": str(row["gross_amount"]),
                "BWKEY": row["plant"],
                "Shkzg": creditDebitInd,
                "Mwskz": row["gst_per"],
                "Menge": float(quantity),
                "Bstme": unit,
                "WRF_CHARSTC1": row["gl_account"]
            }
            items.append(record)

        if invoice_header:
            baseline_date = str(invoice_header["baseline_date"]) + "T" + current_time
            posting_date = str(invoice_header["posting_date"]) + "T" + current_time
            invoice_date = str(invoice_header["invoice_date"]) + "T" + current_time
            
            if invoice_header["document_type"] == "RE" or invoice_header["document_type"] == "SU":
                invoice_ind = "X"
                doc = invoice_header["document_type"]
            else:
                invoice_ind = " "
                doc = "RE"
                
            mycursor.execute("select value1 from elipo_setting where key_name = 'npo_tcode' ")
            npoTcode = mycursor.fetchone()
            
            
            postingFlag = None
            if npoTcode:
                if npoTcode["value1"] == "FB60":
                    postingFlag = "X"
                else:
                    postingFlag = ""
            
            invoice_date = ''.join(invoice_date.split("-"))  
            posting_date = ''.join(posting_date.split("-"))  
            baseline_date = ''.join(baseline_date.split("-"))      
            records = {
                "Belnr": " ",
                "Gjahr": " ",
                "Blart": "RE",
                "Bldat": invoice_date,  
                "Budat": posting_date,
                "Bukrs": invoice_header["company_code"],
                "Lifnr": invoice_header["supplier_id"],
                "Waers": invoice_header["currency"],
                "Xrech": invoice_ind,
                "Xmwst": " ",
                "Rmwwr": str(invoice_header["amount"]),
                "Mwskz_bnk": invoice_header["tax_per"],
                "Zfbdt": baseline_date,
                "InvoicehToitem": items,
                "Simu": simulation,
                "NpoPosting": postingFlag,
                # "sheet_no": "100001104",
                "Attachment": upload_attach
            }
        print(records)
        
        mycursor.execute("select * from elipo_setting where key_name in ('sap_posting_url', 'sap_password', 'sap_userid')")
        sap_settings = mycursor.fetchall()

        sap_post_setting = {}
        
        if sap_settings:
            for each in sap_settings:
                sap_post_setting[each['key_name']] = each['value1']
        
            del sap_settings
        
        s = requests.Session()
        s.headers.update({'Connection': 'keep-alive'})
        
        try:
            
            # url = "http://182.72.219.94:8000/zinvoiceno1/InvoicePost"
            url = "https://virtual-host1.apimanagement.us21.hana.ondemand.com:443/zinvoicebp/invoicebp"
            params = {"sap-client": "800"}
        
            headersFetch = {"X-CSRF-TOKEN": "Fetch"}
            y = s.get(url, auth=HTTPBasicAuth("DEVELOPER08", "Peol@123"), headers=headersFetch, params=params, timeout=30)
            token = y.headers["X-CSRF-TOKEN"]
        
            headers = {"X-CSRF-TOKEN": token, "Content-type": "application/json"}
            sap_responce = s.post(url, json=records, auth=HTTPBasicAuth("DEVELOPER08", "Peol@123"), headers=headers, params=params, timeout=30)
            # print(sap_responce)
            responce = sap_responce.json()  
            
            error_list = []
            sap_errors = []
            error_flag = False
        
            for count, each in enumerate(responce[0]["RET"], 1):
                if each['TYPE'] == 'E':
                    error_flag = True
        
                if each['TYPE'] == 'W':
                    mycursor.execute("select is_warning_set from invoice_header where invoice_no = ?", invoice_no)
                    warning_flag = mycursor.fetchall()
                    if warning_flag["is_warning_set"] == 'n':
                        mycursor.execute("update invoice_header set is_warning_set = 'y' where invoice_no = ?", invoice_no)
                        error_flag = True
        
                err_dict = {
                    'type': each['TYPE'],
                    'msg': each['MESSAGE']
                }
                sap_errors.append(err_dict)
                error_dict = (str(invoice_no), str(count), each["TYPE"], each["MESSAGE"])
                error_list.append(error_dict)
        
            if error_flag == True:
                msg = "While posting error was generated please check the error log!"
                err_responce = {
                    "sap_errors": sap_errors,
                    "msg": msg
                }
                raise SapPostException(err_responce)
        
            else:
                return responce[0]["INVOICE_NO"]
        
        except requests.exceptions.Timeout as msg:
            mydb.rollback()
            return {
                'statuscode': 500,
                'body': json.dumps("Resource temporarily unavailable!")
            }

        except requests.exceptions.TooManyRedirects as msg:
            mydb.rollback()
            return {
                'statuscode': 500,
                'body': json.dumps("Too Many Redirects!")
            }

        except requests.exceptions.RequestException as msg:
            mydb.rollback()
            return {
                'statuscode': 500,
                'body': json.dumps("Resource temporarily unavailable!")
            }

        except requests.exceptions.ConnectionError as msg:
            mydb.rollback()
            return {
                'statuscode': 500,
                'body': json.dumps("Resource temporarily unavailable!")
            }

    def zoho_invoice_post(mycursor, invoice_no):
        zoho_invoice = {'line_items': []}

        # s3 = boto3.client("s3")

        values = (invoice_no,)

        mycursor.execute("select * from invoice_header where invoice_no = ?", values)
        invoice_header = mycursor.fetchone()

        if invoice_header:

            # mycursor.execute(
            #     "select name, file_path, mime_type from file_storage where file_id = %s", values)
            # file = mycursor.fetchall()
            #
            # upload_attach = []
            # indicator = None
            #
            # if file:
            #     try:
            #         for row in file:
            #             file_obj = s3.get_object(Bucket=row["file_path"], Key=row["name"])
            #             file_content = file_obj["Body"].read()
            #             file_content = str(base64.b64encode(file_content))
            #             length = len(file_content)
            #             file_content = file_content[2:length - 1]
            #             data = {
            #                 "file_content": file_content,
            #                 "mime_type": row["mime_type"]
            #             }
            #             upload_attach.append(data)
            #         indicator = True
            #
            #     except Exception as e:
            #         print(e)
            #
            # if not indicator:
            #     file_content = None
            #     upload_attach.append({
            #         "file_content": None,
            #         "mime_type": None
            #     })

            mycursor.execute("select a.*, mm.material_no " \
                            "from invoice_item a " \
                            "left join material_master mm " \
                            "on a.material = mm.material_no or a.material_desc = mm.material_name " \
                            "where invoice_no = ? order by a.item_no", values)
            items = mycursor.fetchall

            if items:
                for index, row in enumerate(mycursor):
                    item_id = ''

                    if row["material_no"] == None:
                        item_id = row["material"].upper()

                    else:
                        item_id = row["material_no"].upper()

                    zoho_item = {}
                    zoho_item['item_id'] = item_id
                    zoho_item['quantity'] = row["quantity"]
                    zoho_item['rate'] = float(row['amt_per_unit'])
                    zoho_item['unit'] = row['unit']

                    zoho_invoice['line_items'].append(zoho_item)

            zoho_invoice['invoice_number'] = invoice_header['user_invoice_id']
            zoho_invoice['customer_id'] = invoice_header['supplier_id']
            # zoho_invoice["contact_persons"]: ["1597715000000303029"]
            zoho_invoice['date'] = str(invoice_header["invoice_date"])
            zoho_invoice['due_date'] = str(invoice_header["baseline_date"])
            zoho_invoice['currency_id'] = invoice_header["currency"]
            # zoho_invoice['currency_code'] = invoice_header["currency"]
            # zoho_invoice['gst_no'] = 788

            req = requests.Session()

            url = "https://accounts.zoho.com/oauth/v2/token"

            headers = {
                'Content-Type': "application/x-www-form-urlencoded"
            }

            params = {
                'redirect_uri': "http://example.com/yourcallback",
                'client_id': "1000.M9VQW4HBX0KMZILVA2QO1GJXF0HCFX",
                'client_secret': "00ebd763b7e68be7ee65d89d641e93130f1ea44201",
                'refresh_token': "1000.0f0c53563239b7e47e760c8dc270c288.a1f05395858255b0b339aa168806f6ec",
                'grant_type': "refresh_token"
            }

            access_token = req.post(url=url, headers=headers, params=params)

            if access_token.status_code == 200:
                access_token = access_token.json()

                url = "https://invoice.zoho.com/api/v3/invoices"

                headers = {
                    # 'Content-Type': "application/x-www-form-urlencoded;charset=UTF-8",
                    'Authorization': "Zoho-oauthtoken " + str(access_token['access_token'])
                }

                params = {
                }
                # "customer_id": "1597715000000303001",
                # "contact_persons": ["1597715000000303029"],

                body = {
                    "JSONString": json.dumps(zoho_invoice),
                }

                responce = requests.post(url=url, params=params, headers=headers, data=body)

                # print(responce.json())  
                dbdh = responce.json()

                if responce.status_code != 200:

                    erp_errors = []

                    if responce.status_code == 400:
                        error = json.loads(responce.text)

                        erp_errors.append({
                            'type': error['code'],
                            'msg': error['message']
                        })
                        msg = "While posting error was generated please check the error log!"
                        err_responce = {
                            "sap_errors": erp_errors,
                            "msg": msg
                        }
                        raise ErpPostException(erp_errors)

                # zoho_invoice_post(mycursor=mycursor, invoice_no=3122)


    def audit_check(mycursor, invoice_no, working_person, header, list_item):
        old_value = ' '
        header_field_name = ["ref_po_num", "company_code", "invoice_date", "posting_date", "baseline_date", "amount", "currency", "payment_method",
            "gl_account", "supplier_id", "cost_center", "tcs", "tax_per", "tds_per", "payment_terms", "adjustment", "internal_order", "department_id"]

        item_field_name = ["material", "quantity", "gl_account", "gross_amount", "plant", "gst_per", "cost_center"]

        mycursor.execute("select * from invoice_header where invoice_no = ?", invoice_no)
        invoice_header = mycursor.fetchone()

        mycursor.execute("select * from invoice_item where invoice_no = ?", invoice_no)
        invoice_item = mycursor.fetchall()
        invoice_item = convertValuesTodict(mycursor.description, invoice_item)
        # print("new ", list_item)
        # print("old ", invoice_item)

        mycursor.execute("select * from inv_field_data where invoice_no = ? and field_name in ('gl_account','cost_center','department_id')", invoice_no)
        fieldData = mycursor.fetchall()

        newMaterial = [sub['material'] for sub in list_item]
        oldMaterial = [sub['material'] for sub in invoice_item]

        if invoice_item:

            change_flag = None
            values = []
            audit_values = []
            newItems = []
            deletedItems = []

            msg_cmnt = None
            for key1 in invoice_header:
                if key1 in header_field_name:
                    for key2 in header:
                        if key2 in header_field_name:
                            if str(key1) == str(key2):
                                if (key1 == 'amount' and key2 == 'amount') or (key1 == 'adjustment' and key2 == 'adjustment'):
                                    if invoice_header[key1] != None and header[key2] != None:
                                        old_value = float(invoice_header[key1])
                                        new_value = float(header[key2])

                                else:
                                    if invoice_header[key1] != None and header[key2] != None:
                                        old_value = str(invoice_header[key1])
                                        new_value = str(header[key2])

                                    else:
                                        old_value = str(invoice_header[key1])
                                        new_value = str(invoice_header[key1])

                                if key1 == "ref_po_num":
                                    field_variable = "Reference PO No."
                                elif key1 == "company_code":
                                    field_variable = "Company Code"
                                elif key1 == "invoice_date":
                                    field_variable = "Invoice Date"
                                elif key1 == "posting_date":
                                    field_variable = "Posting Date"
                                elif key1 == "baseline_date":
                                    field_variable = "Baseline Date"
                                elif key1 == "due_date":
                                    field_variable = "Due Date"
                                elif key1 == "amount":
                                    field_variable = "Amount"
                                elif key1 == "currency":
                                    field_variable = "Currency"
                                elif key1 == "payment_method":
                                    field_variable = "Payement Method"
                                elif key1 == "gl_account":
                                    field_variable = "G/L Account"
                                elif key1 == "supplier_id":
                                    field_variable = "Suppier ID"
                                elif key1 == "cost_center":
                                    field_variable = "Cost Center"
                                elif key1 == "tcs":
                                    field_variable = "TCS"
                                elif key1 == "tax_per":
                                    field_variable = "Tax Percentage"
                                elif key1 == "tds_per":
                                    field_variable = "TDS Percentage"
                                elif key1 == "payment_terms":
                                    field_variable = "Payement Terms"
                                elif key1 == "adjustment":
                                    field_variable = "Adjustment"
                                elif key1 == "internal_order":
                                    field_variable = "Internal Order"
                                elif key1 == "department_id":
                                    field_variable = "Department"

                                if ((old_value) != (new_value)) and (old_value != 0 and new_value != None):
                                    data = (invoice_no, key1, invoice_header[key1], header[key2])
                                    values.append(data)
                                    if field_variable == "Department":
                                        oldDep = None
                                        newDep = None

                                        if invoice_header[key1] != None:
                                            mycursor.execute("SELECT department_name FROM departmental_budget_master where department_id = ?",
                                                invoice_header[key1])
                                            oldDep = mycursor.fetchone()

                                        if header[key2] != None:
                                            mycursor.execute("SELECT department_name FROM departmental_budget_master where department_id = ?",
                                                header[key2])
                                            newDep = mycursor.fetchone()

                                        if oldDep or newDep:
                                            if msg_cmnt == None:
                                                msg_cmnt = "Header: "

                                            if not oldDep or oldDep == "":
                                                oldDep = "None"

                                            else:
                                                oldDep = oldDep["department_name"]

                                            if not newDep or newDep == "":
                                                newDep = "None"

                                            else:
                                                newDep = newDep["department_name"]

                                            msg_cmnt = msg_cmnt + str(field_variable) + " changed from " + str(oldDep) + " to " + str(newDep) + ", "

                                    else:
                                        if msg_cmnt == None:
                                            msg_cmnt = "Header: "

                                        if str(header[key2]) == "":
                                            value2 = "None"
                                        else:
                                            value2 = str(header[key2])

                                        if str(invoice_header[key1]) == "":
                                            value1 = "None"
                                        else:
                                            value1 = str(invoice_header[key1])

                                        if field_variable == "Department" or field_variable == "Cost Center" or field_variable == "G/L Account" or field_variable == "Amount":
                                            if fieldData:
                                                msg_cmnt = msg_cmnt + str(field_variable) + " changed from " + str(value1) + " to " + str(value2) + ", "

                                            else:
                                                msg_cmnt = msg_cmnt + str(field_variable) + " defaulted from " + str(value1) + " to " + str(value2) + ", "
                                        else:
                                            msg_cmnt = msg_cmnt + str(field_variable) + " changed from " + str(value1) + " to " + str(value2) + ", "

                                    break

            if msg_cmnt != None:
                leng = len(msg_cmnt) - 2
                msg_cmnt = msg_cmnt[0: leng]
                msg_cmnt = msg_cmnt + " by " + str(working_person["member_name"])
                temp = (invoice_no, invoice_header["in_status"], header["status"], working_person['member_id'], msg_cmnt)
                audit_values.append(temp)

            for each in oldMaterial:
                if each not in newMaterial:
                    msg_cmnt = each + " deleted by " + str(working_person["member_name"])
                    temp = (invoice_no, invoice_header["in_status"], header["status"], working_person['member_id'], msg_cmnt)
                    audit_values.append(temp)
                    deletedItems.append(each)

            for each in newMaterial:
                if each not in oldMaterial:
                    msg_cmnt = each + " added by " + str(working_person["member_name"])
                    temp = (invoice_no, invoice_header["in_status"], header["status"], working_person['member_id'], msg_cmnt)
                    audit_values.append(temp)
                    newItems.append(each)

            msg_cmnt = ""
            for each1 in invoice_item:
                if each1["material"] in deletedItems:
                    continue

                for each2 in list_item:
                    if each2["material"] in newItems:
                        continue
                    
                    if each1["material"]!= None and each2["material"]!= None:
                        each1["material"] = each1["material"].upper()
                        each2["material"]=each2["material"].upper()
                    if(each1["material"] == each2["material"]) and (each1["item_no"] == each2["item_no"]):
                        msg_cmnt = ""

                        for key1 in each1:
                            for key2 in each2:
                                if (key1 in item_field_name and key2 in item_field_name) and (key1 == key2):
                                    if (key1 == 'gross_amount' and key2 == 'gross_amount') or (key1 == 'amount' and key2 == 'amount'):
                                        if each1[key1] != None and each2[key2] != None:
                                            if old_value == None:
                                                old_value = 0
                                            else:
                                                old_value = float(each1[key1])
                                            new_value = float(each2[key2])

                                    else:
                                        if old_value:
                                            if old_value == None or old_value == "":
                                                old_value = "None"
                                            else:
                                                old_value = str(each1[key1])
                                            
                                            new_value = str(each2[key2])

                                    if key1 == "material":
                                        field_variable = "Material"
                                    elif key1 == "quantity":
                                        field_variable = "Quantity"
                                    elif key1 == "gl_account":
                                        field_variable = "G/L Account"
                                    elif key1 == "gross_amount":
                                        field_variable = "Amount"
                                    elif key1 == "plant":
                                        field_variable = "Plant"
                                    elif key1 == "gst_per":
                                        field_variable = "GST Percentage"
                                    elif key1 == "cost_center":
                                        field_variable = "Cost Center"

                                    if str(old_value) != str(new_value):
                                        data = (invoice_no, key1, each1[key1], each2[key2])
                                        values.append(data)

                                        if msg_cmnt == "":
                                            msg_cmnt = str(each2["material"]) + " "

                                        if field_variable == "Department" or field_variable == "Cost Center" or field_variable == "G/L Account" or field_variable == "Plant":
                                            if fieldData:
                                                msg_cmnt = msg_cmnt + str(field_variable) + " changed from " + str(old_value) + " to " + str(new_value) + ", "

                                            else:
                                                msg_cmnt = msg_cmnt + str(field_variable) + " defaulted from " + str(old_value) + " to " + str(new_value) + ", "
                                        else:
                                            if field_variable == "Amount":
                                                msg_cmnt = msg_cmnt + str(field_variable) + " changed from " + str(each1[key1]) + " to " + str(float(each2[key2])) + ", "
                                            else:
                                                msg_cmnt = msg_cmnt + str(field_variable) + " changed from " + str(each1[key1]) + " to " + str(each2[key2]) + ", "
                                        # break

                        if msg_cmnt != "":
                            leng = len(msg_cmnt) - 2
                            msg_cmnt = msg_cmnt[0: leng]
                            msg_cmnt = msg_cmnt + " by " + str(working_person["member_name"])
                            var = " by " + str(working_person["member_name"])

                            if var != msg_cmnt:
                                temp = (
                                invoice_no, invoice_header["in_status"], header["status"], working_person['member_id'],
                                msg_cmnt)
                                audit_values.append(temp)

                    # break

            sqlQuery = "insert into invoice_audit (invoice_no, prev_status, new_status, working_person, msg) values (?, ?, ?, ?, ?)"
            for row in audit_values:
                mycursor.execute(sqlQuery, tuple(row))

            sqlQuery = "insert into inv_field_data (invoice_no, field_name, old_data, new_data) values (?, ?, ?, ?)"
            for row in values:
                mycursor.execute(sqlQuery, tuple(row))

        return

    
    def create_approvals(mycursor, invoice_id, decider, working_person, documentType):
        try:

            mycursor.execute("SELECT a.* FROM rule a inner join rule_snro b on a.rule_id = b.rule_id where b.is_approval = 'y' and a.is_on = 'y'")
            all_rules = mycursor.fetchall()

            rule_ids = [sub['rule_id'] for sub in all_rules]
            rule_ids = set(rule_ids)
            rule_ids = list(rule_ids)

            rule = []

            default = []
            for ruleID in rule_ids:
                rules = []

                for row in all_rules:
                    if not default and row['decider'] == "default":  # ruleID == row['rule_id'] and row['decider'] != "default":
                        default.append(row)

                    elif row['decider'] == "default_assignment":
                        pass

                    elif ruleID == row['rule_id']:
                        rules.append(row)

                noOfRules = len(rules)
                countMatches = 0

                for row in rules:
                    if row['decider_type'] == "number":

                        if row['decider'] == "amount" or row["decider"] == "discount":
                            d_value = float(decider[row['decider']])
                        else:
                            d_value = int(decider[row['decider']])

                        if row['operator'] == "=" and d_value == int(row['d_value']):
                            countMatches += 1
                        elif row['operator'] == ">" and d_value > int(row['d_value']):
                            countMatches += 1
                        elif row['operator'] == "<" and d_value < int(row['d_value']):
                            countMatches += 1
                        elif row['operator'] == "between" and int(row['d_value']) <= d_value <= int(row['d_value2']):
                            countMatches += 1

                    elif row['decider_type'] == "string":
                        if row["decider"] == "item_category":
                            for each in decider["item_category"]:
                                if each == str(row['d_value']):
                                    countMatches += 1
                                    break

                        elif decider[row['decider']] == str(row['d_value']):
                            countMatches += 1

                if noOfRules == countMatches and noOfRules != 0:
                    rule.append(row)

            if not rule and default:
                rule.append(default[0])

            if rule:

                values = [sub['rule_id'] for sub in rule]
                values = set(values)
                values = list(values)
                values.append(int(0))
                format_strings = ','.join(['?'] * len(values))
                sqlQuery = "SELECT DISTINCT r.*, ru.approval_type, ru.ifnot_withindays "\
                               "FROM rule_approver r "\
                                "LEFT JOIN rule ru ON r.rule_key = ru.rule_id "\
                                "WHERE r.rule_key IN ("+format_strings+") "\
                                "ORDER BY CASE approval_type "\
                                            "WHEN 'series' THEN 1 "\
                                            "WHEN 'parallel' THEN 2 "\
                                            "WHEN 'single' THEN 3 "\
                                            "ELSE 4 "\
                                        "END,r.level DESC,r.rule_key"
                mycursor.execute(sqlQuery, tuple(values))
                all_approvers = mycursor.fetchall()

                multiple_app = []
                allrules = []

                main_rule = None
                main_rule = all_approvers[0]

                for row in all_approvers:

                    if row["approver"] == 999999999:
                        return False

                    allrules.append(row['rule_key'])

                    if all_approvers[0]['rule_key'] == row['rule_key']:
                        data = {
                            "isgroup": row["isgroup"],
                            "approver": row["approver"],
                            'level': row['level'],
                            'approval_type': main_rule['approval_type'],
                            'rule_id': row['rule_key']
                        }
                        multiple_app.append(data)

                allrules = set(allrules)
                allrules = list(allrules)
                allrules.remove(all_approvers[0]['rule_key'])

                add_level = all_approvers[0]['level']

                for rule in allrules:

                    level_s = 0

                    for row in all_approvers:

                        if rule == row['rule_key']:

                            dupl_app = False

                            for ex in multiple_app:
                                if ex['isgroup'] == row['isgroup'] and ex['approver'] == row['approver']:
                                    dupl_app = True
                                    break

                            if dupl_app:
                                continue

                            if level_s < row['level']:
                                level_s = row['level']

                            data = {
                                "isgroup": row["isgroup"],
                                "approver": row["approver"],
                                'level': row['level'] + add_level,
                                'approval_type': row['approval_type'],
                                'rule_id': row['rule_key']
                            }
                            multiple_app.append(data)

                    if level_s > 0:
                        add_level += level_s

                values = []
                exc_days = int(main_rule['ifnot_withindays'])

                escalate_when = datetime.date.today() + datetime.timedelta(days=exc_days)

                groups = []
                members = []

                for row in multiple_app:

                    if row['isgroup'] == 'y' and ( (row['approval_type'] == "single" or row['approval_type'] == "parallel") or row['level'] == 1):
                        groups.append(row['approver'])

                    elif (row['approval_type'] == 'single' or row['approval_type'] == 'parallel') or row['level'] == 1:
                        members.append(row['approver'])

                    value = (row['isgroup'], row['approver'], invoice_id, "n", row['level'], row['approval_type'], escalate_when, row['rule_id'])
                    values.append(value)

                format_strings_grp = ','.join(['?'] * len(groups))
                format_strings_mem = ','.join(['?'] * len(members))
                emails = None

                if members and groups:
                    mix = members + groups
                    mycursor.execute("select email from member where member_id in ({}) or group_id in ({})".format(
                            format_strings_mem, format_strings_grp), tuple(mix))
                    emails = mycursor.fetchall()

                elif groups:
                    mycursor.execute("select email from member where group_id in ({})".format(format_strings_grp), tuple(groups))
                    emails = mycursor.fetchall()

                else:
                    mycursor.execute("select email from member where member_id in ({})".format(format_strings_mem), tuple(members))
                    emails = mycursor.fetchall()

                if values:
                    mycursor.executemany("INSERT INTO approval (isgroup, approver, invoice_no, isapproved,"
                        " approval_level, approval_type, escalate_date, rule_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?)", values)

                    if emails:
                        sendMailNotifications(invoice_id=invoice_id, mycursor=mycursor, emails=emails, user=working_person)

                return True

            else:
                return False

        finally:
            pass
    
    def send_message(service, user_id, message):
        try:
            message = (service.users().messages().send(userId=user_id, body=message).execute())
            return message
        except Exception as error:
            print("An error occurred: ", error)


    def build_service(credentials):
        http = httplib2.Http()
        http = credentials.authorize(http)
        return build('gmail', 'v1', http=http)


    def sendMailNotifications(invoice_id, mycursor, emails, user, body1=None):
        # user_id = elipo_email
        mycursor.execute("select * from elipo_setting where key_name = 'notification-mail'")
        email_data = mycursor.fetchone()
        user_id = email_data["value1"]

        if not body1:
            body1 = ''

        credentials = get_stored_credentials(user_id)

        if credentials and credentials.refresh_token is not None:
            service = build_service(credentials=credentials)

            mycursor.execute("select invoice_no, in_status from approval_history where invoice_no = ?", invoice_id)
            app_data = mycursor.fetchall()

            flag = 'not_rejected'
            text1 = 'Processed '

            if app_data:
                for row in app_data:
                    if row["in_status"] == "rejected":
                        flag = "rejected"
                        break

            if flag == "not_rejected":
                mycursor.execute("select * from rule_notification where invoice_status = 'draft-approval'")
                notification = mycursor.fetchone()

            elif flag == "rejected":
                mycursor.execute("select * from rule_notification where invoice_status = 'rej-to-approval'")
                notification = mycursor.fetchone()

            mail_subject = 'ELIPO Notification'
            mail_cc = ''

            if notification:
                mail_subject = notification["subject"]
                mail_cc = notification['mail_cc']

            message_body = '''<html>
                    <body  >
                <div style="  max-width: 500px; margin: auto; padding: 10px; ">
                        <div style=" width:100%; align-content: center;text-align: center;">
                            <img src="https://einvoice-public-images.s3.ap-south-1.amazonaws.com/ELIPO+logo.png" alt="Italian Trulli" style="vertical-align:middle; width: 140px;height:50px;text-align: center;"  >
                        </div>
                    <div style=" width:100%; align-content:left;text-align:left;">
                            <hr style="width:100%; text-align: center; border: 2px solid #0000001A;opacity: 0.5; border-radius: 2px;" >
                        </div>
                    <b> 

                    <span style="vertical-align: middle;text-align: left;font: 600  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;" >
                        Dear User,
                    </span> 
                    <br><br>
                    <span style="vertical-align: middle;text-align: left;font: 600  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;" >
                        Invoice No: <span style="font: 500  15px/22px ;">{},</span>
                    </span> 

                    <br>
                    <span style="vertical-align: middle;text-align: left;font: 600  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;" >
                        {} By : <span style="vertical-align: middle;text-align: left;font: 500  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;"> {},</span> 
                    </span> 
                    </b> 
                    <br>
                    <span style="vertical-align: middle; text-align: left;font: 500  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;"> {} </span>
                    <br>
                    <br>
                    <div style=" width:100%;align-content: center;text-align: center; ">
                        <a href="https://ywi7o0pxhc.execute-api.eu-central-1.amazonaws.com/production/login" target="_blank">
                            <button style="border: none;box-shadow: 1px 1px 5px 1px #5a9e9b; background:rgb(80, 219, 212) 0% 0% no-repeat padding-box; border-radius: 7px;opacity: 1;width:180px; height: 35px;outline: none;border: none;" > 
                                <span style="vertical-align: middle; text-align: left;font: 600 16px/23px Open Sans;letter-spacing: 0px;color: whitesmoke;white-space: nowrap;opacity: 1;">Login to ELIPO</span>
                            </button>
                        </a>
                    </div>

                    <br><br>
                    <div style="width:100%;">
                    <span style="vertical-align: middle; text-align: left;font: 500  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;">Regards,</span>
                    <br>
                    <span style="vertical-align: middle;text-align: left;font: 500  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;">Team ELIPO</span>
                    </div>
                <div style=" width:100%; align-content:left;text-align:left;">
                            <hr style="width:100%; text-align: center; border: 2px solid #0000001A;opacity: 0.5; border-radius: 2px;" >
                        </div>


                    <div style="width:100%;align-content: center;text-align: center;">
                        <span style=" text-align: center;font: 600 16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 0.7;">This message was sent to you by ELIPO</span>
                    </div>
                    <div style="width:100%;align-content: center;text-align: center;">
                        <img src="https://einvoice-public-images.s3.ap-south-1.amazonaws.com/elipo+logo_2.png" alt="Italian Trulli" style="text-align: center;width: 80px;height: 30px;" >
                    </div>

                    <br>
                </div>
                    </body></html>'''.format(invoice_id, text1, user['member_name'], body1)

            message = create_message(sender="raj.gupta@peolsolutions.com", to=emails, subject=mail_subject, message_text=str(message_body), cc=mail_cc)
            send_message(service=service, user_id="me", message=message)

    
    def get_stored_credentials(user_id):
    
        global ocr_bucket_folder
        
        try:
            s3 = boto3.client("s3")
            encoded_file = s3.get_object(Bucket=elipo_bucket, Key=ocr_bucket_folder+user_id)
            creds = pickle.loads(encoded_file["Body"].read())
            return creds
        except Exception as excep:
            creds = None

    def create_message(sender, to, subject, message_text, cc):
        message = MIMEText(message_text, 'html')

        if isinstance(to, list):
            for index, eto in enumerate(to):
                if index == 0:
                    tomails = str(eto['email'])
                    continue

                tomails += "," + str(eto['email'])
        else:
            tomails = to

        message['to'] = tomails
        message['from'] = sender
        message['subject'] = subject
        message['cc'] = cc
        encoded = base64.urlsafe_b64encode(message.as_string().encode("utf-8"))
        return {'raw': encoded.decode("utf-8")}       
    
    global dbScehma 
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='ap-south-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )
    # secret = event["stage-variables"]["secreat"]

    # global elipo_email
    # elipo_email = event["stage-variables"]["notification_email"]

    global elipo_bucket
    elipo_bucket = event["stage-variables"]["cred_bucket"]
    
    global ocr_bucket_folder
    ocr_bucket_folder = event["stage-variables"]["ocr_bucket_folder"]

    # resp = client.get_secret_value(
    #     SecretId=secret
    # )

    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()

    header = {
        "user_invoice_id": "",
        "status": "",
        "ref_po_num": "",
        "company_code": "",
        "invoice_date": "",
        "posting_date": "",
        "baseline_date": "",
        "due_date": "",
        "ap_timespent": "",
        "amount": 0.00,
        "currency": "",
        "payment_method": "",
        "gl_account": "",
        "business_area": "",
        "supplier_id": "",
        "approver_id": "",
        "supplier_name": "",
        "approver_comments": "",
        "modified_date": "",
        "cost_center": "",
        "taxable_amount": "",
        "discount_per": "",
        "total_discount_amount": "",
        "is_igst": "",
        "tax_per": "",
        "cgst_tot_amt": "",
        "sgst_tot_amt": "",
        "igst_tot_amt": "",
        "tds_per": "",
        "tds_tot_amt": "",
        "payment_terms": "",
        "adjustment": 0.00,
        "entry_date": "",
        "working_person": "",
        "npo": None,
        "tcs": "",
        "internal_order": "",
        "department_id": "",
        "app_comment": "",
        "document_type": "",
        "gstin": "",
        "irn": ""
    }
    
    list_item = []
    item_discount = 0
    msg = None

    try:
        for value in event["body-json"]["header"]:
            if value in header:
                if value == 'internal_order' and event["body-json"]["header"][value] == 'null':
                    event["body-json"]["header"][value] = 0
                header[value] = event["body-json"]["header"][value]

        for row in event["body-json"]["item"]:
            item = {
                "invoice_no": "",
                "item_no": "",
                "ebelp": 0,
                "hsn_code": "",
                "material": "",
                "materialdesc": "",
                "quantity": "",
                "unit": "",
                "amount": "",
                "currency": "",
                "amt_per_unit": "",
                "cgst_per": "",
                "cgst_amount": "",
                "tax_code": "",
                "ref_po_no": "",
                "plant": "",
                "discount": 0,
                "discount_amount": "",
                "gross_amount": 0.00,
                "sgst_per": "",
                "sgst_amount": "",
                "igst_per": "",
                "igst_amount": "",
                "taxable_amount": "",
                "tax_value_amount": "",
                "gl_account": "",
                "gst_per": "",
                "cost_center": "",
                "qc_check": "",
                "item_category": ""
            }
            for value in row:
                if value in item:
                    item[value] = row[value]
            list_item.append(item)

        now = datetime.datetime.now()
        with mydb.cursor() as mycursor:
            
            dbScehma = ' DBADMIN '
            
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            mycursor.execute("SELECT * FROM elipo_setting")
            settings = mycursor.fetchall()

            user_settings = {}

            if settings:
                for each in settings:
                    user_settings[each['key_name']] = each['value1']

                del settings

            email = event["params"]["querystring"]["userid"]
            
            header["approver_id"] = 0  
            mycursor.execute("select value2 from dropdown where value1 = ?", header["document_type"])
            doc_type = mycursor.fetchone()
            documentType = str(doc_type["value2"]) + " "
            
            if "invoice_no" not in event["params"]["querystring"]:

                values = (email,)

                mycursor.execute("select member_id, fs_name, ls_name, (fs_name || ' '|| ls_name) as member_name from member where email =  ?", values)
                working_person = mycursor.fetchone()
                if working_person:
                    header["working_person"] = working_person['member_id']
                    
                sqlQuery = "INSERT INTO invoice_header (user_invoice_id, in_status, ref_po_num, company_code, invoice_date, posting_date, baseline_date, " \
                    "due_date, ap_timespent, amount, currency, payment_method, gl_account, business_area, supplier_id, approver_id, supplier_name, approver_comments, " \
                    "cost_center,taxable_amount, discount_per, total_discount_amount, is_igst, tax_per, cgst_tot_amt, sgst_tot_amt, igst_tot_amt, " \
                    "tds_per, tds_tot_amt, payment_terms, adjustment, working_person, npo, tcs, internal_order, department_id, app_comment, document_type, gstin, irn) " \
                    "VALUES {}"
                  
                values = (header["user_invoice_id"], header["status"], header["ref_po_num"], header["company_code"], header["invoice_date"], header["posting_date"], \
                    header["baseline_date"], header["due_date"], header["ap_timespent"], header["amount"], header["currency"], header["payment_method"], header["gl_account"], \
                    header["business_area"], header["supplier_id"], header["approver_id"], header["supplier_name"], header["approver_comments"], \
                    header["cost_center"], header["taxable_amount"], header["discount_per"], header["total_discount_amount"], header["is_igst"], header["tax_per"], \
                    header["cgst_tot_amt"], header["sgst_tot_amt"], header["igst_tot_amt"], header["tds_per"], header["tds_tot_amt"], header["payment_terms"], \
                    header["adjustment"], header["working_person"], header["npo"], header["tcs"], header["internal_order"], header["department_id"], header["app_comment"], 
                    header["document_type"], header["gstin"], header["irn"])
                    
                mycursor.execute(sqlQuery.format(tuple(values)))
                mycursor.execute('select count(*) from invoice_header')

                invoice_num = mycursor.fetchone()
                invoice_num = invoice_num[0]

                del sqlQuery
                del values

                item_cat = []
                
                discount = 0
                count = 0

                for row in list_item:
                    itemValue = []
                    item = (str(invoice_num), row["item_no"], row["ebelp"], row["hsn_code"], row["material"], row["materialdesc"], row["quantity"], row["unit"], \
                            row["amount"], row["currency"], row["amt_per_unit"], row["cgst_per"], row["cgst_amount"], row["tax_code"], \
                            row["ref_po_no"], row["plant"], row["discount"], row["discount_amount"], row["gross_amount"], row["sgst_per"], \
                            row["sgst_amount"], row["igst_per"], row["igst_amount"], row["taxable_amount"], row["tax_value_amount"], row["gl_account"], \
                            row["gst_per"], row["cost_center"], row["qc_check"], row["item_category"])

                    if (row["discount"] != 0 or row["discount"] != "") and type(row["discount"]) is not str:
                        discount = discount + float(row["discount"])
                        count = count + 1

                    itemValue.append(item)
                    item_cat.append(row["item_category"])

                    if itemValue:
                        if count != 0:
                            item_discount = round(discount / count)

                        else:
                            item_discount = 0

                        sqlQuery = "INSERT INTO invoice_item (invoice_no, item_no, ebelp, hsn_code, material, material_desc, quantity, unit, amount, currency, " \
                            "amt_per_unit, cgst_per, cgst_amount, tax_code, ref_po_no, plant, discount, discount_amount, gross_amount, sgst_per, " \
                        "sgst_amount, igst_per, igst_amount, taxable_amount, tax_value_amount, gl_account, gst_per, cost_center, qc_check, item_category) " \
                        "VALUES {}"
                        
                        mycursor.execute(sqlQuery.format(tuple(itemValue)))

                else:
                    item_discount = 0
                    
                if header["status"] == "inapproval":

                    r_decider = {
                        'discount': item_discount,
                        'amount': header["amount"],
                        'cost_center': str(header["cost_center"]),
                        'currency': header['currency'],
                        'gl_account': str(header["gl_account"]),
                        'npo': header["npo"],
                        'vendor_no': str(header["supplier_id"]),
                        'department_id': str(header["department_id"]),
                        'item_category': item_cat,
                        "document_type": str(header["document_type"])
                    }

                    responce = erp_operations(user_settings=user_settings,
                                               invoice_no=invoice_num,
                                               mycursor=mycursor,
                                               decider=r_decider,
                                               working_person=working_person,
                                               documentType = str(documentType),
                                               is_mannually=True)
                    
                    msg_cmnt = ""
                    if responce:
                        if responce != "erpPostingOff":
                            msg = documentType + str(responce) + " created in ERP for " + documentType + str(invoice_num)
                            values = (responce, invoice_num) 
                            
                            msg_cmnt = documentType + str(responce) + " created in ERP for " + documentType + str(invoice_num) + " by " +  working_person["member_name"]
                        else:
                            msg = documentType + str(invoice_num) + " submitted."
                            values = ("NA", invoice_num)
                            
                            msg_cmnt = documentType + str(invoice_num) + " submitted by " +  working_person["member_name"]
                            
                        mycursor.execute("update invoice_header set sap_invoice_no = ?, in_status = 'tosap' where invoice_no = ?", values)
                        
                        ct = datetime.datetime.now()
                        
                        sqlQuery = "INSERT INTO approval_history (isgroup, approver_id, invoice_no, member_id, approval_level, approval_type, entry_date, approved_date, in_status) " \
                            "VALUES {}"
                        values = ('n', working_person['member_id'], invoice_num, working_person['member_id'], '1', 'single', ct, ct, 'approved')
                        mycursor.execute(sqlQuery.format(tuple(values)))
                        
                    else:
                        msg = "Approval generated for " + documentType + str(invoice_num)
                        
                        msg_cmnt = "Approval generated for " + documentType + str(invoice_num) + " by " + working_person["member_name"]

                        if header["ref_po_num"] != "" or header["ref_po_num"] != None:
                            mycursor.execute("delete from po_detail where po_number = ?", header["ref_po_num"])
                    
                    sqlQuery = "insert into invoice_audit (invoice_no, prev_status, new_status, working_person, msg) values {}"
                    values = (invoice_num, "", header["status"], working_person['member_id'], msg_cmnt)
                    mycursor.execute(sqlQuery.format(tuple(values)))
                    
                else:
                    sqlQuery = "insert into invoice_audit (invoice_no, prev_status, new_status, working_person, msg) values {}"
                    msg_cmnt = "New " + documentType + str(invoice_num) + " Manually Created and Saved to Draft by " + working_person["member_name"]
                    values = (invoice_num, "", header["status"], working_person['member_id'], msg_cmnt)
                    mycursor.execute(sqlQuery.format(tuple(values)))

                values = ('n', str(working_person["member_id"]), invoice_num)
                mycursor.execute("INSERT INTO assignment (isgroup, app, invoice_no) VALUES (?, ?, ?)", values)

                if not msg:
                    msg = documentType + " " + str(invoice_num) + " Saved As Draft"

                response = {
                    "invoice_id": invoice_num,
                    "msg": msg
                }

            else:

                invoice_id = event["params"]["querystring"]["invoice_no"]
                invoice_num = invoice_id

                values = (invoice_num,)
                mycursor.execute("select in_status, from_supplier from invoice_header where invoice_no = ?", values)
                status_inv = mycursor.fetchone()

                if header["status"] == "correction" and status_inv["from_supplier"] == "y":
                    values = (invoice_num,)
                    mycursor.execute("update invoice_header set in_status = '', sup_status = 'rejected' where invoice_no = ?", values)

                    mydb.commit()
                    msg = documentType + str(invoice_num) + " sent for correction!"
                    return {
                        'statuscode': 200,
                        'body': json.dumps(msg)
                    }

                values = (email,)
                mycursor.execute("select member_id, fs_name, ls_name, (fs_name || ' '|| ls_name) as member_name from member where email = ?", values)
                working_person = mycursor.fetchone()

                if status_inv["in_status"] == "inapproval" or status_inv["in_status"] == "tosap":
                    if status_inv["in_status"] == "inapproval":
                        msg = documentType + "already in Approval stage!"

                    elif status_inv["in_status"] == "tosap":
                        msg = documentType + "already processed!"

                    return {
                        'statuscode': 204,
                        'body': json.dumps(msg)
                    }

                values = (invoice_num,)
                mycursor.execute("select * from invoice_log where invoice_no = ?", values)
                invoice_log = mycursor.fetchone()

                if invoice_log:
                    values = (invoice_log["member_id"],)
                    mycursor.execute("select fs_name, ls_name, email from member where member_id = ?", invoice_log["member_id"])
                    member = mycursor.fetchone()

                    if email != member["email"]:
                        msg = documentType + "is locked by " + str(member["fs_name"]) + " " + str(member["ls_name"])

                        return {
                            'statuscode': 204,
                            'body': json.dumps(msg)
                        }
                else:
                    if email:
                        values = (email,)
                        mycursor.execute("select member_id from member where email = ?", values)
                        member = mycursor.fetchone()

                        if member:
                            values = (invoice_num,' ', member["member_id"])
                            mycursor.execute("insert into invoice_log (invoice_no,is_refered, member_id) values (?, ?, ?)", values)

                if working_person:
                    header["working_person"] = working_person['member_id']

                resp = audit_check(mycursor, invoice_num, working_person, header, list_item)

                sqlQuery = "update invoice_header set user_invoice_id = ?, in_status = ?, ref_po_num = ?, company_code = ?, " \
                           "invoice_date = ?, posting_date = ?, baseline_date = ?, due_date = ?, ap_timespent = ?, amount = ?, currency = ?, payment_method = ?, " \
                           "gl_account = ?, business_area = ?, supplier_id = ?, approver_id = ?, supplier_name = ?, cost_center = ?, " \
                           "taxable_amount = ?, discount_per = ? , total_discount_amount = ?, is_igst = ?, tax_per = ? , cgst_tot_amt = ? ,sgst_tot_amt = ?, " \
                           "igst_tot_amt = ? ,tds_per = ? , tds_tot_amt = ? , payment_terms = ? , adjustment = ?, working_person = ?, npo = ?, tcs = ?, internal_order = ?, " \
                           "department_id = ?, app_comment = ?, document_type = ?, gstin = ?, irn = ? where invoice_no = ?"

                values = (header["user_invoice_id"], header["status"], header["ref_po_num"], header["company_code"],header["invoice_date"], header["posting_date"], \
                          header["baseline_date"], header["due_date"], header["ap_timespent"],header["amount"], header["currency"], header["payment_method"], \
                          header["gl_account"], header["business_area"], header["supplier_id"], header["approver_id"], header["supplier_name"], header["cost_center"], \
                          header["taxable_amount"], header["discount_per"], header["total_discount_amount"], header["is_igst"], header["tax_per"], header["cgst_tot_amt"], \
                          header["sgst_tot_amt"], header["igst_tot_amt"], header["tds_per"], header["tds_tot_amt"], header["payment_terms"], header["adjustment"], \
                          header["working_person"], header["npo"], header["tcs"], header["internal_order"], header["department_id"], header["app_comment"], header["document_type"], \
                          header["gstin"], header["irn"], invoice_id)
                          
                mycursor.execute(sqlQuery, values)

                # item data update

                sqlQuery = "delete from invoice_item where invoice_no = ?"
                values = (invoice_id,)
                mycursor.execute(sqlQuery, invoice_id)

                item_cat = []
                itemValue = []
                count = 0
                discount = 0

                for row in list_item:
                    row["ref_po_no"] = int(0)
                    row["amount"] = 0
                    if row["igst_per"]=='':
                        row["igst_per"] = int(0)
                    if row["igst_amount"]=='':
                        row["igst_amount"] = int(0)
                    if not row["item_category"]:
                        row["item_category"] = '0'
                    if str(row["cost_center"]) == 'None':
                        row["cost_center"] = int(0)
                    item = (invoice_id, row["item_no"], row["ebelp"], row["hsn_code"], row["material"], row["materialdesc"], row["quantity"], row["unit"], row["amount"], row["currency"], \
                    row["amt_per_unit"], row["cgst_per"], row["cgst_amount"], row["tax_code"], row["ref_po_no"], str(row["plant"]), row["discount"], \
                    row["discount_amount"], row["gross_amount"], row["sgst_per"], row["sgst_amount"], row["igst_per"], row["igst_amount"], \
                    row["taxable_amount"], row["tax_value_amount"], row["gl_account"], row["gst_per"], int(row["cost_center"]), row["qc_check"], row["item_category"])

                    if row["discount"] and row["discount"] != 0:
                        discount = discount + float(row["discount"])

                    count = count + 1

                    item_cat.append(row["item_category"])
                    itemValue.append(item)

                if itemValue:
                    item_discount = round(discount / count)

                    sqlQuery = "INSERT INTO invoice_item (invoice_no, item_no, ebelp, hsn_code, material, material_desc, quantity, unit, amount, currency, " \
                               "amt_per_unit, cgst_per, cgst_amount, tax_code, ref_po_no, plant, discount, discount_amount, gross_amount, sgst_per, sgst_amount, " \
                               "igst_per, igst_amount, taxable_amount, tax_value_amount, gl_account, gst_per, cost_center, qc_check, item_category)" \
                               "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
                    
                    for row in itemValue:          
                        mycursor.execute(sqlQuery, tuple(row))

                else:
                    item_discount = 0

                if header["status"] == "inapproval":

                    r_decider = {
                        'discount': item_discount,
                        'amount': header["amount"],
                        'cost_center': str(header["cost_center"]),
                        'currency': header['currency'],
                        'gl_account': str(header["gl_account"]),
                        'npo': header["npo"],
                        'vendor_no': str(header["supplier_id"]),
                        'department_id': str(header["department_id"]),
                        'item_category': item_cat,
                        "document_type": str(header["document_type"])
                    }

                    responce = erp_operations(user_settings=user_settings,
                                              invoice_no=invoice_num,
                                              mycursor=mycursor,
                                              decider=r_decider,
                                              working_person=working_person,
                                              documentType=documentType,
                                              is_mannually=None)

                    if responce:
                        if responce != "erpPostingOff":
                            msg = documentType + str(responce) + " created in ERP for " + documentType + str(invoice_num)
                            values = (responce, invoice_num)
                            
                        else:
                            msg = documentType + str(invoice_num) + " submitted."
                            values = ("NA", invoice_num)
                            
                        mycursor.execute("update invoice_header set sap_invoice_no = ?, in_status = 'tosap' where invoice_no = ?", values)
                        
                        ct = datetime.datetime.now()
                        
                        sqlQuery = "INSERT INTO approval_history (isgroup, approver_id, invoice_no, member_id, approval_level, approval_type, entry_date, approved_date, in_status) " \
                            "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)"
                        values = ('n', working_person['member_id'], invoice_num, working_person['member_id'], '1', 'single', ct, ct, 'approved')
                        mycursor.execute(sqlQuery, values)
                        
                    else:
                        msg = "Approval generated for " + documentType + str(invoice_num)

                    if header["ref_po_num"] != "" or header["ref_po_num"] != None:
                        mycursor.execute("delete from po_detail where po_number = ?", str(header["ref_po_num"]))

                else:
                    msg = documentType + str(invoice_num) + " Saved As Draft"

                response = {
                    "invoice_id": invoice_num,
                    "msg": msg
                }

                mycursor.execute("delete from invoice_log where invoice_no = ?", invoice_num)

            mydb.commit()

    except pymysql.err.IntegrityError as e:      
        mydb.rollback()
        return {
            'statuscode': 500,
            # 'body': json.dumps(str(e))
            'body': json.dumps("Duplicate Entry")
        }

    except ApprovalException as e:
        mydb.rollback()
        return {
            'statuscode': 500,
            'body': json.dumps("FailedToCreateApprovals")
        }
        
    except ErpPostException as er:
        mydb.rollback()
        return {
            'statuscode': 300,
            'body': er.args[0]
        }

    except SapPostException as er:
        mydb.rollback()
        return {
            'statuscode': 300,
            'body': er.args[0]
        }

    except requests.exceptions.Timeout as msg:
        mydb.rollback()
        return {
            'statuscode': 500,
            'body': json.dumps("Resource temporarily unavailable!")
        }

    except requests.exceptions.TooManyRedirects as msg:
        mydb.rollback()
        return {
            'statuscode': 500,
            'body': json.dumps("Too Many Redirects!")
        }

    except requests.exceptions.RequestException as msg:
        mydb.rollback()
        return {
            'statuscode': 500,
            'body': json.dumps("Resource temporarily unavailable!")
        }

    except requests.exceptions.ConnectionError as msg:
        mydb.rollback()
        return {
            'statuscode': 500,
            'body': json.dumps("Resource temporarily unavailable!")
        }

    # except Exception as e:
    #     mydb.rollback()
    #     return {
    #         'statuscode': 500,
    #         'body': json.dumps("Internal Failure")
    #     }

    finally:
        mydb.close()

    if not msg:
        msg = "Invoice state changed to : " + str(header["status"])

    return {
        'statuscode': 200,
        'body': response
    }
    
# event = {'body-json': {'header': {'status': 'inapproval', 'app_comment': None, 'ap_timespent': 73, 'ref_po_num': '4500022612', 'company_code': '1000', 'is_igst': '', 'invoice_date': '2020-11-22', 'posting_date': '2023-06-08', 'modified_date': '2023-06-08', 'cost_center': '0', 'amount': 310, 'currency': 'KWD', 'gl_account': '0', 'business_area': '', 'supplier_id': '0000100564', 'approver_id': 'SAP LABS', 'supplier_name': 'SAP LABS', 'user_invoice_id': 'Test', 'baseline_date': '2023-06-08', 'due_date': '2023-06-23', 'payment_method': '0', 'taxable_amount': 310, 'discount_per': None, 'total_discount_amount': 0, 'tax_per': 18, 'cgst_tot_amt': 155, 'sgst_tot_amt': 155, 'igst_tot_amt': 0, 'tds_per': 0, 'tds_tot_amt': 0, 'payment_terms': '15', 'adjustment': 0, 'npo': 'n', 'department_id': 0, 'internal_order': 'null', 'tcs': None, 'gstin': '29AAFCS3649P1ZJ', 'document_type': 'RE', 'irn': None, 'jurisdiction': None, 'tax_code': '18'}, 'item': [{'item_no': 1, 'ebelp': 10, 'material': '50065585', 'materialdesc': 'ZIPS POWERED USB-C CABLE SENSOR STRAIGHT CABL', 'quantity': 20, 'amt_per_unit': 12, 'unit': 'ST', 'currency': None, 'cgst_per': 0, 'cgst_amount': 0, 'discount_amount': 0, 'gross_amount': 240, 'discount': None, 'tax_code': None, 'plant': '1000', 'gst_per': 0, 'sgst_per': 0, 'sgst_amount': 0, 'igst_per': '', 'igst_amount': '', 'taxable_amount': 240, 'tax_value_amount': 0, 'gl_account': 0, 'cost_center': 0, 'qc_check': False, 'hsn_code': '', 'jurisdiction': None}, {'item_no': 2, 'ebelp': 20, 'material': '50065586', 'materialdesc': 'POWER CONNECTOR - TABLET USB TYPE C - WHITE', 'quantity': 10, 'amt_per_unit': 7, 'unit': 'ST', 'currency': None, 'cgst_per': 0, 'cgst_amount': 0, 'discount_amount': 0, 'gross_amount': 70, 'discount': None, 'tax_code': None, 'plant': '1000', 'gst_per': 0, 'sgst_per': 0, 'sgst_amount': 0, 'igst_per': '', 'igst_amount': '', 'taxable_amount': 70, 'tax_value_amount': 0, 'gl_account': 0, 'cost_center': 0, 'qc_check': False, 'hsn_code': '', 'jurisdiction': None}]}, 'params': {'path': {}, 'querystring': {'invoice_no': '9598', 'userid': 'einvoiceportal@gmail.com', 'windowlogin': 'https://ywi7o0pxhc.execute-api.eu-central-1.amazonaws.com/production/landing/invoice/invoice-listing-scan'}, 'header': {'accept': 'application/json, text/plain, */*', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'en-US,en;q=0.9', 'Authorization': 'eyJraWQiOiJ1RXlLMTdnUjUzTVVMcXUrYkRsQUZ2NHRSUTR0VVM5KzM4NlwvZnpxMWorQT0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiI5NDkxOTNiMi1hZWQ2LTQxZGUtOTM2YS04MGRjMTEzNjUxNzIiLCJhdWQiOiIyNGJqZTRqdWQ4aDNmOHJzbmtraGcwYmx2MSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJldmVudF9pZCI6IjlkYjE3YTZjLTA5MDMtNDE4My05MDkxLWQ0ZDlhMzcwMWQxNiIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjg2MjAxOTQ0LCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAuZXUtY2VudHJhbC0xLmFtYXpvbmF3cy5jb21cL2V1LWNlbnRyYWwtMV9QOXJubnFpTHUiLCJjb2duaXRvOnVzZXJuYW1lIjoiOTQ5MTkzYjItYWVkNi00MWRlLTkzNmEtODBkYzExMzY1MTcyIiwiZXhwIjoxNjg2MjA1NTQ0LCJpYXQiOjE2ODYyMDE5NDQsImVtYWlsIjoiZWludm9pY2Vwb3J0YWxAZ21haWwuY29tIn0.hHlCI3h4TIhiuJ1ln1CZ0Q5OhBmN6Y8_wSgeqXQyLWHm6UQ5bq4GBjmX4emH60fzijhlKT6JK3tY7MfrA7MDjOt-mCoDyXolOc7yDcHqnVrK1e9XjFqvxABKvYezvNdYUn_S__KvvNzttLvAIGXLSaqU-2pbRfZnSKisj-hXUNFM2GZQpswM7tEkaRnBujl9meNyARX8NGNdZnJ6RQXR2Zr8YKLxSh7l2nn2pEj8Z2lOWakeDv-UXPzIxuxMHTEjsmR1Pw1c26BwNXeNRwRNhUQeSyuQVxmiO_MH6kiLZJdvFgxZ_c9EnfIruHQw5vvDbLalJcpiTQIzDNSIXdVcrA', 'content-type': 'application/json', 'Host': 'overview.peoltechnologies.net', 'origin': 'https://ywi7o0pxhc.execute-api.eu-central-1.amazonaws.com', 'referer': 'https://ywi7o0pxhc.execute-api.eu-central-1.amazonaws.com/', 'sec-ch-ua': '"Not_A Brand";v="99", "Google Chrome";v="109", "Chromium";v="109"', 'sec-ch-ua-mobile': '?0', 'sec-ch-ua-platform': '"Windows"', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'cross-site', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', 'X-Amzn-Trace-Id': 'Root=1-64816710-72bf71ff79fc20572b39bc50', 'X-Forwarded-For': '27.7.113.115', 'X-Forwarded-Port': '443', 'X-Forwarded-Proto': 'https'}}, 'stage-variables': {'schema': 'einvoice_db_portal', 'lambda_alias': 'dev', 'secreat': 'test/einvoice/secret', 'notification_email': 'elipotest@gmail.com', 'ocr_bucket_folder': 'old-dev/', 'cred_bucket': 'file-bucket-emp'}, 'context': {'account-id': '', 'api-id': '5ud4f0kv53', 'api-key': '', 'authorizer-principal-id': '', 'caller': '', 'cognito-authentication-provider': '', 'cognito-authentication-type': '', 'cognito-identity-id': '', 'cognito-identity-pool-id': '', 'http-method': 'POST', 'stage': 'einvoice-v1', 'source-ip': '27.7.113.115', 'user': '', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', 'user-arn': '', 'request-id': '5253e2fd-4dd3-4d26-b261-44a02d4514f1', 'resource-id': 'ke8uzw', 'resource-path': '/post-invoice'}}
# print(postInvoiceDetail(event, ' '))

# def get_stored_credentials(user_id):
    
#     # global ocr_bucket_folder 
    
#     try:
#         s3 = boto3.client("s3")
#         encoded_file = s3.get_object(Bucket=elipo_bucket, Key=user_id)
#         creds = pickle.loads(encoded_file["Body"].read())
#         return creds
        
#     except Exception as excep:
#         creds = None

# def create_message(sender, to, cc, subject, message_text):
    
#     message = email.mime.text.MIMEText(message_text, 'html')
#     message['to'] = to
#     message['cc'] = cc
#     message['from'] = sender
#     message['subject'] = subject
#     encoded = base64.urlsafe_b64encode(message.as_string().encode("utf-8"))
#     return {'raw': encoded.decode("utf-8")}

# def send_message(service, user_id, message):
#     try:  
#         message = (service.users().messages().send(userId=user_id, body=message).execute())
#         return message
        
#     except Exception as error:
#         print("An error occurred: ", error)

# def build_service(credentials):
#     http = httplib2.Http()
#     http = credentials.authorize(http)
#     return build('gmail', 'v1', http=http)  

# def sendMailNotifications(invoice_id, mycursor, email, by=None):
    
    # user_id = elipo_email
    mycursor.execute("select * from elipo_setting where key_name = 'notification-mail' ")
    email_data = mycursor.fetchone()
    user_id = email_data["value1"]
    
    mail_cc = ''
    mail_subject = 'ELIPO Notification'
    mailbody_text = 'Reply to the referred invoice has been received.'

    if not by:
        by = ''

    text1 = 'Replied '
    
    mail_body = '''<html>
            <body  >
        <div style="  max-width: 500px; margin: auto; padding: 10px; ">
                <div style=" width:100%; align-content: center;text-align: center;">
                    <img src="https://einvoice-public-images.s3.ap-south-1.amazonaws.com/ELIPO+logo.png" alt="Italian Trulli" style="vertical-align:middle; width: 140px;height:50px;text-align: center;"  >
                </div>
        	<div style=" width:100%; align-content:left;text-align:left;">
                    <hr style="width:100%; text-align: center; border: 2px solid #0000001A;opacity: 0.5; border-radius: 2px;" >
                </div>
            <b>
                
            <span style="vertical-align: middle;text-align: left;font: 600  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;" >
                Dear User,
            </span> 
            <br><br>
            <span style="vertical-align: middle;text-align: left;font: 600  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;" >
                Invoice No: <span style="font: 500  15px/22px ;">{},</span>
            </span> 
        
            <br>
            <span style="vertical-align: middle;text-align: left;font: 600  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;" >
                {} By : <span style="vertical-align: middle;text-align: left;font: 500  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;"> {},</span> 
            </span> 
            </b> 
            <br>
            <span style="vertical-align: middle; text-align: left;font: 500  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;"> {} </span>
            <br>
            <br>
            <div style=" width:100%;align-content: center;text-align: center; ">
                <a href="https://ywi7o0pxhc.execute-api.eu-central-1.amazonaws.com/production/login" target="_blank">
                    <button style="border: none;box-shadow: 1px 1px 5px 1px #5a9e9b; background:rgb(80, 219, 212) 0% 0% no-repeat padding-box; border-radius: 7px;opacity: 1;width:180px; height: 35px;outline: none;border: none;" > 
                        <span style="vertical-align: middle; text-align: left;font: 600 16px/23px Open Sans;letter-spacing: 0px;color: whitesmoke;white-space: nowrap;opacity: 1;">Login to ELIPO</span>
                    </button>
                </a>
            </div>
        
            <br><br>
            <div style="width:100%;">
            <span style="vertical-align: middle; text-align: left;font: 500  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;">Regards,</span>
            <br>
            <span style="vertical-align: middle;text-align: left;font: 500  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;">Team ELIPO</span>
            </div>
        <div style=" width:100%; align-content:left;text-align:left;">
                    <hr style="width:100%; text-align: center; border: 2px solid #0000001A;opacity: 0.5; border-radius: 2px;" >
                </div>
        
            
            <div style="width:100%;align-content: center;text-align: center;">
                <span style=" text-align: center;font: 600 16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 0.7;">This message was sent to you by ELIPO</span>
            </div>
            <div style="width:100%;align-content: center;text-align: center;">
                <img src="https://einvoice-public-images.s3.ap-south-1.amazonaws.com/elipo+logo_2.png" alt="Italian Trulli" style="text-align: center;width: 80px;height: 30px;" >
            </div>
            
            <br>
        </div>
            </body></html>'''.format(invoice_id, text1, by, mailbody_text)   

    credentials = get_stored_credentials(user_id)

    if credentials and credentials.refresh_token is not None: 
        service = build_service(credentials=credentials)
        message = create_message(sender=user_id, to=str(email), cc=mail_cc, subject=mail_subject, message_text=mail_body)
        send_message(service=service, user_id="me", message=message) 

#event  not found
def patchReferInvoice(event, context):
    global dbScehma 
    dbScehma = ' DBADMIN '

    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='ap-south-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )
    # secret = event["stage-variables"]["secreat"]
    # resp = client.get_secret_value(
    #     SecretId= secret
    # )
    # secretDict = json.loads(resp['SecretString'])
    
    # global elipo_email
    # elipo_email = event["stage-variables"]["notification_email"]
    
    global elipo_bucket
    elipo_bucket = event["stage-variables"]["cred_bucket"]
    
    # global ocr_bucket_folder
    # ocr_bucket_folder = event["stage-variables"]["ocr_bucket_folder"]

    mydb = hdbcliConnect()

    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            if "comment" in event["body-json"]:
                
                delegated_from = event["params"]["querystring"]["delegated_from"]
                delegated_to = event["params"]["querystring"]["delegated_to"]
                invoice_no = event["params"]["querystring"]["invoice_no"]
                sr_no = event["params"]["querystring"]["sr_no"]
                comment = event["body-json"]["comment"]
                
                sqlQuery = "select member_id, (fs_name|| ' '|| ls_name) as member_name, email from member where member_id = ? or member_id = ?"
                values = ( delegated_from, delegated_to )
                mycursor.execute(sqlQuery, values)
                data = mycursor.fetchall()
                print(data) 
                
                for row in data:
                    if str(row["member_id"]) == str(delegated_from):
                        dele_from = {
                            "member_id": row["member_id"],
                            "member_name": row["member_name"]
                        }
                        email_adres = row["email"]
                        
                    if str(row["member_id"]) == str(delegated_to):
                        dele_to = {
                            "member_id": row["member_id"],
                            "member_name": row["member_name"]
                        }
                        mailMemberName = row["member_name"]
                
                sqlQuery = "update delegate set accepted_comment = ?, is_accepted = 'y' where invoice_id = ? and delegated_to = ? and delegated_from = ? and sr_no = ?"
                values = ( comment, invoice_no, delegated_to, delegated_from, sr_no )
                mycursor.execute(sqlQuery, values)
                
                sqlQuery = "update approval set refer_completed = 'y' where isgroup = 'n' and approver = ? and invoice_no = ?"
                values = ( delegated_from, invoice_no)
                mycursor.execute(sqlQuery, values)
                
                if dele_to:
                    sqlQuery = "insert into invoice_audit (invoice_no, prev_status, new_status, working_person, msg) values (?, ?, ?, ?, ?)"
                    msg_cmnt = str(dele_to["member_name"]) + " Replied to Invoice Referred by " + str(dele_from["member_name"])
                    values = (invoice_no, "inapproval", "inapproval", dele_to['member_id'], msg_cmnt) 
                    mycursor.execute(sqlQuery, values)
                
                sendMailNotifications(invoice_id=invoice_no, mycursor=mycursor, email= email_adres, by=mailMemberName)
                
                mydb.commit()

    except:
        mydb.rollback()   
        return {
            'statuscode': 500,
            'body': json.dumps("Internal Failure!")
        }

    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': json.dumps("Replied Successfully!")
    }


#not tested
def getRuleNotification(event, context):
    
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='ap-south-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )

    # secret = event["stage-variables"]["secreat"]

    # resp = client.get_secret_value(
    #     SecretId= secret
    # ) 
 
    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()

    records = []

    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)

            mycursor.execute("select r.*,d.value2 as description from rule_notification r "
                             "left join dropdown d on r.invoice_status = d.value1 "
                             "where d.drop_key = 'rule_statuses'")
            notifications = mycursor.fetchall()

            allmails = []

            for each in notifications:
                if each['mail_cc']:
                    mails = each['mail_cc'].split(',')
                    allmails += mails

            allmails = set(allmails)
            allmails = list(allmails)
            
            if allmails:
                format_String = ','.join(['?'] * len(allmails))
                mycursor.execute("select member_id, fs_name, ls_name, email "
                                 "from member "
                                 "where email in ({})".format(format_String), tuple(allmails))
                members = mycursor.fetchall()

            for row in notifications:

                if row['mail_cc'] and row['mail_cc'] != "":
                    mails = row['mail_cc'].split(',')
                else:
                    mails = []
                reclist = []

                for mail in mails:
                    for mem in members:
                        if mail == mem['email']:
                            rec = {
                                'name': mem['fs_name'] + " " + mem['ls_name'],
                                'member_id': mem['member_id']
                            }
                            reclist.append(rec)
                            break

                record = {
                    "invoice_status": row["invoice_status"],
                    "status_desc": row['description'],
                    # "mail_to": row["mail_to"],
                    "mail_cc": reclist,
                    "subject": row["subject"],
                    "body": row["body"]
                }
                records.append(record)

    except:
        return {
            'statuscode': 500,
            'body': json.dumps("Internal Failure!"),
        }

    finally:
        mydb.close()
    
    return {
        'statuscode': 200,
        'body': records
    }

# event = {}
# context = ""
# print(lambda_handler(event, context))   


    def patchRuleNotification(event, context):
        global dbScehma 
    dbScehma = event["stage-variables"]["schema"]
    
    client = boto3.client(
    'secretsmanager',
    region_name='ap-south-1',
    aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    aws_secret_access_key='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' )

    secret = event["stage-variables"]["secreat"]

    resp = client.get_secret_value(
        SecretId= secret
    ) 

    secretDict = json.loads(resp['SecretString'])

    mydb = pymysql.connect(
        host=secretDict['host'],
        user=secretDict['username'],
        passwd=secretDict['password'],
        database=secretDict['dbname'],
        charset='utf8mb4',
        cursorclass=pymysql.cursors.DictCursor
    )

    record = {
        # "mail_to": "",
        "mail_cc": [],
        "subject": "",
        "body": ""
    }

    for value in event["body-json"]:
        if value in record:
            record[value] = event["body-json"][value]

    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "use " + dbScehma
            mycursor.execute(defSchemaQuery)

            if "invoice_status" in event["params"]["querystring"]:

                tomails = None

                if record['mail_cc']:

                    format_strings = ','.join(['?'] * len(record['mail_cc']))

                    mycursor.execute("select email from member "
                                     "where member_id in ({})".format(format_strings), tuple(record['mail_cc']))
                    emails = mycursor.fetchall()

                    if emails:
                        for index, each in enumerate(emails):
                            if index == 0:
                                tomails = str(each['email'])
                                continue

                            tomails += "," + str(each['email'])

                status = event["params"]["querystring"]["invoice_status"]

                sqlQuery = "update rule_notification set mail_cc = ?, subject = ?, body = ? where invoice_status = ?"
                values = (tomails, record["subject"], record["body"], status)
                mycursor.execute(sqlQuery, values)

                mydb.commit()

    except:
        return {
            'statuscode': 500,
            'body': json.dumps("Internal Failure"),
        }

    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': json.dumps("Updated Successfully!")
    }
 
# event = {
#     "params" : {
#         "querystring" : {
#             "invoice_status": "approval-tosap"
#         }
#     },
#     "body-json" : {
#         "mail_cc" : [1,2,3],
#         "subject" : "abcyvduidwiu",
#         "body" : "kuhauhdaoh"
#     }
# }

# context = ""
# responce = lambda_handler(event,context)
# print(responce)


def postRuleNotification(event, context):

    global dbScehma 
    dbScehma = event["stage-variables"]["schema"]
    
    # print(event) 
    client = boto3.client(
    'secretsmanager',
    region_name='ap-south-1',
    aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    aws_secret_access_key='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' )

    secret = event["stage-variables"]["secreat"]

    resp = client.get_secret_value(
        SecretId= secret
    ) 

    secretDict = json.loads(resp['SecretString'])

    mydb = pymysql.connect(
        host=secretDict['host'],
        user=secretDict['username'],
        passwd=secretDict['password'],
        database=secretDict['dbname'],
        charset='utf8mb4',
        cursorclass=pymysql.cursors.DictCursor
    )

    record = {
        "invoice_status": "",
        # "mail_to" : [],
        "mail_cc": [],
        "subject": "",
        "body": ""
    }

    for value in event["body-json"]:
        if value in record:
            record[value] = event["body-json"][value]
    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "use " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            tomails = None

            if record['mail_cc']:

                format_strings = ','.join(['?'] * len(record['mail_cc']))

                mycursor.execute("select email from member "
                                 "where member_id in ({})".format(format_strings), tuple(record['mail_cc']))
                emails = mycursor.fetchall()
                
                if emails:
                    for index, each in enumerate(emails):
                        if index == 0:
                            tomails = str(each['email'])
                            continue

                        tomails += "," + str(each['email'])

            sqlQuery = "INSERT INTO rule_notification ( invoice_status, mail_cc, subject, body) values (?, ?, ?, ? )"
            values = (record["invoice_status"], tomails, record["subject"], record["body"])

            mycursor.execute(sqlQuery, values)
            mydb.commit()

    except pymysql.err.IntegrityError as e:

        mydb.rollback()

        return {
            'statuscode': 500,
            'body': json.dumps("Notification Status already exists")
        }

    except:
        mydb.rollback()

        return {
            'statuscode': 500,
            'body': json.dumps("Invoice insertion failed!"),
        }

    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': record,
    }
  
# event = {
#     "body-json" : {
#         "invoice_status" : "new-approval",
#             # "mail_to" : [],
#         "mail_cc" : [1,2,3,4],
#         "subject" : "abcyvduidwiu",
#         "body" : "kuhauhdaoh"
#     }
# }
# context = ""
# responce = lambda_handler(event,context)
# print(responce)

#working fine for event
def patchRuleStatus(event, context):
    
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='ap-south-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )
    # secret = event["stage-variables"]["secreat"]
    # resp = client.get_secret_value(
    #     SecretId= secret
    # )  
    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()

    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            if "rule_id" in event["params"]["querystring"] and "is_on" in event["params"]["querystring"]:
                rule_id = event["params"]["querystring"]["rule_id"]
                status = event["params"]["querystring"]["is_on"]
                
                sqlQuery = "update rule set is_on = ? where rule_id = ?"
                values = ( status, rule_id )
                mycursor.execute(sqlQuery, values)
                
                mydb.commit()

    except:
        mydb.rollback()   
        return {
            'statuscode': 500,
            'body': json.dumps("Internal Failure")
        }

    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': json.dumps("Successfully Updated!")
    }
# event = {'body-json': {}, 'params': {'path': {}, 'querystring': {'is_on': 'n', 'rule_id': '45'}, 'header': {'accept': 'application/json, text/plain, */*', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'en-US,en;q=0.9', 'Authorization': 'eyJraWQiOiJ1RXlLMTdnUjUzTVVMcXUrYkRsQUZ2NHRSUTR0VVM5KzM4NlwvZnpxMWorQT0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiI5NDkxOTNiMi1hZWQ2LTQxZGUtOTM2YS04MGRjMTEzNjUxNzIiLCJhdWQiOiIyNGJqZTRqdWQ4aDNmOHJzbmtraGcwYmx2MSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJldmVudF9pZCI6IjkyZWJiNWJiLWViMzYtNDMyYS1iNWU5LTZlNGZiMzZjNmQ3OCIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjU5NjgxNTg4LCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAuZXUtY2VudHJhbC0xLmFtYXpvbmF3cy5jb21cL2V1LWNlbnRyYWwtMV9QOXJubnFpTHUiLCJjb2duaXRvOnVzZXJuYW1lIjoiOTQ5MTkzYjItYWVkNi00MWRlLTkzNmEtODBkYzExMzY1MTcyIiwiZXhwIjoxNjU5Njg1MTg4LCJpYXQiOjE2NTk2ODE1ODgsImVtYWlsIjoiZWludm9pY2Vwb3J0YWxAZ21haWwuY29tIn0.Yd45F1sfHSDwbohELb6hGIsM_pY9BTuJiBE63fn53ppF9k68PLyq6mEPGkBrtAyOpJBtA8rwog8I6i3fMGsiOFNvqySPZuEI2iB7_lhR3szATSycxuvrg_blSaSwN45qfJ1NSo1qVRTzp3MOuL7V-nT8nhTaOtWniazJtFZ8rcCbaZQtf35BNio8aIBbvzWedVLPpJocLyen6RRyC4oxWQilcBCz34cbYwb642SpcxhzddeiZqc45Gi-vbjqiEgh6RP1mTUuVZIf5C6_5-B81eqYKd5eF4D2-L-qEP5NsWOBMV5hBthKxyUUcpIZgmGHvUPrxw6u8c-dU2SF8M0DDQ', 'content-type': 'application/json', 'Host': 'overview.peoltechnologies.net', 'origin': 'https://ywi7o0pxhc.execute-api.eu-central-1.amazonaws.com', 'referer': 'https://ywi7o0pxhc.execute-api.eu-central-1.amazonaws.com/', 'sec-ch-ua': '".Not/A)Brand";v="99", "Google Chrome";v="103", "Chromium";v="103"', 'sec-ch-ua-mobile': '?0', 'sec-ch-ua-platform': '"Windows"', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'cross-site', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36', 'X-Amzn-Trace-Id': 'Root=1-62ecbcce-071961ce68621763607acc18', 'X-Forwarded-For': '49.206.130.74', 'X-Forwarded-Port': '443', 'X-Forwarded-Proto': 'https'}}, 'stage-variables': {'schema': 'einvoice_db_portal', 'lambda_alias': 'dev', 'secreat': 'test/einvoice/secret', 'notification_email': 'elipotest@gmail.com', 'ocr_bucket_folder': 'old-dev/', 'cred_bucket': 'file-bucket-emp'}, 'context': {'account-id': '', 'api-id': '5ud4f0kv53', 'api-key': '', 'authorizer-principal-id': '', 'caller': '', 'cognito-authentication-provider': '', 'cognito-authentication-type': '', 'cognito-identity-id': '', 'cognito-identity-pool-id': '', 'http-method': 'PATCH', 'stage': 'einvoice-v1', 'source-ip': '49.206.130.74', 'user': '', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36', 'user-arn': '', 'request-id': '08c6858b-e57f-443d-b3af-1f2633e1e3b1', 'resource-id': 'v0z0u5', 'resource-path': '/rule-status'}}
# print(patchRuleStatus(event , ' '))

def deleteRuleDetails(event, context):
    
    global dbScehma 
    dbScehma = event["stage-variables"]["schema"]
    
    client = boto3.client(
    'secretsmanager',
    region_name='ap-south-1',
    aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    aws_secret_access_key='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' )

    secret = event["stage-variables"]["secreat"]

    resp = client.get_secret_value(
        SecretId= secret
    )  

    secretDict = json.loads(resp['SecretString'])

    mydb = pymysql.connect(
        host=secretDict['host'],
        user=secretDict['username'],
        passwd=secretDict['password'],
        database=secretDict['dbname'],
        charset='utf8mb4',
        cursorclass=pymysql.cursors.DictCursor
    )
    
    msg = "Data not deleted!"
    
    try:
                
        with mydb.cursor() as mycursor:
            defSchemaQuery = "use " + dbScehma
            mycursor.execute(defSchemaQuery)

            if "rule_id" in event["params"]["querystring"]:
                
                sqlQuery = ("DELETE FROM rule WHERE rule_id = ?")
                values = ( event["params"]["querystring"]["rule_id"] )
                mycursor.execute(sqlQuery, values)
                
                sqlQuery = ("DELETE FROM rule_approver WHERE rule_key = ?")
                values = ( event["params"]["querystring"]["rule_id"] )
                mycursor.execute(sqlQuery, values)
                
                sqlQuery = ("DELETE FROM rule_snro WHERE rule_id = ?")
                values = ( event["params"]["querystring"]["rule_id"] )
                mycursor.execute(sqlQuery, values)
                
                mydb.commit()
                msg = "Data deleted!"
            
    except:
        return {
            'statuscode': 500,
            'body': json.dumps("Unable to delete")
        }

    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': msg,
    }
    
    def getRuleDetails(event, context):
        
    
        global dbScehma 
    dbScehma = event["stage-variables"]["schema"]
    
    client = boto3.client(
    'secretsmanager',
    region_name='ap-south-1',
    aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    aws_secret_access_key='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' )
    secret = event["stage-variables"]["secreat"]
    resp = client.get_secret_value(
        SecretId= secret
    )
    secretDict = json.loads(resp['SecretString'])

    mydb = pymysql.connect(
        host=secretDict['host'],
        user=secretDict['username'],
        passwd=secretDict['password'],
        database=secretDict['dbname'],
        charset='utf8mb4',
        cursorclass=pymysql.cursors.DictCursor
    )

    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "use " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            if "rule_id" in event["params"]["querystring"]:
                
                rule_id = event["params"]["querystring"]["rule_id"]
                rule = {}
                
                mycursor.execute("SELECT a.*, b.rule_name " \
                    "FROM rule a " \
                    "inner join rule_snro b " \
                    "on a.rule_id = b.rule_id " \
                    "where a.rule_id = ?", rule_id)
                rule_list = mycursor.fetchall()
             
                criteria = []
                approval_type = ""
                ec_isgroup = ""
                escelator = ""
                ifnot_withindays = ""
                comments = ""
                due_notification = ""
                due_reminder = ""
                overdue_notification = ""
                overdue_reminder = ""
                
                for row in rule_list:
                    
                    approval_type = row["approval_type"]
                    ec_isgroup = row["ec_isgroup"]
                    escelator = row["escelator"]
                    ifnot_withindays = row["ifnot_withindays"]
                    comments = row["comments"]
                    rule_name = row["rule_name"]
                    due_notification = row["due_notification"]
                    due_reminder = row["due_reminder"]
                    overdue_notification = row["overdue_notification"]
                    overdue_reminder = row["overdue_reminder"]
                        
                    if row["decider_type"] == "number":
                        data = {
                            "decider" : row["decider"],
                            "operator" : row["operator"], 
                            "d_value" : int( row["d_value"] ), 
                            "d_value2" : int( row["d_value2"] ), 
                            "decider_type" : row["decider_type"]
                        }
                        criteria.append(data)
                        
                    else:
                        data = {
                            "decider" : row["decider"],
                            "operator" : row["operator"], 
                            "d_value" : row["d_value"], 
                            "d_value2" : row["d_value2"],
                            "decider_type" : row["decider_type"]
                        }
                        criteria.append(data)
               
                mycursor.execute("select * from rule_approver where rule_key = %s", rule_id)
                approver = mycursor.fetchall()
                
                approver_final = [] 
                groupid = []
                memberid = []
                
                for row in approver:
                    if row["isgroup"] == 'y':
                        groupid.append(row["approver"])
                    elif row["isgroup"] == 'n':
                        memberid.append(row["approver"])
                
                if groupid and len(groupid) > 1:
                    mycursor.execute("select group_id, name from " + dbScehma + ".group where group_id in {}".format(tuple(groupid)))
                    
                elif groupid and len(groupid) == 1:
                    group = (groupid[0])
                    sqlQuery = "select group_id, name from " + dbScehma + ".group where group_id = %s"
                    mycursor.execute(sqlQuery, group)
                    
                for row in mycursor:
                    temp1 = {
                        "isgroup": "y",
                        "approver": row["group_id"],
                        "name": row["name"],
                        "position": ""
                    }
                    approver_final.append(temp1)
             
                if memberid and len(memberid) > 1:
                    mycursor.execute("select member_id, fs_name, ls_name, position from member where member_id in {}".format(tuple(memberid)))
                
                elif memberid and len(memberid) == 1:
                    member = (memberid[0])
                    sqlQuery = "select member_id, fs_name, ls_name, position from member where member_id = %s"
                    mycursor.execute(sqlQuery, member) 
                    
                for row in mycursor:
                    temp1 = {
                        "isgroup": "n",
                        "approver": row["member_id"],
                        "name": row["fs_name"] + " " + row["ls_name"],
                        "position": row["position"]
                    }
                    approver_final.append(temp1)
           
                app = []
                for data in approver:
                    
                    for row in approver_final:
                        
                        if row["approver"] == data["approver"] and row["isgroup"] == data["isgroup"]:
                            
                            temp = {
                                "isgroup" : row["isgroup"],
                                "approver" : row["approver"],
                                "name": row["name"],
                                "level" : data["level"],
                                "position": row["position"]
                            }
                            app.append(temp)
                            
                    if str(data["approver"]) == "999999999" and data["isgroup"] == "y":
                            temp = {
                                "isgroup" : data["isgroup"],
                                "approver" : data["approver"],
                                "name": "To ERP",
                                "level" : data["level"],
                                "position": ""  
                            }
                            app.append(temp)
                            
                rule_detail = {
                    "rule_id": rule_id,
                    "rule_name": rule_name,
                    "approval_type" : approval_type, 
                    "due_notification" : due_notification,
                    "due_reminder" : due_reminder,
                    "overdue_notification" : overdue_notification,
                    "overdue_reminder" : overdue_reminder,
                    "ec_isgroup" : ec_isgroup, 
                    "escelator" : escelator, 
                    "es_name" : "",
                    "ifnot_withindays" : ifnot_withindays, 
                    "comments" : comments,
                    "criteria" : criteria,
                    "approvers" : app
                }
                
            else:
                
                is_approval = 'y'
                
                if "is_approval" in event["params"]["querystring"]:
                    is_approval = event["params"]["querystring"]["is_approval"]
                    
                rule_detail = []
                
                mycursor.execute("SELECT a.*, b.rule_name, c.department_name " \
                	"FROM rule a " \
                	"inner join rule_snro b " \
                	"on a.rule_id = b.rule_id " \
                    "left join departmental_budget_master c " \
                    "on a.d_value = c.department_id " \
                	"where b.is_approval = %s " \
                	"order by a.rule_id", is_approval)
                rules = mycursor.fetchall()
                
                dict_rule = rules
                rule_keys = []
                escalator = []
                distinct_rule = []
                
                for row in rules:
                    temp = {
                        "is_on": row["is_on"],
                        "rule_id": row["rule_id"],
                        "rule_name": row["rule_name"],
                        "approval_type" : row["approval_type"], 
                        "ec_isgroup" : row["ec_isgroup"], 
                        "escelator" : row["escelator"], 
                        "es_name" : "",
                        "ifnot_withindays" : row["ifnot_withindays"], 
                        "comments" : row["comments"],
                        "due_notification" : row["due_notification"],
                        "due_reminder" : row["due_reminder"],
                        "overdue_notification" : row["overdue_notification"],
                        "overdue_reminder" : row["overdue_reminder"]
                    }
                    distinct_rule.append(temp)
                
                    
                res_list = [] 
                approvers_list = []
                
                for i in range(len(distinct_rule)): 
                    if distinct_rule[i] not in distinct_rule[i + 1:]: 
                        res_list.append(distinct_rule[i]) 
                
                for each in rules:
                    rule_keys.append(each['rule_id'])
                
                if rule_keys and len(rule_keys) > 1:
                    mycursor.execute("SELECT * FROM rule_approver where rule_key in {}".format(tuple(rule_keys)))
                    approvers_list = mycursor.fetchall()
                    
                elif len(rule_keys) == 1:
                    key = (rule_keys[0])
                    sqlQuery = "select * from rule_approver where rule_key = %s"
                    mycursor.execute(sqlQuery, key)
                    approvers_list = mycursor.fetchall()
                
                groupid = []
                memberid = []
                
                for row in approvers_list:
                    if row["isgroup"] == 'y':
                        groupid.append(row["approver"])
                    elif row["isgroup"] == 'n':
                        memberid.append(row["approver"])
            
                approver_final = []  
                
                if groupid and len(groupid) > 1:
                
                    mycursor.execute("select group_id, name from " + dbScehma + ".group where group_id in {}".format(tuple(groupid)))
                    
                elif len(groupid) == 1:
                    group = (groupid[0])
                    sqlQuery = "select group_id, name from " + dbScehma + ".group where group_id = %s"
                    mycursor.execute(sqlQuery, group)
                    
                for row in mycursor:
                    temp1 = {
                        "isgroup": "y",
                        "approver": row["group_id"],
                        "name": row["name"],
                        "position": ""
                    }
                    approver_final.append(temp1)
         
                if memberid and len(memberid) > 1:
                    mycursor.execute("select member_id, fs_name, ls_name, position from member where member_id in {}".format(tuple(memberid)))
                
                elif len(memberid) == 1:
                    member = (memberid[0])
                    sqlQuery = "select member_id, fs_name, ls_name, position from member where member_id = %s"
                    mycursor.execute(sqlQuery, member) 
                    
                for row in mycursor:
                    temp1 = {
                        "isgroup": "n",
                        "approver": row["member_id"],
                        "name": row["fs_name"] + " " + row["ls_name"],
                        "position": row["position"]
                    }
                    approver_final.append(temp1)
         
                for row in res_list:
                    approvers = []
                    criteria = []
                    
                    for data in approvers_list:
                        
                        if row["rule_id"] == data["rule_key"]:
                            
                            for temp1 in approver_final:
                                
                                if data["approver"] == temp1["approver"] and data["isgroup"] == temp1["isgroup"]:
                                    temp = {
                                        "isgroup" : temp1["isgroup"],
                                        "approver" : data["approver"],
                                        "name": temp1["name"],
                                        "level" : data['level'],
                                        "position": temp1["position"]
                                    }
                                    approvers.append(temp)
                                    
                                elif str(data["approver"]) == "999999999" and data["isgroup"] == "y":
                                    temp = {
                                        "isgroup" : temp1["isgroup"],
                                        "approver" : data["approver"],
                                        "name": "To ERP",
                                        "level" : data['level'],
                                        "position": ""
                                    }
                                    approvers.append(temp)
                                    break
                                
                            approvers = sorted(approvers, key = lambda i: i['level'])      
                            
                    for value in dict_rule:
                        
                        decider = ""
                        if row["rule_id"] == value["rule_id"]:
                            
                            if value["decider_type"] == "string":
                                
                                if value["decider"] == "discount" and value["operator"] != "between":
                                    decider = "Discount" + " " + value["operator"] + " " + value["d_value"]
                                    
                                elif value["decider"] == "discount" and value["operator"] == "between":
                                    decider = "Discount between " + value["d_value"] + " and " + value["d_value2"]
                                    
                                elif value["decider"] == "amount" and value["operator"] != "between":
                                    decider = "Amount " + value["operator"] + " " + value["d_value"]
                                    
                                elif value["decider"] == "amount" and value["operator"] == "between":
                                    decider = "Amount between " + value["d_value"] + " and " + value["d_value2"]
                                    
                                elif value["decider"] == "gl_account" and value["operator"] != "between":
                                    decider = "G/L account " + value["operator"] + " " + value["d_value"]
                                    
                                elif value["decider"] == "currency" and value["operator"] != "between":
                                    decider = "Currency " + value["operator"] + " " + value["d_value"]
                                    
                                elif value["decider"] == "cost_center":
                                    decider = "Cost center " + " " + value["operator"] + " " + value["d_value"]
                                    
                                elif value["decider"] == "npo":
                                    decider = "NPO " + " " + value["operator"] + " " + value["d_value"]
                                    
                                elif value["decider"] == "vendor_no":
                                    decider = "Vendor No. " + " " + value["operator"] + " " + value["d_value"]
                                    
                                elif value["decider"] == "department_id":
                                    decider = "Department " + " " + value["operator"] + " " + value["department_name"]
                                
                                elif value["decider"] == "item_category":
                                    decider = "Item Category " + " " + value["operator"] + " " + value["d_value"]
                                    
                                elif value["decider"] == "invoice_type":
                                    decider = "Invoice Type" + " " + value["operator"] + " " + value["d_value"]
                                    
                                elif value["decider"] == "supplier_type	":
                                    decider = "Supplier Type" + " " + value["operator"] + " " + value["d_value"]
                                    
                                elif value["decider"] == "document_type":
                                    rule_value = " "
                                    if value["d_value"] == 'RE':
                                        rule_value = "Invoice" 
                                    elif value["d_value"] == 'KG':
                                        rule_value = "Credit Memo" 
                                    elif value["d_value"] == 'SU':
                                        rule_value = "Debit Memo"
                                        
                                    decider = "Document Type" + " " + value["operator"] + " " + rule_value
                                    
                                elif value["decider"] == "default":
                                    decider = "Default"
                                
                                val = {
                                    "rule" : decider,
                                    "decider_type" : value["decider_type"]
                                }
                                criteria.append(val)
                                
                            else:
                                
                                if value["decider"] == "discount" and value["operator"] != "between":
                                    decider = "Discount" + " " + value["operator"] + " " + str(int(value["d_value"]))
                                    
                                elif value["decider"] == "discount" and value["operator"] == "between":
                                    decider = "Discount between " + " " + str(int(value["d_value"])) + " and " + str(int(value["d_value2"]))
                                    
                                elif value["decider"] == "amount" and value["operator"] != "between":
                                    decider = "Amount " + " " + str(value["operator"]) + " " + str(int(value["d_value"]))
                                    
                                elif value["decider"] == "amount" and value["operator"] == "between":
                                    decider = "Amount between " + str(int(value["d_value"])) + " and " + str(int(value["d_value2"]))
                                    
                                elif value["decider"] == "gl_account" and value["operator"] != "between":
                                    decider = "G/L account " + value["operator"] + " " + value["d_value"]
                                    
                                elif value["decider"] == "currency" and value["operator"] != "between":
                                    decider = "Currency " + value["operator"] + " " + value["d_value"]
                                    
                                elif value["decider"] == "cost_center":
                                    decider = "Cost center " + " " + value["operator"] + " " + value["d_value"]
                                
                                elif value["decider"] == "npo":
                                    decider = "NPO " + " " + value["operator"] + " " + value["d_value"]
                                
                                elif value["decider"] == "vendor_no":
                                    decider = "Vendor No. " + value["operator"] + " " + value["d_value"]
                                    
                                elif value["decider"] == "department_id":
                                    decider = "Department " + " " + value["operator"] + " " + value["department_name"]
                                    
                                elif value["decider"] == "item_category":
                                    decider = "Item Category " + " " + value["operator"] + " " + value["d_value"]
                                    
                                elif value["decider"] == "invoice_type":
                                    decider = "Invoice Type" + " " + value["operator"] + " " + value["d_value"]
                                    
                                elif value["decider"] == "supplier_type	":
                                    decider = "Supplier Type" + " " + value["operator"] + " " + value["d_value"]
                                    
                                elif value["decider"] == "default":
                                    decider = "Default"
                                    
                                val = {
                                    "rule": decider,
                                    "decider_type" : value["decider_type"]
                                }
                                criteria.append(val)
                        
                    record = {
                        "is_on": row["is_on"],
                        "rule_id": row["rule_id"],
                        "rule_name": row["rule_name"],
                        "approval_type" : row["approval_type"], 
                        "ec_isgroup" : row["ec_isgroup"], 
                        "escelator" : row["escelator"], 
                        "es_name" : row["es_name"],
                        "ifnot_withindays" : row["ifnot_withindays"], 
                        "comments" : row["comments"],
                        "due_notification" : row["due_notification"],
                        "due_reminder" : row["due_reminder"],
                        "overdue_notification" : row["overdue_notification"],
                        "overdue_reminder" : row["overdue_reminder"],
                        "criteria": criteria,
                        "approvers" : approvers
                    }
                    rule_detail.append(record) 
        
    except:
        return {
            'statuscode': 500,
            'body': json.dumps("Internal Fail")
        }            
                
    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': rule_detail
    }
    
    
    
    
def patchRuleDetails(event, context):
    
    global dbScehma 
    dbScehma = event["stage-variables"]["schema"]
    
    client = boto3.client(
    'secretsmanager',
    region_name='ap-south-1',
    aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    aws_secret_access_key='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' )
    secret = event["stage-variables"]["secreat"]
    resp = client.get_secret_value(
        SecretId= secret
    )
    secretDict = json.loads(resp['SecretString'])

    mydb = pymysql.connect(
        host=secretDict['host'],
        user=secretDict['username'],
        passwd=secretDict['password'],
        database=secretDict['dbname'],
        charset='utf8mb4',
        cursorclass=pymysql.cursors.DictCursor
    )

    record = {
        "rule_id": "",
        "rule_name": "",
        "approval_type": "",
        "ec_isgroup": "",
        "escelator": "",
        "ifnot_withindays": "",
        "due_notification" : "",
        "due_reminder" : "",
        "overdue_notification" : "",
        "overdue_reminder" : "",
        "comments": ""
    }
    msg = "Update Unsucessful!"
    approvers = []
    rule = ""
    
    try:
        for value in event["body-json"]:
            if value in record:
                record[value] = event["body-json"][value]
                
        with mydb.cursor() as mycursor:
            defSchemaQuery = "use " + dbScehma
            mycursor.execute(defSchemaQuery)
        
            rule = event["params"]["querystring"]["rule_id"]
            
            if "rule_name" in event["params"]["querystring"]:
                record["rule_name"] = event["params"]["querystring"]["rule_name"]
            
            data = []
            
            if "rule_id" in event["params"]["querystring"]:
                
                sqlQuery = "UPDATE rule_snro set rule_name = %s WHERE rule_id = %s"
                values = ( record["rule_name"], rule)
                mycursor.execute(sqlQuery, values)
                
                for row in event["body-json"]["criteria"]:
                    
                    if str(row['type']) == "number":
                        value1 = '0' * (11 - len(str(row['value1']))) + str(row['value1'])
                        value2 = '0' * (11 - len(str(row['value2']))) + str(row['value2'])
                    else:
                        value1 = row['value1']
                        value2 = row['value2']
                        
                    cri = {
                        "rule_id": rule,
                        "decider": row["decider"],
                        "operator": row["operator"],
                        "d_value": value1,
                        "d_value2": value2,
                        "approval_type": record["approval_type"],
                        "ec_isgroup": record["ec_isgroup"],
                        "escelator": record["escelator"],
                        "ifnot_withindays": record["ifnot_withindays"],
                        "comments": record["comments"],
                        "due_notification" : record["due_notification"],
                        "due_reminder" : record["due_reminder"],
                        "overdue_notification" : record["overdue_notification"],
                        "overdue_reminder" : record["overdue_reminder"],
                        "decider_type": row["type"]
                    }
                    data.append(cri)
                
                sqlQuery = "insert into rule (rule_id, decider, operator, d_value, d_value2, approval_type, ec_isgroup, escelator, ifnot_withindays, comments, " \
                    "decider_type, due_notification, due_reminder, overdue_notification, overdue_reminder ) values (%s, %s, %s, %s, %s, %s, %s, " \
                    "%s, %s, %s, %s, %s, %s, %s, %s)"
                   
                default = None
                
                if data:
                    
                    values = []
                    for row in data:
                        
                        if row["decider"] == 'default_assignment': 
                            value = ('default_assignment',)
                            mycursor.execute("select * from rule where decider = %s", value)
                            default = mycursor.fetchone()
                            
                            if default:
                                if int(default["rule_id"]) != int(row["rule_id"]): 
                                    return {   
                                        'statuscode': 500,
                                        'body': json.dumps('Default Rule already exist!')
                                    }
                            
                            
                        tup = (row["rule_id"], row["decider"], row["operator"], row["d_value"], row["d_value2"], row["approval_type"], row["ec_isgroup"],
                            row["escelator"], row["ifnot_withindays"], row["comments"], row["decider_type"], row["due_notification"], row["due_reminder"], 
                            row["overdue_notification"], row["overdue_reminder"])
                        values.append(tup)
                    
                if values:
                    mycursor.execute("delete from rule where rule_id = %s", rule)
                    mycursor.executemany(sqlQuery, values)
                
                if "approvers" in event["body-json"]:
                    for approver in event["body-json"]["approvers"]:
                        app = {
                            'level' : approver['level'],
                            'isgroup' : approver['isgroup'],
                            'approver' : approver['approver']
                        }
                        approvers.append(app)
                        
                        if "members" in approver:
                            for members in approver["members"]:
                                mem = {
                                    'level' : approver["level"],
                                    'isgroup': 'n',
                                    'approver' : members
                                }
                                approvers.append(mem)
                
                sqlQuery = "delete from rule_approver where rule_key = %s"
                mycursor.execute(sqlQuery, rule)
                
                values = []
                
                for index, each in enumerate(approvers):
                    tup = (rule, each['isgroup'], each['approver'], each['level'])
                    values.append(tup)
                
                sqlQuery = "INSERT INTO rule_approver (rule_key, isgroup, approver, level) VALUES ( %s, %s, %s, %s)"
                
                if values:
                    mycursor.executemany(sqlQuery, values)
                
                mydb.commit()
                msg = "Successfully Updated!"
    
    except pymysql.err.IntegrityError as e:
        mydb.rollback()
        return {
            'statuscode': 500,
            'body': json.dumps("Duplicate Rule")
        }
    
    except:
        return {
            'statuscode': 500,
            'body': msg
        }
                
    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': msg
    }
    
    
    
    def postRuleDetails(event, context):
    
        global dbScehma 
    dbScehma = event["stage-variables"]["schema"]
    
    client = boto3.client(
    'secretsmanager',
    region_name='ap-south-1',
    aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    aws_secret_access_key='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' )
    secret = event["stage-variables"]["secreat"]
    resp = client.get_secret_value(
        SecretId= secret
    )
    secretDict = json.loads(resp['SecretString'])

    mydb = pymysql.connect(
        host=secretDict['host'],
        user=secretDict['username'],
        passwd=secretDict['password'],
        database=secretDict['dbname'],
        charset='utf8mb4',
        cursorclass=pymysql.cursors.DictCursor
    )

    record = {
        "rule": "",
        "rule_name": "",
        "approval_type": "",
        "is_approval": "y",   #change to "" once front end peep makes changes
        "ec_isgroup": "",
        "escelator": "",
        "ifnot_withindays": "",
        "due_notification" : "",
        "due_reminder" : "",
        "overdue_notification" : "",
        "overdue_reminder" : "",
        "comments": ""
    }

    approvers = []

    try:
        if "is_approval" in event["params"]["querystring"]:
            record["is_approval"] = event["params"]["querystring"]["is_approval"]
        
        if "rule_name" in event["params"]["querystring"]:
            record["rule_name"] = event["params"]["querystring"]["rule_name"]

        if "approvers" in event["body-json"]:
            for approver in event["body-json"]["approvers"]:
                app = {
                    'level': approver['level'],
                    'isgroup': approver['isgroup'],
                    'approver': approver['approver']
                }
                approvers.append(app)
                
                if "members" in event["body-json"]["approvers"]:
                    for member in approver["members"]:
                        mem = {
                            'level': approver['level'],
                            'isgroup': 'n',
                            'approver': member
                        }
                        approvers.append(mem)

        criteria = []
        print(event)
        if 'criteria' in event["body-json"]:
            for each in event["body-json"]['criteria']:
                if str(each["type"]) == "number":
                    value1 = '0' * (11 - len(str(each['value1']))) + str(each['value1'])
                    value2 = '0' * (11 - len(str(each['value2']))) + str(each['value2'])
                else:
                    value1 = each['value1']
                    value2 = each['value2']

                cat = {
                    "decider": each['decider'],
                    "operator": each['operator'],
                    "value1": value1,
                    "value2": value2,
                    "type": each['type']
                }
                criteria.append(cat)

        for value in event["body-json"]:
            if value in record:
                record[value] = event["body-json"][value]

        with mydb.cursor() as mycursor:
            defSchemaQuery = "use " + dbScehma
            mycursor.execute(defSchemaQuery)

            dup = []
            for row in criteria:

                if row['decider'] == "default":
                    values = (row['decider'],)
                    sqlQuery = "select rule_id from rule where decider = %s"
                    mycursor.execute(sqlQuery, values)
                    defu = mycursor.fetchall()
                    if defu:
                        raise pymysql.err.IntegrityError
                        
                if row['decider'] == "default_assignment":
                    values = (row['decider'],)
                    sqlQuery = "select rule_id from rule where decider = %s"
                    mycursor.execute(sqlQuery, values)
                    defu = mycursor.fetchall()
                    if defu:
                        raise pymysql.err.IntegrityError
                
                if row['decider'] != "npo":
                    values = (row['decider'], row['operator'], row['value1'], row['value2'])
                    sqlQuery = "select rule_id from rule where decider = %s and operator = %s and d_value = %s and d_value2 = %s"
                    mycursor.execute(sqlQuery, values)
                    result = mycursor.fetchall()
                    if not result:
                        dup = []
                        break
        
                    ruleIds = [sub['rule_id'] for sub in result]
                    if not dup:
                        dup = ruleIds
                    else:
                        dup = [value for value in dup if value in ruleIds]
                
            if dup:
                for each in dup:
                    values = (each,)
                    sqlQuery = "select rule_id from rule where rule_id = %s"
                    mycursor.execute(sqlQuery, values)
                    result = mycursor.fetchall()

                    if result and len(criteria) == len(result):
                        raise pymysql.err.IntegrityError

            sqlQuery = "INSERT INTO rule_snro (rule_name, approval_type, is_approval) VALUES ( %s, %s, %s)"
            values = ( record["rule_name"], record["approval_type"], record["is_approval"])
            mycursor.execute(sqlQuery, values)

            rule_key = mycursor.lastrowid

            sqlQuery = "INSERT INTO rule ( rule_id, decider, operator, d_value, d_value2, approval_type, ec_isgroup, escelator, ifnot_withindays, comments, " \
                       "decider_type, due_notification, due_reminder, overdue_notification, overdue_reminder) VALUES " \
                       "( %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)"

            values = []
            for row in criteria:
                tup = (rule_key, row['decider'], row['operator'], row['value1'], row['value2'], record["approval_type"], record["ec_isgroup"], record["escelator"], 
                    record["ifnot_withindays"], record["comments"], row['type'], record["due_notification"], record["due_reminder"], record["overdue_notification"],
                    record["overdue_reminder"])
                values.append(tup)
            mycursor.executemany(sqlQuery, values)

            values = []

            for index, each in enumerate(approvers):
                tup = (rule_key, each['isgroup'], each['approver'], each["level"])
                values.append(tup)

            sqlQuery = "INSERT INTO rule_approver (rule_key, isgroup, approver, level) VALUES ( %s, %s, %s, %s)"

            if values:
                mycursor.executemany(sqlQuery, values)

            mydb.commit()

    except pymysql.err.IntegrityError as e:
        mydb.rollback()
        return {
            'statuscode': 500,
            'body': json.dumps("Duplicate Rule")
        }

    except:
        mydb.rollback()
        return {
            'statuscode': 500,
            'body': json.dumps("Internal Failure")
        }

    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': json.dumps("Sucessfully Added New Rule")
    }
    
    
# searchoptions table is not yet create dto test  
def getSearchDetails(event, context):
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='ap-south-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )

    # secret = event["stage-variables"]["secreat"]

    # resp = client.get_secret_value(
    #     SecretId= secret
    # ) 

    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()

    records = {}

    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)

            srch_field = []
            
            sqlQuery = "select s.operator, s.ui_element, s.search_id, s.is_multivalued, " \
            " s.help_required, d.value2 from serach_options s inner join" \
            " dropdown d on s.operator = d.value1 where s.search_field = ? and d.drop_key = 'operators'"
                
            values = (event["params"]["querystring"]["search_field"],)

            mycursor.execute(sqlQuery, values)
            data = mycursor.fetchall()
            data = convertValuesTodict(mycursor.description, data)
            
            for row in data:
                record = {
                    # 'search_field': row["search_field"],
                    'operator': row["operator"],
                    'operator_name' : row["value2"],
                    'ui_element': row["ui_element"],
                    'search_id': row["search_id"],
                    'is_multivalued': row["is_multivalued"],
                    'help_required': row["help_required"]
                }
                srch_field.append(record)

            records["srch_field"] = srch_field
            
    except:
        return {
            'statuscode': 500,
            'body': json.dumps("Internal Failure")
        }
                    
    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': records
    }
    
#working fine for the event   
def getTrackInvoices(event, context):
        
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='ap-south-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )
    # secret = event["stage-variables"]["secreat"]
    # resp = client.get_secret_value(
    #     SecretId= secret
    # )
    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()
    records = {}
    
    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            email = None
            edit = None
            
            values_pag = []
            
            if "pageno" in event["params"]["querystring"]:
                start_idx = int(event["params"]["querystring"]['pageno'])
                
            if "nooflines" in event["params"]["querystring"]:
                end_idx = int(event["params"]["querystring"]['nooflines'])
                        
                start_idx = (start_idx -1 ) * end_idx
                    
            email = event["params"]["querystring"]["userid"]
            
                
            # if "edit" in event["params"]["querystring"]:
            #     edit  = event["params"]["querystring"]["edit"]
                
            if "invoice_no" in event["params"]["querystring"]:
                    
                invoiceNo = event["params"]["querystring"]["invoice_no"] 
                
                items = []
                invoice_files = []
                error_log = []
                record = []
                approvers = []
                audit_trails = []
                delegate_info = []
                
                values = (email,)
                mycursor.execute("select member_id, (fs_name|| ' '|| ls_name) as mem_name from member where email = ?", values)
                member = mycursor.fetchone()
                
                mycursor.execute("select file_id, name, mime_type, file_link from file_storage where file_id = ?", event["params"]["querystring"]["invoice_no"])
                for row in mycursor:
                    record = {
                        "invoice_id" : row["file_id"],
                        "file_name" : row["name"],
                        "mime_type" : row["mime_type"],
                        "file_link" : row["file_link"]
                    }
                    invoice_files.append(record)
                    
                mycursor.execute("select a.member_id, a.approved_date, (b.fs_name || ' '|| b.ls_name) as app_name " \
                	"from approval_history a " \
                    "join member b " \
                    "on a.member_id = b.member_id " \
                    "where invoice_no = ? ",  event["params"]["querystring"]["invoice_no"] )
                        
                for row in mycursor:
                    record = {
                        "member_id": row["member_id"],
                        "approved_date": str(row["approved_date"]),
                        "member_name": row["app_name"]
                    }
                    approvers.append(record)
                
                mycursor.execute("select sr_no, invoice_no, UTCTOLOCAL(entery_timestamp, 'UTC' ) as entery_timestamp, prev_status, new_status, working_person, msg " \
                    "from invoice_audit where invoice_no = ? order by entery_timestamp desc, invoice_no", invoiceNo)
                invoice_audit = mycursor.fetchall()
                
                for row in invoice_audit:
                    record = {
                        "member_id": row["working_person"],
                        "date": str(row["entery_timestamp"]),
                        "msg": row["msg"]
                    }
                    audit_trails.append(record)
                    
                mycursor.execute("select * from sap_error_log where invoice_no = ?", event["params"]["querystring"]["invoice_no"])
                for row in mycursor:
                    err = {
                        "type": row["error_type"],
                        "msg": row["error_msg"]
                    }
                    error_log.append(err)
                
                values = (invoiceNo, )
                mycursor.execute("select m.member_id, (m.fs_name|| ' '|| m.ls_name) as member_name, d.refer_comment, d.accepted_comment, d.sr_no, d.delegated_to " \
                	"from member m " \
                    "inner join delegate d " \
                    "on m.member_id = d.delegated_from " \
                    "where d.is_refered = 'y' and d.invoice_id = ? order by every_time", values)
                delegate_member = mycursor.fetchall()
                
                if delegate_member:
                    values = (invoiceNo, )
                    sqlQuery = "select member_id, (m.fs_name|| ' '|| m.ls_name) as mem_name from member m " \
                        "inner join delegate d on m.member_id = d.delegated_to where d.is_refered = 'y' and d.invoice_id = ? order by every_time"
                    mycursor.execute(sqlQuery, values)
                    referred_member = mycursor.fetchall()
                    
                    for row in delegate_member:
                        for each in referred_member:
                            if str(row["delegated_to"] ) == str(each["member_id"]):
                                temp = {
                                    "sr_no": row["sr_no"],
                                    "refered_from_id": row["member_id"],
                                    "refered_from_name": row["member_name"],
                                    "refered_to_id": each["member_id"],
                                    "refered_to_name": each["mem_name"],
                                    "refer_comment": row["refer_comment"],
                                    "reply_comment": row["accepted_comment"]
                                }
                                delegate_info.append(temp)
                                break
                        
                values = (event["params"]["querystring"]["invoice_no"],)
                mycursor.execute("select a.*, b.vendor_name, c.value2 from invoice_header a left join vendor_master b " \
                    "on a.supplier_id = b.vendor_no left join dropdown c on a.document_type = c.value1 where invoice_no = ?", values)
                invoice_header = mycursor.fetchone()
                    
                if invoice_header:
                    
                    mycursor.execute("select department_name from departmental_budget_master where department_id = ?", (invoice_header["department_id"],))
                    department = mycursor.fetchone()
                    
                if department:
                    department_name = department["department_name"]
                else:
                    department_name = None

                sqlQuery = "select country from default_master where company_code = (Select company_code from invoice_header where invoice_no = ?)"
                values = (invoiceNo)
                mycursor.execute(sqlQuery,values)
                country = mycursor.fetchone()
                    
                records = {
                    "user_invoice_id": invoice_header["user_invoice_id"],
                    "invoice_no" :invoice_header["invoice_no"],
                    "in_status" : invoice_header["in_status"],
                    "country" : country["country"],
                    "from_supplier" : invoice_header["from_supplier"],
                    "payment_status":invoice_header["payment_status"],
                    "sap_invoice_no" : invoice_header['sap_invoice_no'],
                    "ref_po_num" : invoice_header["ref_po_num"],
                    "company_code" : invoice_header["company_code"],
                    "invoice_date" : str(invoice_header["invoice_date"]),
                    "posting_date" : str(invoice_header["posting_date"]),
                    "baseline_date": str(invoice_header["baseline_date"]),
                    "amount" : invoice_header["amount"],
                    "currency" : invoice_header["currency"],
                    "payment_method" : invoice_header["payment_method"],
                    "gl_account" : invoice_header["gl_account"],
                    "business_area" : invoice_header["business_area"],
                    "supplier_id" : invoice_header["supplier_id"],
                    "supplier_name" : invoice_header["supplier_name"],
                    "approver_id" : invoice_header["approver_id"],
                    "approver_comments" : invoice_header["approver_comments"],
                    "modified_date" : str(invoice_header["modified_date"]),
                    "cost_center" : invoice_header["cost_center"],
                    "taxable_amount" : invoice_header["taxable_amount"],
                    "discount_per" : invoice_header["discount_per"],
                    "total_discount_amount" : invoice_header["total_discount_amount"],
                    "is_igst" : invoice_header["is_igst"],
                    "tax_per" : invoice_header["tax_per"],
                    "cgst_tot_amt": invoice_header["cgst_tot_amt"],
                    "sgst_tot_amt": invoice_header["sgst_tot_amt"],
    	            "igst_tot_amt": invoice_header["igst_tot_amt"],
                    "tds_per": invoice_header["tds_per"],
                    "tds_tot_amt": invoice_header["tds_tot_amt"],
                    "payment_terms" : invoice_header["payment_terms"],
                    "adjustment" : invoice_header["adjustment"],
                    "supplier_comments": invoice_header['supplier_comments'],
                    "tcs": invoice_header["tcs"],
                    "internal_order": invoice_header["internal_order"],
                    "department_id": invoice_header["department_id"],
                    "department_name": department_name,
                    "npo": invoice_header["npo"],
                    "document_type": invoice_header["value2"],
                    "gstin": invoice_header["gstin"],
                    "irn": invoice_header["irn"],
                    "items" : items,
                    "files" : invoice_files,
                    "error_log": error_log,
                    "approvers": approvers,
                    "audit_trails": audit_trails,
                    "refer_details": delegate_info
                }
                    
                mycursor.execute("select * from invoice_item where invoice_no = ?", values)
                for row in mycursor:
                    record = {
                      "item_no":row["item_no"],
                      "material":row["material"],
                      "hsn_code": row["hsn_code"],
                      "material_desc":row["material_desc"],
                      "quantity":row["quantity"],
                      "unit":row["unit"],
                      "amount":row["amount"],
                      "currency": row["currency"],
                      "amt_per_unit" : row["amt_per_unit"],
                      "cgst_per": row["cgst_per"],
                      "cgst_amount":row["cgst_amount"],
                      "tax_code":row["tax_code"],
                      "ref_po_no":row["ref_po_no"],
                      "plant":row["plant"],
                      "discount":row["discount"],
                      "discount_amount" : row["discount_amount"],
                      "gross_amount" : round(row["gross_amount"],2),
                      "sgst_per": row["sgst_per"],
                      "sgst_amount": row["sgst_amount"],
                      "igst_per": row["igst_per"],
                      "igst_amount": row["igst_amount"],
                      "taxable_amount": row["taxable_amount"],
                      "tax_value_amount": row["tax_value_amount"],
                      "gl_account": row["gl_account"],
                      "gst_per": row["gst_per"],
                      "ocr_matched" : row["ocr_matched"],
                      "cost_center": row["cost_center"],
                      "qc_check": row["qc_check"]
                      }
                    items.append(record)
                        
                records["items"] = items
                
            elif "condn" in event["body-json"]:
                
                if "userid" in event["params"]["querystring"]:
                    # email = event["params"]["querystring"]["userid"]
                    mycursor.execute("select user_type from member where email = ?", email)
                    role = mycursor.fetchone()
                
                val_list = []
                pos = 0
                condn = ""
                records = {}
                
                for row in event["body-json"]["condn"]:
                    if pos != 0:
                        condn = condn + " and "
                    elif pos == 0:
                        pos = pos + 1
    
                    if str(row["operator"]) == "like":
                        val_list.append("%" + row["value"] + "%")
                        condn = condn + str(row["field"]) + " " + str(row["operator"]) + " " + "?"
                    elif str(row["operator"]) == "between":
                        val_list.append(row["value"])
                        val_list.append(row["value2"])
                        condn = condn + " " + str(row["field"]) + " between ? and ? "
                    else:
                        val_list.append(row["value"])
                        condn = condn + str(row["field"]) + " " + str(row["operator"]) + " " + "?"
                    
                if role["user_type"] == 'npoapp':
                    condn = condn + " and a.npo = 'y' "
                
                sqlQuery = "SELECT a.invoice_no, a.in_status, a.user_invoice_id, a.sap_invoice_no, a.invoice_date, a.posting_date, a.amount, a.supplier_name, a.approver_id, " \
                	"a.approver_comments, a.modified_date, a.supplier_comments, a.payment_status, a.gstin, c.fs_name, c.ls_name, d.vendor_name, e.value2 as document_type " \
                    "FROM invoice_header a " \
                    "left outer join member c on a.working_person = c.member_id " \
                    "left join vendor_master d " \
                    "on a.supplier_id = d.vendor_no " \
                    "left join dropdown e " \
                    "on a.document_type = e.value1 " \
                    "where (sup_status is null or sup_status <> 'draft')"
                               
                if condn:
                    sqlQuery = sqlQuery + " and " + condn 
                
                
                val_list.append(end_idx)
                val_list.append(start_idx)
                    
                sqlQuery = sqlQuery + " order by a.invoice_no desc limit ? offset ? "
                
                values = tuple(val_list,)
                mycursor.execute(sqlQuery, values)
                    
                invoice_obj = mycursor.fetchall()
                
                val_list.pop()
                val_list.pop()
                
                sqlQuery = "select count(in_status) as invoice_count, in_status from invoice_header where (sup_status is null or sup_status <> 'draft') "
                if condn:
                    sqlQuery = sqlQuery + "  and " + condn + " group by in_status"
                else:
                    sqlQuery = sqlQuery + " group by in_status"
                    
                mycursor.execute(sqlQuery, tuple(val_list))
        
                countrec = {}
                total_count = 0
                
                for each in mycursor:
                    total_count = total_count + int(each["invoice_count"])
                    countrec[each['in_status']] = each['invoice_count']
                    
                if "" in countrec:
                    del countrec['']
                
                if None in countrec:
                    del countrec[None]
                    
                if "new" not in countrec:
                    countrec["new"] = 0
                        
                if "draft" not in countrec:
                    countrec["draft"] = 0
                    
                if "inapproval" not in countrec:
                    countrec["inapproval"] = 0
                        
                if "tosap" not in countrec:
                    countrec["tosap"] = 0
                        
                if "rejected" not in countrec:
                    countrec["rejected"] = 0
                    
                countrec['total_count'] = total_count
                        
                invoices = []
                invoice_files = []
                    
                res = [str(sub['invoice_no']) for sub in invoice_obj]
                    
                if res and len(res) > 1:
                    mycursor.execute("select file_id, name, mime_type, file_link from file_storage where " \
                        "file_id in {}".format(tuple(res))) 
                            
                elif res and len(res) == 1:
                    values = (res[0],)
                    mycursor.execute("select file_id, name, mime_type, file_link from file_storage where file_id = ?", values)
                        
                for row in mycursor:
                    record = {
                        "invoice_id" : row["file_id"],
                        "file_name" : row["name"],
                        "mime_type" : row["mime_type"],
                        "file_link" : row["file_link"]
                    }   
                    invoice_files.append(record)
                    
                approvers_list = []
                approver_final = []
                
                if res:
                    format_strings_in = ','.join(['?'] * len(res))
    
                    sqlQuery = "select * from approval where referred_approver = 'n'and invoice_no in ({}) " \
                               "order by invoice_no desc, approval_level".format(format_strings_in)
                    mycursor.execute(sqlQuery, tuple(res))
                    approvers_list = mycursor.fetchall()
            
                    groupid = []
                    memberid = []
            
                    for row in approvers_list:
            
                        if row["isgroup"] == 'y':
                            groupid.append(row["approver"])
                        elif row["isgroup"] == 'n':
                            memberid.append(row["approver"])
            
                    format_strings_mem = ','.join(['?'] * len(memberid))
            
                    approver_final = []
            
                    if groupid:
                        groupid = set(groupid)
                        groupid = list(groupid)
                        format_strings_grp = ','.join(['?'] * len(groupid))
                        mycursor.execute('select group_id, name from "GROUP" where group_id in ({})'.format(format_strings_grp), tuple(groupid))
                        grp_det = mycursor.fetchall()
            
                        if grp_det:
                            for row in grp_det:
                                temp1 = {
                                    "isgroup": "y",
                                    "approver": row["group_id"],
                                    "name": row["name"],
                                    "approval_type": ""
                                }
                                approver_final.append(temp1)
            
                    if memberid:
            
                        memberid = set(memberid)
                        memberid = list(memberid)
            
                        format_strings_mem = ','.join(['?'] * len(memberid))
            
                        sqlQuery = "select member_id, fs_name, ls_name from member " \
                                   "where member_id in ("+ format_strings_mem +")"
                        mycursor.execute(sqlQuery, tuple(memberid))
            
                        mem_det = mycursor.fetchall()
            
                        if mem_det:
            
                            for row in mem_det:
            
                                if row["fs_name"] == None and row["ls_name"] == None:
                                    name = None
            
                                elif row["fs_name"] == None and row["ls_name"] != None:
                                    name = row["ls_name"]
            
                                elif row["fs_name"] != None and row["ls_name"] == None:
                                    name = row["fs_name"]
            
                                else:
                                    name = str(row["fs_name"]) + " " + str(row["ls_name"])
            
                                temp1 = {
                                    "isgroup": "n",
                                    "approver": row["member_id"],
                                    "name": str(name),
                                    "approval_type": ""
                                }
                                approver_final.append(temp1)
                    
                approval_type = []
                error_op = []
                
                for row in invoice_obj:
                    files = []
                    approvers = []
                    
                    for temp in approvers_list:
                        if temp['invoice_no'] == row["invoice_no"]:
                            for temp1 in approver_final:
                                if str(temp["approver"]) == str(temp1["approver"]) and str(temp["isgroup"]) == str(temp1["isgroup"]):
                                        
                                    if temp["isapproved"] == "y":
                                        status = "accepted"
                                    elif temp["isapproved"] == 'n':
                                        status = "inapproval" 
                                            
                                    status_ap = {
                                        "isgroup" : temp1["isgroup"],
                                        "approver" : temp1["approver"],
                                        "name": temp1["name"],
                                        "level" : temp['approval_level'],
                                        "approval_type": temp1["approval_type"],
                                        # "isapproved" : temp["isapproved"]
                                        "isapproved" : status
                                    }
                                    approvers.append(status_ap) 
                                    
                    for data in invoice_files:
                           
                        if row["invoice_no"] == data["invoice_id"]:
                            temp = {
                                "file_name" : data["file_name"],
                                "mime_type" : data["mime_type"],
                                "file_link" : data["file_link"]
                            }
                            files.append(temp)
                            # break
                            
                    approval_type = None
                    for each in approvers_list:
                        if each["invoice_no"] == row["invoice_no"]:
                            approval_type = each["approval_type"]
                            break
                        
                    if row["fs_name"] == None and row["ls_name"] == None:
                        name = None
                            
                    elif row["fs_name"] == None and row["ls_name"] != None:
                        name = row["ls_name"]
                        
                    elif row["fs_name"] != None and row["ls_name"] == None:
                        name = row["fs_name"]
                            
                    else:
                        name = str(row["fs_name"]) + " " + str(row["ls_name"])
                        
                    record = {
                      "invoice_no":row["invoice_no"],
                      "document_type": row["document_type"],
                      "gstin": row["gstin"],
                      "in_status":row["in_status"],
                      "user_invoice_id" : row['user_invoice_id'],
                    #   "working_person" : str(row["fs_name"]) + " " + str(row["ls_name"]),
                      "working_person" : str(name),
                      "sap_invoice_no" : row['sap_invoice_no'],
                      "invoice_date":str(row["invoice_date"]),
                      "posting_date":str(row["posting_date"]),
                      "amount":row["amount"],
                      "supplier_name":row["vendor_name"], 
                      "approver_id":row["approver_id"],
                      "approver_comments" : row["approver_comments"],
                      "modified_date" : str(row["modified_date"]),
                      "supplier_comments": row['supplier_comments'],
                      "payment_status" : str(row["payment_status"]),
                    #   "approver_name":str(row["fs_name"]) + " " + str(row["ls_name"]),
                      "approver_name":"",
                      "approvers": approvers,
                      "approval_type": approval_type,
                      "error_log": error_op,
                      "invoice_files" : files,
                      
                    }
                    invoices.append(record)
                        
                records["invoices"] = invoices
                records["count"] = countrec
            
            else:
                
                records = {}
                condn = " " 
                
                values_pag.append(start_idx)
                values_pag.append(end_idx)
                    
                
                if "userid" in event["params"]["querystring"]:
                    email = event["params"]["querystring"]["userid"]
                    mycursor.execute("select user_type from member where email = ?", email)
                    role = mycursor.fetchone()
                    
                    
                    if role["user_type"] == 'npoapp':
                        condn = " and a.npo = 'y' "
                    
                sqlQuery = "select a.invoice_no, a.in_status,a.sap_invoice_no, a.user_invoice_id," \
                    " a.from_supplier, a.ref_po_num, a.company_code, a.invoice_date, a.posting_date," \
                    " a.amount, a.currency, a.gl_account, a.business_area, a.supplier_id, a.npo," \
                    " a.approver_id, a.supplier_name, a.approver_comments, a.modified_date," \
                    " a.working_person,a.supplier_comments, a.payment_status, a.gstin, c.fs_name, c.ls_name, d.vendor_name, e.value2 as document_type" \
                    " FROM invoice_header a left outer join member c" \
                    " on a.working_person = c.member_id " \
                    " left join vendor_master d" \
                    " on a.supplier_id = d.vendor_no" \
                    " left join dropdown e " \
                    " on a.document_type = e.value1 " \
                    " where (sup_status is null or sup_status <> 'draft') " \
                    " " + condn + " order by a.invoice_no desc limit ?,?"  
                    # " and date(a.entry_date) > date(now() - interval 60 day)" + condn + " order by a.invoice_no desc limit ?,?"
                    
                mycursor.execute(sqlQuery, tuple(values_pag))
                # print(sqlQuery, values_pag)
                invoices_obj = mycursor.fetchall()
                
                invoices = []
                invoice_files = []
                    
                res = [sub['invoice_no'] for sub in invoices_obj]
                    
                groupid = []
                memberid = []
                error_log = []
                    
                if res:  
                    if len(res) == 1:
                        values = (res[0], )
                        mycursor.execute("select * from sap_error_log where invoice_no = ? order by invoice_no desc", values)
                        error_log = mycursor.fetchall()
                        
                    elif len(res) > 1:
                        mycursor.execute("select * from sap_error_log where invoice_no in {} order by invoice_no desc".format(tuple(res)))
                        error_log = mycursor.fetchall()
                    
                    if res:
                        format_strings = ','.join(['?'] * len(res))
                        
                        sqlQuery = "select file_id, name, mime_type, file_link " \
                            "from file_storage " \
                            "where file_id in (?) order by file_id desc" % format_strings
                        mycursor.execute(sqlQuery, tuple(res))
                        invoice_files = mycursor.fetchall()
                        
                    if len(res) == 1:
                        mycursor.execute("select (m.fs_name|| ' '|| m.ls_name) as approver_name, a.invoice_no " \
                          "from member m " \
                        	"inner join approval_history a " \
                        	"on m.member_id = a.member_id " \
                          "where a.invoice_no = ? " \
                          "order by a.invoice_no desc, a.approval_level desc ", res[0])
                        sap_approved = mycursor.fetchall()
                            
                    else:
                        mycursor.execute("select (m.fs_name|| ' '|| m.ls_name) as approver_name, a.invoice_no " \
                            "from member m " \
                            "inner join approval_history a " \
                            "on m.member_id = a.member_id " \
                            "where a.invoice_no in {} " \
                            "order by a.invoice_no desc, a.approval_level desc".format(tuple(res)))
                        sap_approved = mycursor.fetchall()
                
                approvers_list = []
                approver_final = []
                
                if res:
                    format_strings_in = ','.join(['?'] * len(res))
    
                    sqlQuery = "select * from approval where referred_approver = 'n' and invoice_no in ({}) " \
                               "order by invoice_no desc, approval_level ".format(format_strings_in)
                    mycursor.execute(sqlQuery, tuple(res))
                    approvers_list = mycursor.fetchall()
            
                    groupid = []
                    memberid = []
            
                    for row in approvers_list:
                        if row["isgroup"] == 'y':
                            groupid.append(row["approver"])
                        elif row["isgroup"] == 'n':
                            memberid.append(row["approver"])
            
                    format_strings_mem = ','.join(['?'] * len(memberid))
            
                    approver_final = []
            
                    if groupid:
                        groupid = set(groupid)
                        groupid = list(groupid)
                        format_strings_grp = ','.join(['?'] * len(groupid))
                        
                        mycursor.execute('select group_id, name from "GROUP" where group_id in ({})'.format(format_strings_grp), tuple(groupid))
                        grp_det = mycursor.fetchall()
            
                        if grp_det:
                            for row in grp_det:
                                temp1 = {
                                    "isgroup": "y",
                                    "approver": row["group_id"],
                                    "name": row["name"],
                                    "approval_type": ""
                                }
                                approver_final.append(temp1)
            
                    if memberid:
            
                        memberid = set(memberid)
                        memberid = list(memberid)
            
                        format_strings_mem = ','.join(['?'] * len(memberid))
            
                        sqlQuery = "select member_id, fs_name, ls_name from member where member_id in ({})" .format(format_strings_mem)
                        mycursor.execute(sqlQuery, tuple(memberid))
            
                        mem_det = mycursor.fetchall()
            
                        if mem_det:
            
                            for row in mem_det:
            
                                if row["fs_name"] == None and row["ls_name"] == None:
                                    name = None
            
                                elif row["fs_name"] == None and row["ls_name"] != None:
                                    name = row["ls_name"]
            
                                elif row["fs_name"] != None and row["ls_name"] == None:
                                    name = row["fs_name"]
            
                                else:
                                    name = str(row["fs_name"]) + " " + str(row["ls_name"])
            
                                temp1 = {
                                    "isgroup": "n",
                                    "approver": row["member_id"],
                                    "name": str(name),
                                    "approval_type": ""
                                }
                                approver_final.append(temp1)
                
                sap_app_name = "" 
                for row in invoices_obj:
                    approvers = []
                    files = []
                    error_op = []
                    
                    for errors in error_log:
                        if str(row["invoice_no"]) == str(errors["invoice_no"]):
                            err = {
                                "invoice_no" : errors["invoice_no"],
                                "type" : errors["error_type"],
                                "msg" : errors["error_msg"]
                            }
                            error_op.append(err)
                        
                    for data in invoice_files:
                        if str(row["invoice_no"]) == str(data["file_id"]):
                            temp = {
                                "file_name" : data["name"],
                                "mime_type" : data["mime_type"],
                                "file_link" : data["file_link"]
                            }
                            files.append(temp)
                        
                    for temp in approvers_list:
                        approval_type = None
                        
                        if row["invoice_no"] == temp["invoice_no"]: 
                            for temp1 in approver_final:
                                if str(temp["approver"]) == str(temp1["approver"]) and str(temp["isgroup"]) == str(temp1["isgroup"]):
                                        
                                    if temp["isapproved"] == "y":
                                        status = "accepted"
                                        
                                    elif temp["isapproved"] == 'n':
                                        status = "inapproval" 
                                            
                                    status_ap = {
                                        "isgroup" : temp1["isgroup"],
                                        "approver" : temp1["approver"],
                                        "name": temp1["name"],
                                        "level" : temp['approval_level'],
                                        "approval_type": temp1["approval_type"],
                                        "isapproved" : status
                                    }
                                    approvers.append(status_ap)
                                    
                    for app in sap_approved:
                         if row["invoice_no"] == app["invoice_no"]:
                             sap_app_name = app["approver_name"]
                             
                    if row["fs_name"] == None and row["ls_name"] == None:
                        name = None
                            
                    elif row["fs_name"] == None and row["ls_name"] != None:
                        name = row["ls_name"]
                        
                    elif row["fs_name"] != None and row["ls_name"] == None:
                        name = row["fs_name"]
                            
                    else:
                        name = str(row["fs_name"]) + " " + str(row["ls_name"])
                        
                    approval_type = None
                        
                    for each in approvers_list:
                        if each["invoice_no"] == row["invoice_no"]:
                            approval_type = each["approval_type"]
                            break
                        
                    if row["npo"] == 'y':
                        invoice_type = 'NPO'
                        
                    elif row["npo"] == None and row["ref_po_num"] == None:
                        invoice_type = 'None'
                        
                    elif row["ref_po_num"] != None:
                        invoice_type = 'PO'
                        
                    record = {
                        "invoice_no" :row["invoice_no"],
                        "document_type": row["document_type"],
                        "gstin": row["gstin"],
                        "in_status" : row["in_status"],
                        "invoice_type": invoice_type,
                        "user_invoice_id" : row['user_invoice_id'],
                        "sap_invoice_no" : row['sap_invoice_no'],
                        "invoice_date" : str(row["invoice_date"]),
                        "posting_date" : str(row["posting_date"]),
                        "amount" : row["amount"],
                        "supplier_id" : row["supplier_id"],
                        "supplier_name" : row["vendor_name"],
                        "approver_name": "",
                        "approver_name": sap_app_name,
                        "modified_date": str(row["modified_date"]),
                        "working_person": str(name),
                        "supplier_comments":row["supplier_comments"],
                        "payment_status": str(row["payment_status"]),
                        "approval_type": approval_type,
                        "invoice_files":files,
                        "approvers":approvers,
                        "error_log": error_op
                        }
                    invoices.append(record)
                    sap_app_name = "" 
                records["invoices"] = invoices
            
    # except:
    #     return {
    #     'statuscode': 500,
    #     'body': json.dumps("Internal Failure")   
    # }
            
    finally:
        mydb.close()
        
    return {
        'statuscode': 200,
        'body': records
    }
    
# event = {'body-json': {'condn': []}, 'params': {'path': {}, 'querystring': {'nooflines': '10', 'pageno': '1', 'userid': 'einvoiceportal@gmail.com'}, 'header': {'accept': 'application/json, text/plain, */*', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'en-US,en;q=0.9', 'Authorization': 'eyJraWQiOiJ1RXlLMTdnUjUzTVVMcXUrYkRsQUZ2NHRSUTR0VVM5KzM4NlwvZnpxMWorQT0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiI5NDkxOTNiMi1hZWQ2LTQxZGUtOTM2YS04MGRjMTEzNjUxNzIiLCJhdWQiOiIyNGJqZTRqdWQ4aDNmOHJzbmtraGcwYmx2MSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJldmVudF9pZCI6IjgxYzUyODQ2LTU4ZTAtNGI5ZS1iMjE4LWFlY2YzZjExMWIzNiIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjg2MjA0MTE4LCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAuZXUtY2VudHJhbC0xLmFtYXpvbmF3cy5jb21cL2V1LWNlbnRyYWwtMV9QOXJubnFpTHUiLCJjb2duaXRvOnVzZXJuYW1lIjoiOTQ5MTkzYjItYWVkNi00MWRlLTkzNmEtODBkYzExMzY1MTcyIiwiZXhwIjoxNjg2MjA3NzE4LCJpYXQiOjE2ODYyMDQxMTgsImVtYWlsIjoiZWludm9pY2Vwb3J0YWxAZ21haWwuY29tIn0.L8B5FtrVzhAXit7Pi2pQ8uUjd35gL27EWWSz6OxUp4MQ4A82Pn4AfvS7O8ysh3GpPbKTWBFE7p8HUeqEPP2x5DXCQZcx7K_xcX0Vm_TZfvECZuNoJnYnELmK3_vLFAEkTrd8xNAwqjqcl7QvBkOuzfWBjD74cAAyRSWa9mfWZDdqlgE-UYrYtR_Z6ue4IGBQjaYXxWzH9fmhJex1cyJEkunEhDTGQeiIfj4fqLgTdiUhF-wdQuab0JiDGdNm_5kg_u2dH44IIW49lMBYOq5HrCR56tzwTTzMtHXyiVrlY5vH7cmIUfCn7CfDE5bA_rProJOxofeMU4-44cvVdyCNVg', 'content-type': 'application/json', 'Host': 'overview.peoltechnologies.net', 'origin': 'http://localhost:4200', 'referer': 'http://localhost:4200/', 'sec-ch-ua': '"Not.A/Brand";v="8", "Chromium";v="114", "Google Chrome";v="114"', 'sec-ch-ua-mobile': '?0', 'sec-ch-ua-platform': '"Windows"', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'cross-site', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36', 'X-Amzn-Trace-Id': 'Root=1-648170b2-2646ba1f00e573e704fa810e', 'X-Forwarded-For': '49.207.49.108', 'X-Forwarded-Port': '443', 'X-Forwarded-Proto': 'https'}}, 'stage-variables': {'schema': 'einvoice_db_portal', 'lambda_alias': 'dev', 'secreat': 'test/einvoice/secret', 'notification_email': 'elipotest@gmail.com', 'ocr_bucket_folder': 'old-dev/', 'cred_bucket': 'file-bucket-emp'}, 'context': {'account-id': '', 'api-id': '5ud4f0kv53', 'api-key': '', 'authorizer-principal-id': '', 'caller': '', 'cognito-authentication-provider': '', 'cognito-authentication-type': '', 'cognito-identity-id': '', 'cognito-identity-pool-id': '', 'http-method': 'POST', 'stage': 'einvoice-v1', 'source-ip': '49.207.49.108', 'user': '', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36', 'user-arn': '', 'request-id': 'c6f60e98-65a8-4b7e-b376-d0c6e4fcb1ff', 'resource-id': 'poy8hs', 'resource-path': '/track-invoice'}}
# print(getTrackInvoices(event, ' '))
# tested tables columns not yet converted to uppercase
# but statements are working fine 
def getEinvoiceInitialData(event, context):
        
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='ap-south-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )

    # secret = event["stage-variables"]["secreat"]

    # resp = client.get_secret_value(
    #     SecretId= secret
    # )  

    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()

    record = {}

    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema" + dbScehma
            mycursor.execute(defSchemaQuery)
            
            sqlQuery = 'select a.user_type, b.name from member a left join "GROUP" as  b on a.group_id = b.group_id where email = ?'
            mycursor.execute(sqlQuery,event["params"]["querystring"]["userid"])
            member = mycursor.fetchall()
            
            
            if member:
                member = convertValuesTodict(mycursor.description, member)
                member = member[0]
                if member["user_type"]:
                    values =('user_type',member["user_type"])
                    mycursor.execute("select value2 from dropdown where drop_key = ? and value1 = ?",values)
                    dropdown = mycursor.fetchone()
                    dropdown = convertValuesTodict(mycursor.description, dropdown)
                    dropdown = dropdown[0]
                    
                    mycursor.execute("select * from user_access_header where user_type = ? order by access_id", member["user_type"])
                    headertabs = mycursor.fetchall()
                    headertabs = convertValuesTodict(mycursor.description, headertabs)
                    
                    mycursor.execute("select a.* " \
                    	"from user_access_item a " \
                        "inner join user_access_header b " \
                        "on a.access_id = b.access_id " \
                        "where b.user_type = ? " \
                        "order by a.access_id, sub_tab_id", member["user_type"])
                    itemTabs = mycursor.fetchall()
                    itemTabs = convertValuesTodict(mycursor.description, itemTabs)
                    
                    tabAccess = []
                    
                    if headertabs:
                        for row in headertabs:
                            itemTabsList = []
                            
                            if itemTabs:
                                for each in itemTabs:
                                    if row["access_id"] == each["access_id"]:
                                        tempItem = {
                                            "access_id": each["access_id"],
                                            "sub_tab_id": each["sub_tab_id"],
                                            "subtab_name": each["subtab_name"],
                                            "subtab_desc": each["subtab_desc"]
                                        }
                                        itemTabsList.append(tempItem) 
                                    
                            temp = {
                                "access_id": row["access_id"],
                                "tab_name": row["tab_name"],
                                "tab_desc": row["tab_desc"],
                                "itemTabs": itemTabsList
                            }
                            
                            tabAccess.append(temp) 
                            
                        record = {
                            "user_type" : member["user_type"],
                            "user_description" : dropdown["value2"],
                            "group_name": member["name"],
                            "tab_access": tabAccess
                        }
                            
                    else:
                        return {
                            'statuscode': 502,
                            'body': json.dumps("No Tabs Assigned"),
                        }
                    
                else:
                    return {
                        'statuscode': 501,
                        'body': json.dumps("No Role Assigned"),
                    }
        
    except:
        return {
            'statuscode': 500,
            'body': json.dumps("Internal Failure"),
        }
            
    finally:
        mydb.close()

    
    return {
        'statuscode': 200,
        'body': record
    }
    

#working fine for the event
def postUserRoleTabs(event, context):
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='ap-south-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )
    # secret = event["stage-variables"]["secreat"]
    # resp = client.get_secret_value(
    #     SecretId=secret
    # )
    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()

    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            if "user_type" in event["params"]["querystring"]:
                userType = event["params"]["querystring"]["user_type"]
                
            mycursor.execute("select access_id from user_access_header where user_type = ?", userType)
            accessID = mycursor.fetchall()
            
            tupAccessID = []
            for each in accessID:
                tupAccessID.append(each["access_id"])
                
            format_strings_accessID = ','.join(['?'] * len(tupAccessID))
            
            if accessID:
                sqlQuery = "delete from user_access_item where access_id in ("+format_strings_accessID+")"
                mycursor.execute(sqlQuery, tuple(tupAccessID))
            
            mycursor.execute("delete from user_access_header where user_type = ?", userType)
            
            if "tab_access" in event["body-json"]:
                for row in event["body-json"]["tab_access"]:
                    values = (userType, row["tab_name"], row["tab_name"])
                    sqlQuery = "INSERT INTO user_access_header (user_type, tab_name, tab_desc) VALUES {}"
                    
                    mycursor.execute(sqlQuery.format(tuple(values)))
                    mycursor.execute("select count(*) from user_access_header")
                    access_id = mycursor.fetchone()
                    
                    sqlQuery = "INSERT INTO user_access_item (access_id, sub_tab_id, subtab_name, subtab_desc) VALUES {}"
                    itemTabs = []
                    
                    for count, each in enumerate(row["itemTabs"]):
                        
                        if each:
                            temp = (access_id[0], (count + 1), each["subtab_name"], each["subtab_name"])
                            # itemTabs.append(temp)
                            mycursor.execute(sqlQuery.format(tuple(temp)))
                
                    # if itemTabs:
                    #     mycursor.executemany(sqlQuery, itemTabs)
                    
            mydb.commit()      

    except:
        mydb.rollback()
        return {
            'statuscode': 500,
            'body': json.dumps("Interal Error!")
        }

    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': json.dumps("Tabs modified successfully")
    }

# event = {'body-json': {'tab_access': [{'tab_name': 'Overview', 'itemTabs': []}, {'tab_name': 'Invoice', 'itemTabs': [{'subtab_name': 'Email'}, {'subtab_name': 'Create Invoice'}, {'subtab_name': 'Invoice Cockpit'}, {'subtab_name': 'My Inbox'}, {'subtab_name': 'Track Invoices'}, {'subtab_name': 'Invoice Assignment'}, {'subtab_name': 'Supplier Enquiry'}, {'subtab_name': 'Comment Template'}, {'subtab_name': 'Email'}, {'subtab_name': 'Create Invoice'}, {'subtab_name': 'Invoice Cockpit'}, {'subtab_name': 'My Inbox'}, {'subtab_name': 'Track Invoices'}, {'subtab_name': 'Invoice Assignment'}, {'subtab_name': 'Supplier Enquiry'}, {'subtab_name': 'Comment Template'}, {'subtab_name': 'Email'}, {'subtab_name': 'Create Invoice'}, {'subtab_name': 'Invoice Cockpit'}, {'subtab_name': 'My Inbox'}, {'subtab_name': 'Track Invoices'}, {'subtab_name': 'Invoice Assignment'}, {'subtab_name': 'Supplier Enquiry'}, {'subtab_name': 'Comment Template'}]}, {'tab_name': 'Purchase', 'itemTabs': [{'subtab_name': 'Email'}, {'subtab_name': 'Create Po'}, {'subtab_name': 'Po Cockpit'}, {'subtab_name': 'My Inbox'}, {'subtab_name': 'Email'}, {'subtab_name': 'Create Po'}, {'subtab_name': 'Po Cockpit'}, {'subtab_name': 'My Inbox'}, {'subtab_name': 'Email'}, {'subtab_name': 'Create Po'}, {'subtab_name': 'Po Cockpit'}, {'subtab_name': 'My Inbox'}]}, {'tab_name': 'Overview', 'itemTabs': []}, {'tab_name': 'Invoice', 'itemTabs': []}, {'tab_name': 'Purchase', 'itemTabs': []}, {'tab_name': 'Overview', 'itemTabs': []}, {'tab_name': 'Invoice', 'itemTabs': []}, {'tab_name': 'Purchase', 'itemTabs': []}]}, 'params': {'path': {}, 'querystring': {'user_type': 'cfo'}, 'header': {'accept': 'application/json, text/plain, */*', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'en-US,en;q=0.9', 'Authorization': 'eyJraWQiOiJ1RXlLMTdnUjUzTVVMcXUrYkRsQUZ2NHRSUTR0VVM5KzM4NlwvZnpxMWorQT0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiI5NDkxOTNiMi1hZWQ2LTQxZGUtOTM2YS04MGRjMTEzNjUxNzIiLCJhdWQiOiIyNGJqZTRqdWQ4aDNmOHJzbmtraGcwYmx2MSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJldmVudF9pZCI6IjFlMmI2YjY0LWUxNDAtNGZhYS05YjA0LTVhZjJhZTZjM2NkMyIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjc4ODczNDM2LCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAuZXUtY2VudHJhbC0xLmFtYXpvbmF3cy5jb21cL2V1LWNlbnRyYWwtMV9QOXJubnFpTHUiLCJjb2duaXRvOnVzZXJuYW1lIjoiOTQ5MTkzYjItYWVkNi00MWRlLTkzNmEtODBkYzExMzY1MTcyIiwiZXhwIjoxNjc4ODc3MDM2LCJpYXQiOjE2Nzg4NzM0MzYsImVtYWlsIjoiZWludm9pY2Vwb3J0YWxAZ21haWwuY29tIn0.F9aPxHg4nZeMSpkmGhKZ_r72Pf_kGPNDFdbx_YTCHMn4O9m8turt1gLVTZ2ATj6qSUoDQWt4pY0RYLJfAn9kUjYE-Ib_djG1KCjajdx47NL2B0WsTRKHtokgBR6SBfIZp1_yi4Bppc9kqhfclQ6Va_1ZGZuLyOAR4cI09q_rA7xNYwa_uPoa4Fac1x6-TTpHpoYb9dpu_UoeaGkoZ0FLs6BsoURIjU0ZRkjiKRt4lwmIsM2nn_ebmaZaMKBdwZhKYtADReNbDgbgB0CaBeLM8Ss7qfPshbq4pMDE3fTObYnhYRIFgp0Oq4q4w40KrwfaPKAAbiWKEyt9C9nb3oh9og', 'content-type': 'application/json', 'Host': 'overview.peoltechnologies.net', 'origin': 'http://localhost:4200', 'referer': 'http://localhost:4200/', 'sec-ch-ua': '"Not_A Brand";v="99", "Google Chrome";v="109", "Chromium";v="109"', 'sec-ch-ua-mobile': '?0', 'sec-ch-ua-platform': '"Windows"', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'cross-site', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', 'X-Amzn-Trace-Id': 'Root=1-64119391-5a5e52b22b6b8e74476d2d09', 'X-Forwarded-For': '49.206.133.253', 'X-Forwarded-Port': '443', 'X-Forwarded-Proto': 'https'}}, 'stage-variables': {'schema': 'einvoice_db_portal', 'lambda_alias': 'dev', 'secreat': 'test/einvoice/secret', 'notification_email': 'elipotest@gmail.com', 'ocr_bucket_folder': 'old-dev/', 'cred_bucket': 'file-bucket-emp'}, 'context': {'account-id': '', 'api-id': '5ud4f0kv53', 'api-key': '', 'authorizer-principal-id': '', 'caller': '', 'cognito-authentication-provider': '', 'cognito-authentication-type': '', 'cognito-identity-id': '', 'cognito-identity-pool-id': '', 'http-method': 'POST', 'stage': 'einvoice-v1', 'source-ip': '49.206.133.253', 'user': '', 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', 'user-arn': '', 'request-id': '02df85ee-48f3-4e5d-be0b-a6e50836061f', 'resource-id': '5uc4ml', 'resource-path': '/user'}}
# print(postUserRoleTabs(event, ' '))
    
#working fine but column names still not converted    
def getUserRoleTabs(event, context):
        
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='ap-south-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )
    # secret = event["stage-variables"]["secreat"]
    # resp = client.get_secret_value(
    #     SecretId=secret
    # )
    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()

    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            if "user_type" in event["params"]["querystring"]:
                userType = event["params"]["querystring"]["user_type"]
                
                mycursor.execute("select * from user_access_header where user_type = ? order by access_id", userType)
                headertabs = mycursor.fetchall()
                headertabs = convertValuesTodict(mycursor.description,headertabs)
                    
                mycursor.execute("select a.*  from user_access_item a inner join user_access_header b "\
                                    "on a.access_id = b.access_id where b.user_type = ? "\
                                    "order by a.access_id, sub_tab_id", userType)
                itemTabs = mycursor.fetchall()
                itemTabs = convertValuesTodict(mycursor.description,itemTabs)  
                tabAccess = []
                
                if headertabs:
                    for row in headertabs:
                        itemTabsList = []
                        
                        if itemTabs:
                            for each in itemTabs:
                                if row["access_id"] == each["access_id"]:
                                    tempItem = {
                                        "access_id": each["access_id"],
                                        "sub_tab_id": each["sub_tab_id"],
                                        "subtab_name": each["subtab_name"],
                                        "subtab_desc": each["subtab_desc"]
                                    }
                                    itemTabsList.append(tempItem) 
                                
                        temp = {
                            "access_id": row["access_id"],
                            "tab_name": row["tab_name"],
                            "tab_desc": row["tab_desc"],
                            "itemTabs": itemTabsList
                        }
                        
                        tabAccess.append(temp) 
                    
            mydb.commit()      

    except:
        mydb.rollback()
        return {
            'statuscode': 500,
            'body': json.dumps("Interal Error!")
        }

    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': tabAccess
    }
  
    
# didnt find a event to test   
def getMemberRoles(event, context):
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='ap-south-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )
    
    # secret = event["stage-variables"]["secreat"]

    # resp = client.get_secret_value(
    #     SecretId= secret
    # )

    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()

    records = {}

    member = []
    
    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            mycursor.execute("SELECT m.member_id, m.department_id, a.department_name, m.fs_name, m.ls_name, m.user_type, m.email, d.value2 from member m left OUTER join dropdown d on m.user_type = d.value1 left outer join departmental_budget_master a on m.department_id = a.department_id")
            temp = convertValuesTodict(mycursor.description, mycursor.fetchall())
            for row in temp:
                record = {
                    'member_id': row['member_id'],
                    'department_id': row['department_id'],
                    'department_name': row['department_name'],
                    'name': row['fs_name'] + " " + row['ls_name'],
                    'email' : row["email"],
                    'user_type': row["user_type"],
                    'user_type_description': row["value2"]
                }
                member.append(record)
            records['Member'] = sorted(member, key = lambda i: i['name'])    
            
    except:
        return {
            'statuscode': 500,
            'body': json.dumps("Internal Failure")
        }

    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': records
    }


# def get_stored_credentials(user_id):
    
#     global ocr_bucket_folder  
    
#     try:
#         s3 = boto3.client("s3")
#         encoded_file = s3.get_object(Bucket=elipo_bucket, Key=ocr_bucket_folder+user_id)
#         creds = pickle.loads(encoded_file["Body"].read())
#         return creds
        
#     except Exception as excep:
#         creds = None
        
# def create_message(sender, to, cc, subject, message_text):
 
#     message = email.mime.text.MIMEText(message_text, 'html')
#     message['to'] = to
#     message['cc'] = cc
#     message['from'] = sender
#     message['subject'] = subject
#     encoded = base64.urlsafe_b64encode(message.as_string().encode("utf-8"))
#     return {'raw': encoded.decode("utf-8")}

# def send_message(service, user_id, message):
#     try:  
#         message = (service.users().messages().send(userId=user_id, body=message).execute())
#         return message
#     except Exception as error:
#         print("An error occurred: ", error)

# def build_service(credentials):
#     http = httplib2.Http()
#     http = credentials.authorize(http)
#     return build('gmail', 'v1', http=http)  

# def sendMailNotifications(user, role, mycursor):
    
#     # user_id = elipo_cred
#     mycursor.execute("select * from elipo_setting where key_name = 'notification-mail' ")
#     email_data = mycursor.fetchone()
#     user_id = email_data["value1"]
    
#     mail_cc = ''
#     mail_subject = 'ELIPO Notification'
#     mail_body = ''
    
#     mail_body = '''<html>
#             <body  >
#         <div style=" max-width: 500px; margin: auto; padding: 10px; ">
#                 <div style=" width:100%; align-content: center;text-align: center;">
#                     <img src="https://einvoice-public-images.s3.ap-south-1.amazonaws.com/ELIPO+logo.png" alt="Italian Trulli" style="vertical-align:middle; width: 140px;height:50px;text-align: center;"  >
#                 </div>
#         	<div style=" width:100%; align-content:left;text-align:left;">
#                     <hr style="width:100%; text-align: center; border: 2px solid #0000001A;opacity: 0.5; border-radius: 2px;" >
#                 </div>
#                 <b>
#                     <span style="vertical-align: middle;text-align: left;font: 600  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;" >
#                         Hello {},
#                     </span> 
#                 <div style=" width:100%; align-content: center;text-align: center;margin-top: 10px;">   
#                     <span style="vertical-align: middle; align-content: center; font: 500 16px/23px Open Sans;letter-spacing: 0px;color:#000000;white-space: nowrap;opacity: 1;" >
#                          Welcome to ELIPO
#                     </span>
                    
#                 </div>
        
#             <br>
#             <div style=" max-width:800px; min-width: 100px;  text-align: center ; margin-top: 10px; font: 500  16px/23px Open Sans;letter-spacing: 0px;color: #000000;opacity: 1;">
#                 You have successfully assigned the role of {} to ELIPO. You can login to ELIPO by clicking on the below link.
#             </div>
#             <br>
#             <div style=" width:100%;align-content: center;text-align: center;">
#                 <a href="https://ywi7o0pxhc.execute-api.eu-central-1.amazonaws.com/production/login" target="_blank">
#                     <button style="border: none;box-shadow: 1px 1px 5px 1px #5a9e9b; background:rgb(80, 219, 212) 0% 0% no-repeat padding-box; border-radius: 7px;opacity: 1;width:180px; height: 35px;outline: none;border: none;" > 
#                         <span style="vertical-align: middle; text-align: left;font: 600 bold 16px/23px Open Sans;letter-spacing: 0px;color: whitesmoke;white-space: nowrap;opacity: 1;">Login to ELIPO</span>
#                     </button>
#                 </a>
#             </div>
        
#             <br><br>
#             <div style="width:100%;">
#                 <span style="vertical-align: middle; text-align: left;font: 500  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;">Happy Invoicing!</span>
#             <br>
#             <span style="vertical-align: middle; text-align: left;font: 500  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;">Regards,</span>
#             <br>
#             <span style="vertical-align: middle;text-align: left;font: 500  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;">Team ELIPO</span>
#             </div>
#         <div style=" width:100%; align-content:left;text-align:left;">
#                     <hr style="width:100%; text-align: center; border: 2px solid #0000001A;opacity: 0.5; border-radius: 2px;" >
#                 </div>
        
            
#             <div style="width:100%;align-content: center;text-align: center;">
#                 <span style=" text-align: center;font: 600 bold 16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 0.7;">This message was sent to you by ELIPO</span>
#             </div>
#             <div style="width:100%;align-content: center;text-align: center;">
#                 <img src="https://einvoice-public-images.s3.ap-south-1.amazonaws.com/elipo+logo_2.png" alt="Italian Trulli" style="text-align: center;width: 80px;height: 30px;" >
#             </div>
            
#             <br>
#         </div>
#             </body></html>'''.format(user['mem_name'], role['value2'])

#     credentials = get_stored_credentials(user_id)

#     if credentials and credentials.refresh_token is not None:
#         service = build_service(credentials=credentials)  
#         message = create_message(sender=user_id, to=str(user['email']), cc=mail_cc, subject=mail_subject, message_text=mail_body)
#         send_message(service=service, user_id="me", message=message)  

#event not found

def get_stored_credentials(user_id):
    
    global ocr_bucket_folder  
    
    try:
        s3 = boto3.client("s3",
                          region_name='eu-central-1',
                          aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
                          aws_secret_access_key='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')
        
        encoded_file = s3.get_object(Bucket=elipo_bucket, Key=ocr_bucket_folder+user_id)
        creds = pickle.loads(encoded_file["Body"].read())
        return creds
        
    except Exception as excep:
        creds = None

def send_message(service, user_id, message):
    try:  
        message = (service.users().messages().send(userId=user_id, body=message).execute())
        return message
    except Exception as error:
        print("An error occurred: ", error)

def build_service(credentials):
    http = httplib2.Http()
    http = credentials.authorize(http)
    return build('gmail', 'v1', http=http) 

def create_message(sender, to, cc, subject, message_text):
 
    message = email.mime.text.MIMEText(message_text, 'html')
    message['to'] = to
    message['cc'] = cc
    message['from'] = sender
    message['subject'] = subject
    encoded = base64.urlsafe_b64encode(message.as_string().encode("utf-8"))
    return {'raw': encoded.decode("utf-8")}

def sendMailNotifications(user, role, mycursor):
    
    # user_id = elipo_cred
    mycursor.execute("select * from elipo_setting where key_name = 'notification-mail' ")
    email_data = mycursor.fetchone()
    user_id = email_data["value1"]
    
    mail_cc = ''
    mail_subject = 'ELIPO Notification'
    mail_body = ''
    
    mail_body = '''<html>
            <body  >
        <div style=" max-width: 500px; margin: auto; padding: 10px; ">
                <div style=" width:100%; align-content: center;text-align: center;">
                    <img src="https://einvoice-public-images.s3.ap-south-1.amazonaws.com/ELIPO+logo.png" alt="Italian Trulli" style="vertical-align:middle; width: 140px;height:50px;text-align: center;"  >
                </div>
        	<div style=" width:100%; align-content:left;text-align:left;">
                    <hr style="width:100%; text-align: center; border: 2px solid #0000001A;opacity: 0.5; border-radius: 2px;" >
                </div>
                <b>
                    <span style="vertical-align: middle;text-align: left;font: 600  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;" >
                        Hello {},
                    </span> 
                <div style=" width:100%; align-content: center;text-align: center;margin-top: 10px;">   
                    <span style="vertical-align: middle; align-content: center; font: 500 16px/23px Open Sans;letter-spacing: 0px;color:#000000;white-space: nowrap;opacity: 1;" >
                         Welcome to ELIPO
                    </span>
                    
                </div>
        
            <br>
            <div style=" max-width:800px; min-width: 100px;  text-align: center ; margin-top: 10px; font: 500  16px/23px Open Sans;letter-spacing: 0px;color: #000000;opacity: 1;">
                You have successfully assigned the role of {} to ELIPO. You can login to ELIPO by clicking on the below link.
            </div>
            <br>
            <div style=" width:100%;align-content: center;text-align: center;">
                <a href="https://ywi7o0pxhc.execute-api.eu-central-1.amazonaws.com/production/login" target="_blank">
                    <button style="border: none;box-shadow: 1px 1px 5px 1px #5a9e9b; background:rgb(80, 219, 212) 0% 0% no-repeat padding-box; border-radius: 7px;opacity: 1;width:180px; height: 35px;outline: none;border: none;" > 
                        <span style="vertical-align: middle; text-align: left;font: 600 bold 16px/23px Open Sans;letter-spacing: 0px;color: whitesmoke;white-space: nowrap;opacity: 1;">Login to ELIPO</span>
                    </button>
                </a>
            </div>
        
            <br><br>
            <div style="width:100%;">
                <span style="vertical-align: middle; text-align: left;font: 500  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;">Happy Invoicing!</span>
            <br>
            <span style="vertical-align: middle; text-align: left;font: 500  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;">Regards,</span>
            <br>
            <span style="vertical-align: middle;text-align: left;font: 500  16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 1;">Team ELIPO</span>
            </div>
        <div style=" width:100%; align-content:left;text-align:left;">
                    <hr style="width:100%; text-align: center; border: 2px solid #0000001A;opacity: 0.5; border-radius: 2px;" >
                </div>
        
            
            <div style="width:100%;align-content: center;text-align: center;">
                <span style=" text-align: center;font: 600 bold 16px/23px Open Sans;letter-spacing: 0px;color: #000000;white-space: nowrap;opacity: 0.7;">This message was sent to you by ELIPO</span>
            </div>
            <div style="width:100%;align-content: center;text-align: center;">
                <img src="https://einvoice-public-images.s3.ap-south-1.amazonaws.com/elipo+logo_2.png" alt="Italian Trulli" style="text-align: center;width: 80px;height: 30px;" >
            </div>
            
            <br>
        </div>
            </body></html>'''.format(user['mem_name'], role['value2'])

    credentials = get_stored_credentials(user_id)

    if credentials and credentials.refresh_token is not None:
        service = build_service(credentials=credentials)  
        message = create_message(sender=user_id, to=str(user['email']), cc=mail_cc, subject=mail_subject, message_text=mail_body)
        send_message(service=service, user_id="me", message=message)  

def patchMemberRole(event, context):
    global dbScehma 
    dbScehma = ' DBADMIN '
    
    # global elipo_cred
    # elipo_cred = event["stage-variables"]["notification_email"] 
    
    global elipo_bucket
    elipo_bucket = event["stage-variables"]["cred_bucket"]
    
    global ocr_bucket_folder
    ocr_bucket_folder = event["stage-variables"]["ocr_bucket_folder"]
    
    # client = boto3.client(
    # 'secretsmanager',
    # region_name='ap-south-1',
    # aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    # aws_secret_access_key='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' )
    # secret = event["stage-variables"]["secreat"]
    # resp = client.get_secret_value(
    #     SecretId= secret
    # )  
    # secretDict = json.loads(resp['SecretString'])

    mydb = hdbcliConnect()

    try:
        with mydb.cursor() as mycursor:
            defSchemaQuery = "set schema " + dbScehma
            mycursor.execute(defSchemaQuery)

            member_id = event["params"]["querystring"]["userid"]
            role = event["params"]["querystring"]["role"]
            if role == NULL:
                role = ''
            
            if "vendor_no" in event["params"]["querystring"]:
                vendor_no = event["params"]["querystring"]["vendor_no"]
                
                mycursor.execute("select * from vendor_master where member_id = ?", member_id)
                vendorDetail = mycursor.fetchone()
                
                if vendorDetail:
                    msg = "Member already exists for Vendor " + str(vendorDetail["vendor_name"])
                    return {
                        'statuscode': 201,
                        'body': json.dumps(msg)
                    }
                    
                else:
                    values = (member_id, vendor_no)
                    mycursor.execute("UPDATE vendor_master SET member_id = ? WHERE vendor_no = ?", values)
            
            if "department_id" in event["params"]["querystring"]:
                department_id = event["params"]["querystring"]["department_id"]
                
            else:
                department_id = ""  
                
            values = (role, int(department_id), int(member_id))
            mycursor.execute("UPDATE member SET group_id = 0, user_type = ?, department_id = ? WHERE member_id = ?", values)
            
            values = (member_id,)
            mycursor.execute("select (fs_name || ' ' || ls_name) as mem_name, email from member where member_id = ?", values)
            member = mycursor.fetchone()
            
            values = (role,)
            mycursor.execute("select * from dropdown where drop_key = 'user_type' and value1 = ?", values)
            newrole = mycursor.fetchone()
            
            mydb.commit()
   
            if member:
                sendMailNotifications(user=member, role=newrole, mycursor=mycursor )
            
    except Exception as e:  
        return {
            'statuscode': 500,
            'body': str(e)
        }
        
    finally:
        mydb.close()

    return {
        'statuscode': 200,
        'body': json.dumps("Role Updated")
    }

# print(patchMemberRole(event , ' '))

def deleteAttachment(event, context):
    global dbScehma 
    
    client = boto3.client(
    'secretsmanager',
    region_name='eu-central-1',
    aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    aws_secret_access_key='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' )
    secret = event["stage-variables"]["secreat"]
    resp = client.get_secret_value(
        SecretId= secret
    )
    secretDict = json.loads(resp['SecretString'])

    mydb = pymysql.connect(
        host=secretDict['host'],
        user=secretDict['username'],
        passwd=secretDict['password'],
        database=secretDict['dbname'],
        charset='utf8mb4',
        cursorclass=pymysql.cursors.DictCursor
    )

    try:
        with mydb.cursor() as mycursor:
            dbScehma = event["stage-variables"]["schema"]
            
            defSchemaQuery = "use " + dbScehma
            mycursor.execute(defSchemaQuery)
            
            attachment = event["params"]["querystring"]['attachment_id']
            email = event["params"]["querystring"]["userid"]
            
            mycursor.execute("select member_id, concat(fs_name, ' ', ls_name) as member_name from einvoice_db_portal.member where email = ?", email)
            member = mycursor.fetchone()
            
            values = (attachment,)
            mycursor.execute('SELECT * FROM einvoice_db_portal.file_storage where attach_id = %s', values)
            attachment_det = mycursor.fetchone()
            
            mycursor.execute("select in_status from einvoice_db_portal.invoice_header where invoice_no = %s", attachment_det["file_id"])
            invoice_header = mycursor.fetchone()
            
            mycursor.execute('DELETE FROM einvoice_db_portal.file_storage WHERE attach_id = %s', values)
            
            msg_cmnt = attachment_det["name"] + " attachment deleted by " + member["member_name"]
            temp = (attachment_det["file_id"], invoice_header["in_status"], invoice_header["in_status"], member['member_id'], msg_cmnt)
            sqlQuery = "insert into einvoice_db_portal.invoice_audit (invoice_no, prev_status, new_status, working_person, msg) values (%s, %s, %s, %s, %s)"
            mycursor.execute(sqlQuery, temp)
            
            if attachment_det:
                
                s3 = boto3.client("s3")
                s3.delete_object(Bucket=attachment_det['file_path'], Key=attachment_det['name'])
                
                mydb.commit()
                
                return {
                    'statuscode': 200,
                    'body': json.dumps("Deleted Successfully!")
                }
                
            return {
                    'statuscode': 200,
                    'body': json.dumps("Attachment not Found")
                }
    except:
        return {
            'statuscode': 500,
            'body': json.dumps("Internal Error!")
        }
    
    finally:
        mydb.close()


def einvoice_upload_attachment(event, context):
    
      
    try:
        if "body" in event and event["body"]:
    
            client = boto3.client(
    'secretsmanager',
    region_name='ap-south-1',
    aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    aws_secret_access_key='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' )
            
            secret = event["stageVariables"]["secreat"]
            bucket = event["stageVariables"]["non_ocr_attachment"]
            stage = event["stageVariables"]["lambda_alias"]
            
            resp = client.get_secret_value(
                SecretId= secret
            )
        
            secretDict = json.loads(resp['SecretString'])
        
            mydb = pymysql.connect(
                host=secretDict['host'],
                user=secretDict['username'],
                passwd=secretDict['password'],
                database=secretDict['dbname'],
                charset='utf8mb4',
                cursorclass=pymysql.cursors.DictCursor
            )
            
            s3 = boto3.client("s3")
        
            # decoding form-data into bytes
            post_data = base64.b64decode(event['body'])
            
            if "Content-Type" in event["headers"]:
                content_type = event["headers"]["Content-Type"]
                ct = "Content-Type: "+content_type+"\n"
                        
            elif "content-type" in event["headers"]:
                content_type = event["headers"]["content-type"]
                ct = "content-type: "+content_type+"\n"
        
            msg = email.message_from_bytes(ct.encode()+post_data)
        
            # checking if the message is multipart
            print("Multipart check : ", msg.is_multipart())
            
            if msg.is_multipart():
                multipart_content = {}
                for part in msg.get_payload():
                    multipart_content[part.get_param('name', header='content-disposition')] = part.get_payload(decode=True)
        
                # filename from form-data
                file_name = str(multipart_content["file_name"].decode("utf-8") )  
                mime_type = str(multipart_content["mime_type"].decode("utf-8") )
                file_id = str(multipart_content["file_id"].decode("utf-8") )
                email_id = str(multipart_content["userid"].decode("utf-8") )
                
                #u uploading file to S3
                s3_upload = s3.put_object(Bucket=bucket, Key=file_name, Body=multipart_content["file"]) 
                
                var_path = "https://l8m6p8a76e.execute-api.eu-central-1.amazonaws.com/" + stage + "/attachment?file_name=" + file_name + "&bucket=" + bucket 
        
                with mydb.cursor() as mycursor:
                    sqlQuery = "INSERT INTO einvoice_db_portal.file_storage (file_id, name, mime_type, file_path, file_link) VALUES (%s, %s, %s, %s, %s)"
                    values = (file_id, file_name, mime_type, bucket, var_path )
                    mycursor.execute(sqlQuery, values)
                        
                    mycursor.execute("select member_id, concat(fs_name, ' ', ls_name) as member_name from einvoice_db_portal.member where email = %s", email_id)
                    member = mycursor.fetchone()
                        
                    mycursor.execute("select in_status from einvoice_db_portal.invoice_header where invoice_no = %s", file_id)
                    invoice_header = mycursor.fetchone()
                        
                    msg_cmnt = file_name + " attachment uploaded by " + member["member_name"]
                    temp = (file_id, invoice_header["in_status"], invoice_header["in_status"], member['member_id'], msg_cmnt)
                    sqlQuery = "insert into einvoice_db_portal.invoice_audit (invoice_no, prev_status, new_status, working_person, msg) values (%s, %s, %s, %s, %s)"
                    mycursor.execute(sqlQuery, temp)
                        
                    mydb.commit()
                        
                    body = {
                            'statuscode': 200,
                            'path': var_path
                    }
                                
                    # on upload success
                    return {
                        'statusCode': 200,
                        'headers': {
                            'Content-type': 'application/json', 
                            'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
                            'Access-Control-Allow-Origin': '*',
                            'Access-Control-Allow-Methods': 'OPTIONS,POST'
                        },
                        'body': json.dumps('File uploaded successfully!')
                    }
                
    except pymysql.err.IntegrityError as e:
        mydb.rollback()
        return {
            'statusCode': 500,
            'headers': {
                'Content-type': 'application/json',
                'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'OPTIONS,POST'
            },
            'body': json.dumps('IntegrityError') 
        }
                
    except Exception as e:  
        mydb.rollback()
        return {
            'statusCode': 500,
            'headers': {
                'Content-type': 'application/json', 
                'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'OPTIONS,POST'
            },
            'body': json.dumps('Server Error')   
        }
        
        
    finally:
        mydb.close()
        
    return {
        'statusCode': 205,  
        'headers': {
            'Content-type': 'application/json',
            'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,X-Amz-Security-Token,Authorization,X-Api-Key,X-Requested-With,Accept,Access-Control-Allow-Methods,Access-Control-Allow-Origin,Access-Control-Allow-Headers',
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'OPTIONS,POST',
            'X-Requested-With': '*'
        },
        'body': json.dumps('Failed to upload!')   
    }   
    
    
    
    
    
    def deleteEnquiryAttachment(event, context):
        client = boto3.client(
    'secretsmanager',
    region_name='ap-south-1',
    aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    aws_secret_access_key='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' )
    secret = event["stage-variables"]["secreat"]
    resp = client.get_secret_value(
        SecretId= secret
    )
    secretDict = json.loads(resp['SecretString'])

    mydb = pymysql.connect(
        host=secretDict['host'],
        user=secretDict['username'],
        passwd=secretDict['password'],
        database=secretDict['dbname'],
        charset='utf8mb4',
        cursorclass=pymysql.cursors.DictCursor
    )

    try:
        with mydb.cursor() as mycursor:
            
            attachment = event["params"]["querystring"]['attachment_id']
            
            values = (attachment,)
            mycursor.execute('SELECT * FROM einvoice_db_portal.enquiry_attachement where attach_id = %s', values)
            attachment_det = mycursor.fetchone()
            
            mycursor.execute('DELETE FROM einvoice_db_portal.enquiry_attachement WHERE attach_id = %s', values)
            
            if attachment_det:
                
                s3 = boto3.client("s3")
                s3.delete_object(Bucket=attachment_det['file_path'], Key=attachment_det['name'])
                
                mydb.commit()
                
                return {
                    'statuscode': 200,
                    'body': json.dumps("Deleted Successfully!")
                }
                
            return {
                    'statuscode': 200,
                    'body': json.dumps("Attachment not Found")
                }
    except:
        return {
            'statuscode': 500,
            'body': json.dumps("Internal Error!")
        }
    
    finally:
        mydb.close()
def einvoice_upload_enquiry_attachment(event, context):
      
    try:
        if "body" in event and event["body"]:
            
            secret = event["stageVariables"]["secreat"]
            bucket = event["stageVariables"]["enquiry_bucket"]
            stage = event["stageVariables"]["lambda_alias"]
            
            client = boto3.client(
    'secretsmanager',
    region_name='ap-south-1',
    aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    aws_secret_access_key='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' )
            resp = client.get_secret_value(
                SecretId= secret
            )
            secretDict = json.loads(resp['SecretString'])
        
            mydb = pymysql.connect(
                host=secretDict['host'],
                user=secretDict['username'],
                passwd=secretDict['password'],
                database=secretDict['dbname'],
                charset='utf8mb4',
                cursorclass=pymysql.cursors.DictCursor
            )
            
            s3 = boto3.client("s3")
        
            # decoding form-data into bytes
            post_data = base64.b64decode(event['body'])
            
            if "Content-Type" in event["headers"]:
                content_type = event["headers"]["Content-Type"]
                ct = "Content-Type: "+content_type+"\n"
                        
            elif "content-type" in event["headers"]:
                content_type = event["headers"]["content-type"]
                ct = "content-type: "+content_type+"\n"
        
            # parsing message from bytes
            msg = email.message_from_bytes(ct.encode()+post_data)
        
            # checking if the message is multipart
            print("Multipart check : ", msg.is_multipart())
            
            # if message is multipart
            if msg.is_multipart():
                multipart_content = {}
                
                # retrieving form-data
                for part in msg.get_payload():
                    multipart_content[part.get_param('name', header='content-disposition')] = part.get_payload(decode=True)
        
                # filename from form-data
                file_name = str(multipart_content["file_name"].decode("utf-8") )  
                mime_type = str(multipart_content["mime_type"].decode("utf-8") )
                enquiry_no = str(multipart_content["enquiry_no"].decode("utf-8") )
                
                #u uploading file to S3
                s3_upload = s3.put_object(Bucket=bucket, Key=file_name, Body=multipart_content["file"]) 
                
                var_path = "https://l8m6p8a76e.execute-api.eu-central-1.amazonaws.com/" + stage + "/attachment?file_name=" + file_name + "&bucket=" + bucket 
        
                with mydb.cursor() as mycursor:
                    
                    sqlQuery = "INSERT INTO einvoice_db_portal.enquiry_attachement (enquiry_no, name, mime_type, file_path, file_link) VALUES (%s, %s, %s, %s, %s)"
                    values = (enquiry_no, file_name, mime_type, bucket, var_path )
                    mycursor.execute(sqlQuery, values)
                    attachment_id = mycursor.lastrowid
                    
                    mydb.commit()
                    
                    record = {
                        'statuscode': 200,
                        'msg': "File uploaded successfully!",
                        'file_link': var_path,
                        'attachment_id': attachment_id
                    }
                    
                    # on upload success
                    return {
                        'statusCode': 200,
                        'headers': {
                            'Content-type': 'application/json', 
                            'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
                            'Access-Control-Allow-Origin': '*',
                            'Access-Control-Allow-Methods': 'OPTIONS,POST'
                        },
                            'body': json.dumps(record)
                    }
                
    except pymysql.err.IntegrityError as e:
        mydb.rollback()
        return {
            'statusCode': 500,
            'headers': {
                'Content-type': 'application/json',
                'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'OPTIONS,POST'
            },
            'body': json.dumps('IntegrityError')
            # 'body': { 'statuscode' : 500, 'msg': 'IntegrityError'}   
        }
                
    except Exception as e:  
        mydb.rollback()
        return {
            'statusCode': 500,
            'headers': {
                'Content-type': 'application/json', 
                'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'OPTIONS,POST'
            },
            'body': json.dumps('Server Error')   
        }
        
    finally:
        mydb.close()
        
    return {
        'statusCode': 205,  
        'headers': {
            'Content-type': 'application/json',
            'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,X-Amz-Security-Token,Authorization,X-Api-Key,X-Requested-With,Accept,Access-Control-Allow-Methods,Access-Control-Allow-Origin,Access-Control-Allow-Headers',
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'OPTIONS,POST',
            'X-Requested-With': '*'
        },
        'body': json.dumps('Failed to upload!')   
    }   
    
  
def einvoice_upload_profile_photo(event, context):
    
    secret = event["stageVariables"]["secreat"]
    bucket = event["stageVariables"]["non_ocr_attachment"]
    stage = event["stageVariables"]["lambda_alias"] 
    
    client = boto3.client(
    'secretsmanager',
    region_name='ap-south-1',
    aws_access_key_id='AKIAXUCMAX6S27NZCRFL',
    aws_secret_access_key='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' )
    resp = client.get_secret_value(
        SecretId= secret
    )
    secretDict = json.loads(resp['SecretString'])

    mydb = pymysql.connect(
        host=secretDict['host'],
        user=secretDict['username'],
        passwd=secretDict['password'],
        database=secretDict['dbname'],
        charset='utf8mb4',
        cursorclass=pymysql.cursors.DictCursor
    )

    s3 = boto3.client("s3")
    
    try:
        if "body" in event and event["body"]:
            
            post_data = base64.b64decode(event["body"])
            if "Content-Type" in event["headers"]:
                content_type = event["headers"]["Content-Type"]
                ct = "Content-Type: "+content_type+"\n"
                
            elif "content-type" in event["headers"]:
                content_type = event["headers"]["content-type"]
                ct = "content-type: "+content_type+"\n"
                
            if ct:
                
                msg = email.message_from_bytes(ct.encode()+post_data)
                
                if msg.is_multipart():
                    
                    multipart_content = {}
                    
                    for part in msg.get_payload():
                        
                        multipart_content[part.get_param('name', header='content-disposition')] = part.get_payload(decode=True)
                    
                    member_id = " ".join(re.findall("(?<=')[^']+(?=')", str(multipart_content["member_id"])))
                    file_name = " ".join(re.findall("(?<=')[^']+(?=')", str(multipart_content["file_name"])))
                    
                    filenamett, file_extension = os.path.splitext(file_name) 
                    up_file_name = str(member_id) + file_name
                    
                    file_name = "profile_photo/" + up_file_name
                    s3_upload = s3.put_object(Bucket=bucket, Key=file_name, Body=multipart_content["file"])
                    
                    var_path = "https://l8m6p8a76e.execute-api.eu-central-1.amazonaws.com/" + stage + "/attachment?file_name=profile_photo/" + up_file_name + "&bucket=" + bucket 
                    
                    with mydb.cursor() as mycursor:
                        
                        sqlQuery = "update einvoice_db_portal.member set profile_photo = %s where member_id = %s"
                        values = (var_path, member_id)
                        mycursor.execute(sqlQuery, values)
                        
                        mydb.commit()
        
    except pymysql.err.IntegrityError as e:
        mydb.rollback()
        return {
            'statusCode': 500,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
            },
            'body': json.dumps(str(e))
        }
        
    except Exception as e:
        mydb.rollback()
        return {
            'statusCode': 500,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
            },
            'body': json.dumps(str(e))
        }
        
    finally:
        mydb.close()
        
    return {
        'statusCode': 200,
        'headers': {
            'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
        },
        'body': json.dumps('File uploaded successfully!')
    }      
    
    